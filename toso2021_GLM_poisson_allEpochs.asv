%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% GLM settings
distro = 'poisson';
glm_win = t_set(t1_mode_idx); % min(t_set);

%% ROI settings

% initialization
glm_roi = struct();

% roi definitions
glm_roi.aroundInitMov = [-glm_win,0] - 400;
glm_roi.preInit = [-glm_win,0];
glm_roi.postInit = [0,glm_win];
glm_roi.preS1Onset = [-glm_win,0];
glm_roi.postS1Onset = [0,glm_win];
glm_roi.preS1Offset = [-glm_win,0];
glm_roi.postS1Offset = [0,glm_win];
glm_roi.preS2Onset = [-glm_win,0];
glm_roi.postS2Onset = [0,glm_win];
glm_roi.preS2Offset = [-glm_win,0];
glm_roi.postS2Offset = [0,glm_win];
glm_roi.preGoCue = [-glm_win,0];
glm_roi.postGoCue = [0,glm_win];
glm_roi.aroundChoiceMov = [0,glm_win] + 400;

% epoch parsing
epochs = fieldnames(glm_roi);
n_epochs = numel(epochs);

%% neuron selection

% selected for being good examples of i2-modulation
if strcmpi(task_str,'duration')
    neurons2use = [...
        21,24,35,38,62,65,68,72,100,130,205,206,215,224,...
        234,241,356,381,391,393,397,402,406,428,441,448,...
        459,461,462,470,473,493,526,544,553,555,566];
    %     neurons2use = [...
    %         38,72,205,215,224,391,393,397,402,448,459,462,470,526,566];
elseif strcmpi(task_str,'intensity')
    neurons2use = [...
        19,22,30,61,66,70,100,111,112,115,...
        166,238,243,260,344,408,410];
end
neurons2use = flagged_neurons;
neurons2use = neuron_idcs;
n_neurons2use = numel(neurons2use);

%% construct response

% preallocation
spkcounts = struct();

% iterate through neurons
for nn = 1 : n_neurons2use
    progressreport(nn,n_neurons2use,'fetching spike counts');
    neuron_flags = data.NeuronNumb == neurons2use(nn);
    
    % flag trials for the current condition
    spike_flags = ...
        valid_flags & ...
        neuron_flags & ...
        t1 >= glm_win & ...
        t2 >= glm_win;
    if sum(spike_flags) == 0
        continue;
    end
    
    % fetch spike counts & compute spike rates
    spike_counts = data.FR(spike_flags,:)';
    spike_rates = ...
        conv2(kernel.pdf,1,spike_counts,'valid') / psthbin * 1e3;
    n_trials = sum(spike_flags);
    
    % around approach spike rates
    alignment_onset = ...
        repmat(pre_init_padding,n_trials,1);
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.aroundInitMov(1) & ...
        padded_time < alignment_onset + glm_roi.aroundInitMov(2);
    chunk_flags = alignment_flags;
    spkcounts_aroundInitMov = spike_counts;
    spkcounts_aroundInitMov(~alignment_flags') = nan;
    spkcounts_aroundInitMov = ...
        reshape(spkcounts_aroundInitMov(chunk_flags'),[glm_win,n_trials])';
    
    % pre initiation spike rates
    alignment_onset = ...
        repmat(pre_init_padding,n_trials,1);
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.preInit(1) & ...
        padded_time < alignment_onset + glm_roi.preInit(2);
    chunk_flags = alignment_flags;
    spkcounts_preInit = spike_counts;
    spkcounts_preInit(~alignment_flags') = nan;
    spkcounts_preInit = ...
        reshape(spkcounts_preInit(chunk_flags'),[glm_win,n_trials])';
    
    % post initiation spike rates
    alignment_onset = ...
        repmat(pre_init_padding,n_trials,1);
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.postInit(1) & ...
        padded_time < alignment_onset + glm_roi.postInit(2);
    chunk_flags = alignment_flags;
    spkcounts_postInit = spike_counts;
    spkcounts_postInit(~alignment_flags') = nan;
    spkcounts_postInit = ...
        reshape(spkcounts_postInit(chunk_flags'),[glm_win,n_trials])';
    
    % pre-S1 onset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags);
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.preS1Onset(1) & ...
        padded_time < alignment_onset + glm_roi.preS1Onset(2);
    chunk_flags = alignment_flags;
    spkcounts_preS1Onset = spike_counts;
    spkcounts_preS1Onset(~alignment_flags') = nan;
    spkcounts_preS1Onset = ...
        reshape(spkcounts_preS1Onset(chunk_flags'),[glm_win,n_trials])';
    
    % post-S1 onset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags);
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.postS1Onset(1) & ...
        padded_time < alignment_onset + t1(spike_flags);
    chunk_flags = ...
        padded_time >= alignment_onset + glm_roi.postS1Onset(1) & ...
        padded_time < alignment_onset + glm_roi.postS1Onset(2);
    spkcounts_postS1Onset = spike_counts;
    spkcounts_postS1Onset(~alignment_flags') = nan;
    spkcounts_postS1Onset = ...
        reshape(spkcounts_postS1Onset(chunk_flags'),[glm_win,n_trials])';
    
    % pre-S1 offset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags);
    alignment_flags = ...
        padded_time >= alignment_onset - t1(spike_flags) & ...
        padded_time < alignment_onset + glm_roi.preS1Offset(2);
    chunk_flags = ...
        padded_time >= alignment_onset + glm_roi.preS1Offset(1) & ...
        padded_time < alignment_onset + glm_roi.preS1Offset(2);
    spkcounts_preS1Offset = spike_counts;
    spkcounts_preS1Offset(~alignment_flags') = nan;
    spkcounts_preS1Offset = ...
        reshape(spkcounts_preS1Offset(chunk_flags'),[glm_win,n_trials])';
    
    % post-S1 offset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags);
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.postS1Offset(1) & ...
        padded_time < alignment_onset + glm_roi.postS1Offset(2);
    chunk_flags = alignment_flags;
    spkcounts_postS1Offset = spike_counts;
    spkcounts_postS1Offset(~alignment_flags') = nan;
    spkcounts_postS1Offset = ...
        reshape(spkcounts_postS1Offset(chunk_flags'),[glm_win,n_trials])';
    
    % pre-S2 onset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi;
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.preS2Onset(1) & ...
        padded_time < alignment_onset + glm_roi.preS2Onset(2);
    chunk_flags = alignment_flags;
    spkcounts_preS2Onset = spike_counts;
    spkcounts_preS2Onset(~alignment_flags') = nan;
    spkcounts_preS2Onset = ...
        reshape(spkcounts_preS2Onset(chunk_flags'),[glm_win,n_trials])';
    
    % post-S2 onset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi;
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.postS2Onset(1) & ...
        padded_time < alignment_onset + t2(spike_flags);
    chunk_flags = ...
        padded_time >= alignment_onset + glm_roi.postS2Onset(1) & ...
        padded_time < alignment_onset + glm_roi.postS2Onset(2);
    spkcounts_postS2Onset = spike_counts;
    spkcounts_postS2Onset(~alignment_flags') = nan;
    spkcounts_postS2Onset = ...
        reshape(spkcounts_postS2Onset(chunk_flags'),[glm_win,n_trials])';
    
    % pre-S2 offset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi + ...
        t2(spike_flags);
    alignment_flags = ...
        padded_time >= alignment_onset - t2(spike_flags) & ...
        padded_time < alignment_onset + glm_roi.preS2Offset(2);
    chunk_flags = ...
        padded_time >= alignment_onset + glm_roi.preS2Offset(1) & ...
        padded_time < alignment_onset + glm_roi.preS2Offset(2);
    spkcounts_preS2Offset = spike_counts;
    spkcounts_preS2Offset(~alignment_flags') = nan;
    spkcounts_preS2Offset = ...
        reshape(spkcounts_preS2Offset(chunk_flags'),[glm_win,n_trials])';
    
    % post-S2 offset spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi + ...
        t2(spike_flags);
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.postS2Offset(1) & ...
        padded_time < alignment_onset + glm_roi.postS2Offset(2);
    chunk_flags = alignment_flags;
    spkcounts_postS2Offset = spike_counts;
    spkcounts_postS2Offset(~alignment_flags') = nan;
    spkcounts_postS2Offset = ...
        reshape(spkcounts_postS2Offset(chunk_flags'),[glm_win,n_trials])';
    
    % pre-go spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi + ...
        t2(spike_flags) + ...
        post_s2_delay;
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.preGoCue(1) & ...
        padded_time < alignment_onset + glm_roi.preGoCue(2);
    chunk_flags = alignment_flags;
    spkcounts_preGoCue = spike_counts;
    spkcounts_preGoCue(~alignment_flags') = nan;
    spkcounts_preGoCue = ...
        reshape(spkcounts_preGoCue(chunk_flags'),[glm_win,n_trials])';
    
    % post-go spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi + ...
        t2(spike_flags) + ...
        post_s2_delay;
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.postGoCue(1) & ...
        padded_time < alignment_onset + glm_roi.postGoCue(2);
    chunk_flags = alignment_flags;
    spkcounts_postGoCue = spike_counts;
    spkcounts_postGoCue(~alignment_flags') = nan;
    spkcounts_postGoCue = ...
        reshape(spkcounts_postGoCue(chunk_flags'),[glm_win,n_trials])';
    
    % around choice spike rates
    alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi + ...
        t2(spike_flags) + ...
        post_s2_delay;
    alignment_flags = ...
        padded_time >= alignment_onset + glm_roi.aroundChoiceMov(1) & ...
        padded_time < alignment_onset + glm_roi.aroundChoiceMov(2);
    chunk_flags = alignment_flags;
    spkcounts_aroundChoiceMov = spike_counts;
    spkcounts_aroundChoiceMov(~alignment_flags') = nan;
    spkcounts_aroundChoiceMov = ...
        reshape(spkcounts_aroundChoiceMov(chunk_flags'),[glm_win,n_trials])';
    
    % store average spike rates
    spkcounts.aroundInitMov(spike_flags) = nansum(spkcounts_aroundInitMov,2);
    spkcounts.preInit(spike_flags) = nansum(spkcounts_preInit,2);
    spkcounts.postInit(spike_flags) = nansum(spkcounts_postInit,2);
    spkcounts.preS1Onset(spike_flags) = nansum(spkcounts_preS1Onset,2);
    spkcounts.postS1Onset(spike_flags) = nansum(spkcounts_postS1Onset,2);
    spkcounts.preS1Offset(spike_flags) = nansum(spkcounts_preS1Offset,2);
    spkcounts.postS1Offset(spike_flags) = nansum(spkcounts_postS1Offset,2);
    spkcounts.preS2Onset(spike_flags) = nansum(spkcounts_preS2Onset,2);
    spkcounts.postS2Onset(spike_flags) = nansum(spkcounts_postS2Onset,2);
    spkcounts.preS2Offset(spike_flags) = nansum(spkcounts_preS2Offset,2);
    spkcounts.postS2Offset(spike_flags) = nansum(spkcounts_postS2Offset,2);
    spkcounts.preGoCue(spike_flags) = nansum(spkcounts_preGoCue,2);
    spkcounts.postGoCue(spike_flags) = nansum(spkcounts_postGoCue,2);
    spkcounts.aroundChoiceMov(spike_flags) = nansum(spkcounts_aroundChoiceMov,2);
end

%% spike count GLMs

% design matrix
X = [prev_choice,s1,d1,s2,d2,choice,trial_idcs];
% X = [s1,d1,s2,d2,trial_idcs];
n_regressors = size(X,2);
n_coefficients = n_regressors + 1;

% feature normalization
Z = (X - nanmean(X)) ./ nanstd(X);

% preallocation
betas = struct();
pvals = struct();

% iterate through epochs
for ee = 1 : n_epochs
    epoch = epochs{ee};
    
    % preallocation
    betas.(epoch) = zeros(n_neurons2use,n_coefficients);
    pvals.(epoch) = zeros(n_neurons2use,n_coefficients);
    
    % iterate through neurons
    for nn = 1 : n_neurons2use
        progressreport(nn,n_neurons2use,...
            sprintf('fitting neuron-wise GLMs (%s)',epoch));
        neuron_flags = data.NeuronNumb == neurons2use(nn);
        trial_flags = ...
            valid_flags & ...
            neuron_flags;
        if sum(trial_flags) == 0
            continue;
        end
        
        % fit GLM to each subject
        mdl = fitglm(Z(trial_flags,:),spkcounts.(epoch)(trial_flags),'linear',...
            'predictorvars',{'prev_choice',s1_lbl,d1_lbl,s2_lbl,d2_lbl,'choice','trial#'},...
            ...'predictorvars',{s1_lbl,d1_lbl,s2_lbl,d2_lbl,'trial#'},...
            'distribution',distro,...
            'intercept',true);
        betas.(epoch)(nn,:) = mdl.Coefficients.Estimate;
        pvals.(epoch)(nn,:) = mdl.Coefficients.pValue;
    end
end

%% plot percentage of significantly modulated neurons

% figure initialization
fig = figure(figopt,...
    'windowstate','maximized',...
    'name','GLM_significance_crossEpochs',...
    'color',[1,1,1]*1);

% axes initialization
yymax = .3;
yylim = [-1,1]*yymax+[-1,1]*.05*yymax*2;
yytick = unique([0,[-1,1]*yymax,[-1,1]*.05,[-1,1]*.01]);
yyticklabel = num2cell(abs(round(yytick,2)));
yyticklabel(~ismember(yytick,[0,[-1,1]*yymax])) = {''};
axes(axesopt.default,...
    'plotboxaspectratio',[3,1,1],...
    'color','none',...
    'ticklength',axesopt.default.ticklength*.25,...
    'xlim',[1,n_epochs]+[-1,1]*.75,...
    'xtick',1:n_epochs,...
    'xticklabel',epochs,...
    'xticklabelrotation',45,...
    'ylim',yylim,...
    'ytick',yytick,...
    'yticklabel',yyticklabel,...
    'layer','top');
title(sprintf('Spike counts ~ %s(\\phi(\\betaX))',capitalize(distro)));
xlabel(sprintf('%i-ms non-overlapping epochs',glm_win));
ylabel({'P(significant regression coefficients)',...
    'down-modulated         up-modulated'},...
    'verticalalignment','middle');

% significance settings
alphas = [.01,.05];
n_alphas = numel(alphas);

% reference lines
plot(xlim,[1,1]*0,'-k');
plot(xlim,[1,1]*min(alphas),':k');
plot(xlim,[1,1]*-min(alphas),':k');
plot(xlim,[1,1]*max(alphas),':k');
plot(xlim,[1,1]*-max(alphas),':k');

% iterate through epochs
for ee = 1 : n_epochs
    epoch = epochs{ee};
    
    % iterate through alphas
    for aa = 1 : n_alphas
        
        % iterate through coefficients
        for bb = 2 : n_coefficients - 1
            coeff_lbl = mdl.Coefficients.Properties.RowNames{bb};
            coeff_lbl = strrep(coeff_lbl,'#','');
            coeff_str = strrep(lower(coeff_lbl),'_','');
            coeff_clrs = eval([coeff_str,'_clrs']);
            
            x = ee + (bb - 1 - n_regressors / 2) * 3/4 / (n_regressors - 1);
            significant_flags = pvals.(epoch)(:,bb) < alphas(aa);
                        
            % pseudo-legend (regressors)
            if ee == 1 && aa == 2
                text(x-.025,yymax*.95,coeff_str,...
                    'color','k',...
                    'fontsize',8,...
                    'horizontalalignment','right',...
                    'verticalalignment','middle',...
                    'interpreter','none',...
                    'edgecolor','none',...
                    'rotation',90);
                if bb == 2
                    plot(1+[-1,1]*.05*n_regressors,[1,1]*yymax,...
                        'color','k',...
                        'linewidth',1.5);
                    text(1,yymax*1.05,'X',...
                        'color','k',...
                        'fontsize',12,...
                        'horizontalalignment','center',...
                        'verticalalignment','bottom');
                end
            end
                      
            % iterate through signs
            for ss = [-1,1]
                sign_flags = sign(betas.(epoch)(:,bb)) == ss;
                n = sum(significant_flags & sign_flags);
                p = n / n_neurons2use;
                if ss == -1
                    facecolor = coeff_clrs(1,:);
                else
                    facecolor = coeff_clrs(end,:);
                end
                %                 facecolor = facecolor .* (p >= alphas(aa));
                if alphas(aa) == .01
                    edgecolor = 'none';
                    facealpha = 1;
                else
                    edgecolor = facecolor;
                    facealpha = .25;
                end
                xpatch = x + [-1,1,1,-1] * .0525;
                ypatch = p * ss .* [0,0,1,1];
                patch(xpatch,ypatch,'k',...
                    'edgecolor',edgecolor,...
                    'facecolor',facecolor,...
                    'facealpha',facealpha,...
                    'linewidth',1.5);
                
                % regressor lines
                if ee == 1 && aa == 2 && ss == 1
                    offset = numel(coeff_str)*.0075;
                    p = plot(x*[1,1],[p,yymax*.95-offset],'-k');
                    uistack(p,'bottom');
                end
            end
      
            % pseudo-legend (significance)
            if ee == 1 && bb == 2
                xpatch = 1 + [-1,1,1,-1] * .25 / (1 + (alphas(aa) == .01)) - ...
                    .125 * (alphas(aa) == .01);
                ypatch = -yymax + [0,0,1,1] * .0125;
                patch(xpatch,ypatch,'k',...
                    'facealpha',facealpha,...
                    'linewidth',1.5);
                if alphas(aa) == .05
                    text(mean(xpatch),mean(ypatch)+.01,'\alpha',...
                        'color','k',...
                        'fontsize',12,...
                        'fontweight','bold',...
                        'horizontalalignment','center',...
                        'verticalalignment','bottom');
                end
                if alphas(aa) == .05
                    horzalignment = 'left';
                    xalpha = max(xpatch) + .06;
                else
                    horzalignment = 'right';
                    xalpha = min(xpatch) - .06;
                end
                text(xalpha,mean(ypatch)+.0025,sprintf('%.2f',alphas(aa)),...
                    'color','k',...
                    'fontsize',8,...
                    'horizontalalignment',horzalignment,...
                    'verticalalignment','middle');
            end
        end
    end
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end