%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% manual curation

% excluded for being unstable (assessed by looking at spike rasters)
if strcmpi(task_str,'duration')
%     neurons2exclude_s1 = [...
%         11,13,15,16,22,25,27,30,31,34,40,42,45,46,47,52,53,54,55,56,...
%         57,58,64,65,66,67,68,74,77,78,80,87,89,91,95,97,128,134,142,...
%         136,144,149,150,154,159,164,166,170,171,173,185,188,194,195,...
%         204,205,206,214,217,219,228,230,240,241,243,257,269,...
%         274,277,278,280,281,283,298,305,314,328,334,336,339,345,349,...
%         350,351,356,363,365,369,370,378,380,384,386,389,390,397,405,...
%         407,414,415,417,421,426,433,437,438,447,455,456,459,467,468,...
%         474,477,485,490,498,500,504,505,509,523,531,535,542,544,548,...
%         558,571,575,579,583,587,594,599];
%     neurons2exclude_s2 = [...
%         4,8,9,14,15,16,17,18,19,20,21,23,26,29,36,37,38,41,45,51,58,...
%         59,60,63,71,73,75,79,82,83,86,88,92,93,96,99,100,102,105,107,...
%         112,143,153,155,157,160,167,179,181,183,184,186,187,192,197,...
%         198,201,202,205,212,226,239,249,252,253,254,256,258,259,261,...
%         263,265,266,267,273,276,285,289,307,325,326,340,347,348,359,...
%         360,361,362,371,374,375,379,398,399,400,429,430,431,432,440,...
%         442,444,449,450,451,452,453,484,506,507,510,512,516,517,518,...
%         522,539,541,557,562,572,578,584,585,586,596,601,602];
%     neurons2exclude = unique([neurons2exclude_s1,neurons2exclude_s2]);
    neurons2exclude = [...
        1,5,8,9,10,11,12,14,20,23,29,36,40,71,86,92,95,136,181,185,192,...
        201,207,208,239,247,249,254,265,280,285,326,336,340,374,...
        375,429,430,438,442,453,468,541,557,571,584,599,600];
elseif strcmpi(task_str,'intensity')
    neurons2exclude = [...
        96,113,289,291,292,322,324,325,327,...
        329,330,331,332,333,371,346,371,378,...
        385,386,389,392];
end

%% construct S2-aligned, Ti- & Ii-split psths

% preallocation
mean_frs = nan(n_neurons_total,n_t,n_i);
trial_type_counts = nan(n_neurons_total,n_t,n_i);
stability_coeffs = nan(n_neurons_total,1);
instability_flags = nan(n_neurons_total,1);
timeregr_pvals = nan(n_neurons_total,1);
timeregr_coeffs = nan(n_neurons_total,1);
timecorr_coeffs = nan(n_neurons_total,1);

% iterate through neurons
for nn = neuron_idcs'
    progressreport(nn,n_neurons_total,'computing selection criteria');
    neuron_flags = data.NeuronNumb == neuron_idcs(nn);
    
    % iterate through durations
    for tt = 1 : n_t
        t1_flags = t2 == t_set(tt);
        t2_flags = t2 == t_set(tt);
        
        % iterate through intensities
        for ii = 1 : n_i
            i1_flags = i1 == i_set(ii);
            i2_flags = i2 == i_set(ii);
            s1i1_spike_flags = ...
                valid_flags & ...
                neuron_flags & ...
                t1_flags & ...
                i1_flags;
            s2i1_spike_flags = ...
                valid_flags & ...
                neuron_flags & ...
                t2_flags & ...
                i1_flags;
            s2i2_spike_flags = ...
                valid_flags & ...
                neuron_flags & ...
                t2_flags & ...
                i2_flags;
            if sum(s1i1_spike_flags) == 0 ||...
                    sum(s2i1_spike_flags) == 0 || ...
                    sum(s2i2_spike_flags) == 0
                continue;
            end
            
            % fetch spike counts & compute spike rates
            s2_spike_counts = data.FR(s2i2_spike_flags,:);
            s2_spike_rates = conv2(...
                1,kernel.pdf,s2_spike_counts,'valid')' / psthbin * 1e3;
            s2_n_trials = size(s2_spike_counts,1);
            
            % T2-aligned spike rates
            s2_alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(s2i2_spike_flags) + ...
                t1(s2i2_spike_flags) + ...
                isi;
            s2_alignment_flags = ...
                valid_time >= s2_alignment_onset & ...
                valid_time < s2_alignment_onset + t2(s2i2_spike_flags);
            s2_chunk_flags = ...
                valid_time >= s2_alignment_onset & ...
                valid_time < s2_alignment_onset + t_set(end);
            s2_spkrates = s2_spike_rates;
            s2_spkrates(~s2_alignment_flags') = nan;
            s2_spkrates = reshape(...
                s2_spkrates(s2_chunk_flags'),[n_tbins,s2_n_trials])';
            
            % neuron selection criteria
            mean_frs(nn,tt,ii) = nanmean(s2_spkrates,[1,2]);
            trial_type_counts(nn,tt,ii) = s2_n_trials;
        end
    end
    
    % for computing stability
    spike_flags = ...
        valid_flags & ...
        neuron_flags;
    if sum(spike_flags) == 0
        continue;
    end
    
    % fetch spike counts & compute spike rates
    spike_counts = data.FR(spike_flags,:);
    spike_rates = conv2(...
        1,kernel.pdf,spike_counts,'valid')' / psthbin * 1e3;
    n_trials = size(spike_counts,1);
    pre_s1_n_bins = unique(pre_s1_delay(valid_flags)) * psthbin;
    isi_n_bins = isi * psthbin;
    
    % pre-S1-aligned spike rates
    pre_s1_alignment_onset = ...
        pre_init_padding;
    pre_s1_alignment_flags = ...
        padded_time >= pre_s1_alignment_onset & ...
        padded_time < pre_s1_alignment_onset + pre_s1_delay(spike_flags);
    pre_s1_chunk_flags = pre_s1_alignment_flags;
    pre_s1_spkcounts = spike_counts;
    pre_s1_spkcounts(~pre_s1_alignment_flags') = nan;
    pre_s1_spkcounts = reshape(...
        pre_s1_spkcounts(pre_s1_chunk_flags'),[pre_s1_n_bins,n_trials])';
    
    % flag unstable units
%     X = [trial_idcs];%,prev_choice,prev_correct,prev_t1,prev_i1,prev_t2,prev_i2];
%     y = sum(pre_s1_spike_counts,2);
%     mdl = fitglm(X(pre_s1_spike_flags,:),y,'linear',...
%         'predictorvars',{'trial #'},...,'prev_choice','prev_correct','prev_t1','prev_i1','prev_t2','prev_i2'},...
%         'distribution','poisson',...
%         'intercept',true);
%     pval = mdl.Coefficients.pValue(ismember(mdl.CoefficientNames,'trial #'));
% %     [~,pval] = corr(trial_idcs(pre_s1_spike_flags),y);
%     instability_flags(nn) = pval < .01;
%     mdl
%     figure; plot(y,trial_idcs(pre_s1_spike_flags))
%     title(sprintf('Neuron: %i, p-value %.2f:',nn,mdl.Coefficients.pValue(...
%         ismember(mdl.CoefficientNames,'trial #'))));
%     a=1
    
    % ISI-aligned spike rates
    isi_alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags);
    isi_alignment_flags = ...
        valid_time >= isi_alignment_onset & ...
        valid_time < isi_alignment_onset + isi;
    isi_chunk_flags = isi_alignment_flags;
    isi_spkrates = spike_rates;
    isi_spkrates(~isi_alignment_flags') = nan;
    isi_spkrates = reshape(...
        isi_spkrates(isi_chunk_flags'),[isi_n_bins,n_trials])';

    % compute stability coefficients
    first_third_idcs = 1 : round(n_trials * 1 / 3);
    last_third_idcs = round(n_trials * 2 / 3) : n_trials;
    first_third_mu = nanmean(isi_spkrates(first_third_idcs,:),1)';
    last_third_mu = nanmean(isi_spkrates(last_third_idcs,:),1)';
    stability_coeffs(nn) = corr(...
        first_third_mu(~isnan(first_third_mu)&~isnan(last_third_mu)),...
        last_third_mu(~isnan(first_third_mu)&~isnan(last_third_mu)));
%     coeffs = abs(corrcoef(isi_spkrates'));
%     coeffs_triu = triu(coeffs,1);
%     coeffs_triu(coeffs == tril(coeffs)) = nan;
%     stability_coeffs(nn) = nanmean(coeffs_triu,[1,2]);
    
%     figure; hold on;
%     title(sprintf('Neuron: %i, corr. coeff %.2f:',nn,stability_coeffs(nn)));
%     plot(first_third_mu(~isnan(first_third_mu)&~isnan(last_third_mu)));
%     plot(last_third_mu(~isnan(first_third_mu)&~isnan(last_third_mu)));
%     a=1

    % compute ramping vs. non-ramping metrics
    %     mdl = fitlm(valid_time,nanmean(s2_spkrates,1));
    %     timeregr_pvals(nn) = mdl.Coefficients.pValue(2);
    %     timeregr_coeffs(nn) = mdl.Coefficients.Estimate(2);
    %     timecorr_coeffs(nn) = corr(roi_time',nanmean(s2_spkrates,1)');
end

%% compute surviving trial counts
trial_type_counts(isnan(trial_type_counts)) = 0;
surviving_trial_counts = cumsum(trial_type_counts,2,'reverse');

%% neuron selection
mean_fr_flags = ...
    mean(mean_frs(:,:,i2_mode_idx),2) >= mean_fr_cutoff;
% trial_count_flags = ...
%     all(trial_type_counts >= trial_count_cutoff,[2,3]);
trial_count_flags = ...
    ...all(trial_type_counts >= 1,[2,3]);
    all(surviving_trial_counts(:,end-1,:) >= trial_count_cutoff,[2,3]);
stability_flags = ...
    stability_coeffs >= stability_cutoff;
curation_flags = ...
    ~ismember(neuron_idcs,neurons2exclude);
neurons2keep_flags = ...
    mean_fr_flags & ...
    trial_count_flags & ...
    ...stability_flags & ...
    curation_flags;
flagged_neurons = neuron_idcs(neurons2keep_flags);
n_neurons = numel(flagged_neurons);

% display selection outcome
fprintf('\nSELECTION CRITERIA:\n');
fprintf('- minimum mean firing rate in middle I2 trials: %.2f Hz\n',...
    mean_fr_cutoff);
fprintf('- minimum trial count on all T2-I2 combinations: %i\n',...
    trial_count_cutoff);
% fprintf('- minimum sability coefficient: %.2f\n',...
%     stability_cutoff);
fprintf('- sability assessed by visual inspection\n');
fprintf('%i/%i neurons passed.\n\n',n_neurons,n_neurons_total);