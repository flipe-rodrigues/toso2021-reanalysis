%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% ROI settings

% roi definition
roi = [-500,t_set(end)];
padded_roi = roi + [-1,1] * .05 * range(roi);
n_bins = range(padded_roi) * psthbin;
time = linspace(padded_roi(1),padded_roi(2),n_bins);

% preallocation
psths = nan(n_bins,n_neurons,n_contrasts);

%% construct s2-aligned psths

% clamping
i1_clamp_flags = i1 == i_set(i1_mode_idx);
i2_clamp_flags = i2 == i_set(i2_mode_idx);

% iterate through neurons
for nn = 1 : n_neurons
    progressreport(nn,n_neurons,'parsing neural data');
    neuron_flags = data.NeuronNumb == flagged_neurons(nn);
    
    % iterate through contrasts
    for ii = 1 : n_contrasts
        contrast_flags = contrasts == contrast_set(ii);
        spike_flags = ...
            valid_flags & ...
            neuron_flags & ...
            ...i2_clamp_flags & ...
            contrast_flags;
        if sum(spike_flags) == 0
            continue;
        end
        
        % fetch spike counts & compute spike rates
        spike_counts = data.FR(spike_flags,:);
        spike_rates = conv2(...
            1,kernel.pdf,spike_counts,'valid')' / psthbin * 1e3;
        n_trials = size(spike_counts,1);
        
        % T2-aligned spike rates
        alignment_onset = ...
            pre_init_padding + ...
            pre_s1_delay(spike_flags) + ...
            t1(spike_flags) + ...
            isi;
        alignment_flags = ...
            valid_time >= alignment_onset + padded_roi(1) & ...
            valid_time < alignment_onset + t2(spike_flags);
        chunk_flags = ...
            valid_time >= alignment_onset + padded_roi(1) & ...
            valid_time < alignment_onset + padded_roi(2);
        spkrates = spike_rates;
        spkrates(~alignment_flags') = nan;
        spkrates = reshape(...
            spkrates(chunk_flags'),[n_bins,n_trials])';
        
        % compute mean spike density function
        psths(:,nn,ii) = nanmean(spkrates,1);
    end
end

%% normalization

% z-scoring
mus = nanmean(psths,[1,3]);
sigs = nanstd(psths,0,[1,3]);
zpsths = (psths - mus) ./ sigs;

%% plot overall modulation

% figure initialization
fig = figure(figopt,...
    ...'position',[325,635,435,385],...
    'name',['average_activity_',contrast_str]);

% axes initialization
xxtick = unique([0;roi';t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
axes(axesopt.default,...
    ...'plotboxaspectratio',[2.25,1,1],...
    'clipping','off',...
    'xlim',roi + [-1,1] * .05 * range(roi),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylim',[-.5,.25]+[-1,1]*.05*.75,...
    'ytick',[-.5,0,.25]);
xlabel('Time since S_2 onset (ms)');
ylabel('Firing rate (z-scored)');

% graphical object preallocation
p = gobjects(n_contrasts,1);

% zero lines
plot([1,1]*0,ylim,...
    'color','k',...
    'linestyle',':');
plot(xlim,[1,1]*0,...
    'color','k',...
    'linestyle',':');

% compute observation weights
time_mat = repmat(padded_roi(1) + psthbin : psthbin : padded_roi(2),n_total_trials,1);
weights = sum(time_mat <= t2)';
weights = (weights - min(weights)) ./ range(weights);

% iterate through contrasts
for ii = 1:n_contrasts% :-1:1
    contrast_flags = contrasts == contrast_set(ii);
    
    % compute modulation stats
    nan_flags = all(isnan(psths(:,:,ii)),2);
    onset_flags = time <= 0 & [time(2:end),nan] > 0;
    X = zpsths(~nan_flags,:,ii);
    x_mu = nanmean(X,2);
    x_sig = nanstd(X,0,2);
    x_sem = x_sig / sqrt(n_neurons);
    
    % patch s.e.m.
    sem_xpatch = [time(~nan_flags),fliplr(time(~nan_flags))];
    sem_ypatch = [x_mu(~nan_flags)-x_sem(~nan_flags);...
        flipud(x_mu(~nan_flags)+x_sem(~nan_flags))]';
    sem_apatch = [weights(~nan_flags);...
        flipud(weights(~nan_flags))] * .25 + .05;
    %     patch(sem_xpatch,sem_ypatch,contrast_clrs(ii,:),...
    %         'facevertexalphadata',sem_apatch,...
    %         'alphadatamapping','none',...
    %         'facealpha','interp',...
    %         'edgecolor','none');
    patch(sem_xpatch,sem_ypatch,contrast_clrs(ii,:),...
        'facealpha',.25,...
        'edgecolor','none');
    
    % patch average activity
    mu_xpatch = time(~nan_flags);
    mu_ypatch = x_mu(~nan_flags);
    mu_ypatch(end) = nan;
    mu_apatch = weights(~nan_flags) * .9 + .1;
    %     patch(mu_xpatch,mu_ypatch,0,...
    %         'facevertexalphadata',mu_apatch,...
    %         'alphadatamapping','none',...
    %         'edgealpha','interp',...
    %         'edgecolor',contrast_clrs(ii,:),...
    %         'linewidth',1.5);
    plot(mu_xpatch,mu_ypatch,...
        'color',contrast_clrs(ii,:),...
        'linewidth',1.5);
    
    % plot alignment onset
    p(ii) = plot(time(onset_flags),x_mu(onset_flags),...
        'linewidth',1.5,...
        'marker','o',...
        'markersize',7.5,...
        'markerfacecolor','w',...
        'markeredgecolor',contrast_clrs(ii,:));
    
    % iterate through stimuli
    for tt = 1 : n_t
        t2_flags = t2 == t_set(tt);
        trial_flags = ...
            valid_flags & ...
            contrast_flags & ...
            t2_flags;
        if sum(trial_flags) < 1
            continue;
        end
        
        % plot stimulus offset
        offset_flags = time < t_set(tt) & [time(2:end),nan] >= t_set(tt);
        plot(time(offset_flags),x_mu(offset_flags),...
            'linewidth',1.5,...
            'marker','o',...
            'markersize',7.5,...
            'markerfacecolor',contrast_clrs(ii,:),...
            'markeredgecolor','none');
    end
end

% ui restacking
uistack(p,'top');

% legend
p1 = plot([1,1]*max(xlim)*2,[1,1]*max(ylim)*2,...
    'linewidth',1.5,...
    'linestyle','none',...
    'marker','o',...
    'markersize',7.5,...
    'markerfacecolor','w',...
    'markeredgecolor','k');
p2 = plot([1,1]*max(xlim)*2,[1,1]*max(ylim)*2,...
    'linewidth',1.5,...
    'linestyle','none',...
    'marker','o',...
    'markersize',7.5,...
    'markerfacecolor','k',...
    'markeredgecolor','none');
legend([p1,p2],{'S_2 onset','S_2 offset'},...
    'location','southeast',...
    'box','off');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end