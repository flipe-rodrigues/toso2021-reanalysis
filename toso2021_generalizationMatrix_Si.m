%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% choice GLM (partial model)
mdl = fitglm([s1(valid_flags),s2(valid_flags)].*[1,1],...
    choice(valid_flags,:),'linear',...
    'predictorvars',{s1_lbl,s2_lbl},...
    'distribution','binomial',...
    'intercept',true);
betas = mdl.Coefficients.Estimate;
beta_0 = betas(1);
beta_s1 = betas(2);
beta_s2 = betas(3);

%% sampling scheme w/ S1-S2 pairwise performance

% transfer function
tfun = @(x) log(x);

% pair specification
s_pairs = [s1,s2];
s_pairset = unique(s_pairs(valid_flags,:),'rows');
n_pairs = size(s_pairset,1);

% preallocation
p_choice = nan(n_pairs,1);

% iterate through S1-S2 pairs
for ii = 1 : n_pairs
    s_flags = all(s_pairs == s_pairset(ii,:),2);
    trial_flags = ...
        valid_flags & ...
        s_flags;
    if sum(trial_flags) == 0
        continue;
    end
    
    % compute average performance for the current pair
    p_choice(ii) = mean(choice(trial_flags));
end

% nan filtering
s_pairset = s_pairset(~isnan(p_choice),:);
p_choice = p_choice(~isnan(p_choice));

% figure & axes initialization
fig = figure(figopt,...
    'name','generalization_matrix_Si');
axes(axesopt.default,...
    'xlim',tfun([s_set(1),s_set(end)]) + [-1,1] * .1 * range(tfun(s_set)),...
    'ylim',tfun([s_set(1),s_set(end)]) + [-1,1] * .1 * range(tfun(s_set)),...
    'xtick',tfun(s_set),...
    'ytick',tfun(s_set),...
    'xticklabel',num2cell(s_set),...
    'yticklabel',num2cell(s_set),...
    'xticklabelrotation',45,...
    'yticklabelrotation',45,...
    'xscale','linear',...
    'yscale','linear');
xlabel(sprintf('%s (%s)',s1_lbl,s_units));
ylabel(sprintf('%s (%s)',s2_lbl,s_units));

% colorbar
clims = [.1,.9];
cbar = colorbar(...
    'limits',clims,...
    'box',axesopt.default.box,...
    'linewidth',axesopt.default.linewidth,...
    'tickdirection','out',...
    'ticklength',unique(axesopt.default.ticklength),...
    'fontsize',axesopt.default.fontsize,...
    'ticks',unique([clims,.5]));
cbar.Label.String = sprintf('P(%s > %s)',s2_lbl,s1_lbl);
cbar.Label.Rotation = -90;
cbar.Label.VerticalAlignment = 'bottom';

% plot reference lines
plot(xlim,ylim,':k',...
    'linewidth',1);
plot(tfun([1,1]*median(s1(valid_flags))),ylim,':k',...
    'linewidth',1);
plot(xlim,tfun([1,1]*median(s2(valid_flags))),':k',...
    'linewidth',1);

% plot decision boundary
x = linspace(min(s_pairs(:,1)),max(s_pairs(:,1)),1e3);
y = -beta_s1 / beta_s2 * x - beta_0 / beta_s2;
plot(tfun(x),tfun(y),'--k',...
    'linewidth',1.5);

% plot performance
scatter(...
    tfun(s_pairset(:,1)),...
    tfun(s_pairset(:,2)),...
    250,p_choice,'s','filled',...
    'markeredgecolor','k',...
    'linewidth',1.5);

% iterate through pairs
for ii = 1 : n_pairs
    if s_pairset(ii,2) > s_pairset(ii,1)
        vertical_gain = .865;
    else
        vertical_gain = 1.175;
    end
    
    % annotate performance
    text(tfun(s_pairset(ii,1) * 1.05),tfun(s_pairset(ii,2) * vertical_gain),...
        sprintf('%.0f%%',p_choice(ii)*100),...
        'fontsize',axesopt.default.fontsize,...
        'horizontalalignment','center',...
        'verticalalignment','middle');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% contraction bias visualization

% figure & axes initialization
fig = figure(figopt,...
    'name','contraction_bias_Si');
axes(axesopt.default,...
    'xlim',tfun([s_set(1),s_set(end)]) + [-1,1] * .1 * range(tfun(s_set)),...
    'ylim',tfun([s_set(1),s_set(end)]) + [-1,1] * .1 * range(tfun(s_set)),...
    'xtick',tfun(s_set),...
    'ytick',tfun(s_set),...
    'xticklabel',num2cell(s_set),...
    'yticklabel',num2cell(s_set),...
    'xticklabelrotation',45,...
    'yticklabelrotation',45,...
    'xscale','linear',...
    'yscale','linear');
xlabel(sprintf('%s (%s)',s1_lbl,s_units));
ylabel(sprintf('%s (%s)',s2_lbl,s_units));

% colorbar
cbar = colorbar(...
    'limits',clims,...
    'box',axesopt.default.box,...
    'linewidth',axesopt.default.linewidth,...
    'tickdirection','out',...
    'ticklength',unique(axesopt.default.ticklength),...
    'fontsize',axesopt.default.fontsize,...
    'ticks',unique([clims,.5]));
cbar.Label.String = sprintf('P(%s > %s)',s2_lbl,s1_lbl);
cbar.Label.Rotation = -90;
cbar.Label.VerticalAlignment = 'bottom';

% plot hypothesized probability of reporting S2 > S1
pchoice_x = linspace(min(s_set),max(s_set),1e3);
beta = 3/range(s_set);
pchoice = 1 - 1 ./ (1 + exp(-beta * (-pchoice_x' + pchoice_x)));
pchoice = (pchoice - min(pchoice(:))) ./ range(pchoice(:));
pchoice = pchoice * diff(clims) + min(clims);
imagesc(xlim,ylim,pchoice,clims);

% plot reference lines
plot(xlim,ylim,':w',...
    'linewidth',1);
plot(tfun([1,1]*median(s1(valid_flags))),ylim,':w',...
    'linewidth',1);
plot(xlim,tfun([1,1]*median(s2(valid_flags))),':w',...
    'linewidth',1);

% plot decision boundary
x = linspace(min(s_pairs(:,1)),max(s_pairs(:,1)),1e3);
y = -beta_s1 / beta_s2 * x - beta_0 / beta_s2;
plot(tfun(x),tfun(y),'--w',...
    'linewidth',1.5);

% plot performance
scatter(...
    tfun(s_pairset(:,1)),...
    tfun(s_pairset(:,2)),...
    250,p_choice,'s','filled',...
    'markeredgecolor','none',...
    'linewidth',1.5);

% iterate through pairs
for ii = 1 : n_pairs
    if s_pairset(ii,2) > s_pairset(ii,1)
        vertical_gain = .865;
    else
        vertical_gain = 1.175;
    end
    
    % annotate performance
    text(tfun(s_pairset(ii,1) * 1.05),tfun(s_pairset(ii,2) * vertical_gain),...
        sprintf('%.0f%%',p_choice(ii)*100),...
        'fontsize',axesopt.default.fontsize,...
        'horizontalalignment','center',...
        'verticalalignment','middle');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end