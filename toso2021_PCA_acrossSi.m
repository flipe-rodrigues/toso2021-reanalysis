%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% construct Ti-aligned, Ii-split psths
pre_padd = 500;
roi2use = [-pre_padd,t_set(end)];
roi2plot = [-pre_padd,t_set(end)];
roi2plot_padded = roi2plot + [-1,1] * .05 * range(roi2plot);
roi2use_n_bins = range(roi2use) / psthbin;
roi2plot_n_bins = range(roi2plot_padded) / psthbin;
roi2use_time = linspace(roi2use(1),roi2use(2),roi2use_n_bins);
roi2plot_time = linspace(roi2plot_padded(1),roi2plot_padded(2),roi2plot_n_bins);
roi2use_flags = ...
    roi2plot_time >= roi2use(1) & ...
    roi2plot_time <= roi2use(2);

% preallocation
s1_psths = nan(roi2plot_n_bins,n_neurons);
s2_psths = nan(roi2plot_n_bins,n_neurons);

% duration flags
t1_flags = t1 <= t_set(end);
t2_flags = t2 <= t_set(end);

% intensity flags
i1_flags = i1 == i_set(i1_mode_idx);
i2_flags = i2 == i_set(i2_mode_idx);

% iterate through neurons
for nn = 1 : n_neurons
    progressreport(nn,n_neurons,'parsing neural data');
    neuron_flags = data.NeuronNumb == flagged_neurons(nn);
    s1_spike_flags = ...
        valid_flags & ...
        neuron_flags & ...
        t1_flags;
    s2_spike_flags = ...
        valid_flags & ...
        neuron_flags & ...
        t2_flags;

    % fetch S1-aligned spike counts & compute spike rates
    s1_spike_rates = data.SDF(s1_spike_flags,:);
    s1_n_trials = size(s1_spike_rates,1);

    % fetch S2-aligned spike counts & compute spike rates
    s2_spike_rates = data.SDF(s2_spike_flags,:);
    s2_n_trials = size(s2_spike_rates,1);
    
    % S1-aligned spike rates
    s1_alignment_offset = ...
        pre_init_padding + ...
        pre_s1_delay(s1_spike_flags);
    s1_alignment_flags = ...
        padded_time >= s1_alignment_offset + roi2plot_padded(1) & ...
        padded_time < s1_alignment_offset + t1(s1_spike_flags);
    s1_chunk_flags = ...
        padded_time >= s1_alignment_offset + roi2plot_padded(1) & ...
        padded_time < s1_alignment_offset + roi2plot_padded(2);
    s1_spkrates = s1_spike_rates';
    s1_spkrates(~s1_alignment_flags') = nan;
    s1_spkrates = reshape(...
        s1_spkrates(s1_chunk_flags'),...
        [roi2plot_n_bins,s1_n_trials])';

    % S2-aligned spike rates
    s2_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(s2_spike_flags) + ...
        t1(s2_spike_flags) + ...
        isi;
    s2_alignment_flags = ...
        padded_time >= s2_alignment + roi2plot_padded(1) & ...
        padded_time < s2_alignment + t2(s2_spike_flags);
    s2_chunk_flags = ...
        padded_time >= s2_alignment + roi2plot_padded(1) & ...
        padded_time < s2_alignment + roi2plot_padded(2);
    s2_spkrates = s2_spike_rates';
    s2_spkrates(~s2_alignment_flags') = nan;
    s2_spkrates = reshape(...
        s2_spkrates(s2_chunk_flags'),...
        [roi2plot_n_bins,s2_n_trials])';
    
    % compute mean spike density functions
    s1_psths(:,nn) = nanmean(s1_spkrates,1);
    s2_psths(:,nn) = nanmean(s2_spkrates,1);
end

%% compute alignment-specific weights

% compute S1-aligned weights
time_mat = repmat(roi2use(1) + psthbin : psthbin : roi2use(2),n_total_trials,1);
s1_weights = sum(time_mat(valid_flags,:) <= t1(valid_flags));
s1_weights = s1_weights / sum(s1_weights);

% compute S2-aligned weights
time_mat = repmat(roi2use(1) + psthbin : psthbin : roi2use(2),n_total_trials,1);
s2_weights = sum(time_mat(valid_flags,:) <= t2(valid_flags));
s2_weights = s2_weights / sum(s2_weights);

%% normalization

% z-score S1-aligned spike density functions
s1_mus = nanmean(s1_psths(roi2use_flags,:),1);
s1_sigs = nanstd(s1_psths(roi2use_flags,:),0,1); 
s1_zpsths = (s1_psths - s1_mus) ./ s1_sigs;

% z-score S2-aligned spike density functions
s2_mus = nanmean(s2_psths(roi2use_flags,:),1);
s2_sigs = nanstd(s2_psths(roi2use_flags,:),0,1);
s2_zpsths = (s2_psths - s2_mus) ./ s2_sigs;

%% PCA

% compute S1-aligned PCs
s1_coeff = pca(s1_zpsths(roi2use_flags,:),...
    'weights',s1_weights);
s1s1_score = s1_zpsths * s1_coeff;
s1s2_score = s2_zpsths * s1_coeff;

% compute S2-aligned PCs
s2_coeff = pca(s2_zpsths(roi2use_flags,:),...
    'weights',s2_weights);
s2s2_score = s2_zpsths * s2_coeff;
s2s1_score = s1_zpsths * s2_coeff;

%% control with and without weigths

% % compute S1-aligned PCs
% s1_coeff = pca(s1_zpsths(roi2use_flags,:),...
%     'weights',s1_weights);
% s1s1_score = s1_zpsths * s1_coeff;
% s1_coeff = pca(s1_zpsths(roi2use_flags,:),...
%     'weights',s1_weights.^0);
% s1s2_score = s1_zpsths * s1_coeff;
% 
% % compute S2-aligned PCs
% s2_coeff = pca(s2_zpsths(roi2use_flags,:),...
%     'weights',s2_weights);
% s2s2_score = s2_zpsths * s2_coeff;
% s2_coeff = pca(s2_zpsths(roi2use_flags,:),...
%     'weights',s2_weights.^0);
% s2s1_score = s2_zpsths * s2_coeff;

%% compute explained variance

% variance explained by S1-aligned PCs
s1s1_lat = nanvar(s1s1_score(roi2use_flags,:),s1_weights)';
s1s1_exp = s1s1_lat ./ sum(s1s1_lat) * 100;
s1s2_lat = nanvar(s1s2_score(roi2use_flags,:),s2_weights)';
s1s2_exp = s1s2_lat ./ sum(s1s2_lat) * 100;

% variance explained by S2-aligned PCs
s2s2_lat = nanvar(s2s2_score(roi2use_flags,:),s2_weights)';
s2s2_exp = s2s2_lat ./ sum(s2s2_lat) * 100;
s2s1_lat = nanvar(s2s1_score(roi2use_flags,:),s1_weights)';
s2s1_exp = s2s1_lat ./ sum(s2s1_lat) * 100;

EXP = [s1s1_exp,s1s2_exp,s2s2_exp,s2s1_exp];
EXP(1:20,:)

%%

for pc_s1 = 1 : 3
    figure('position',[94.6000+(pc_s1-1)*560 41.8000 560 1.0288e+03]);
    [x,idcs] = sort(s1_coeff(:,pc_s1));
%     [x,idcs] = sort(s1_coeff(pc_s1,:));
    for pc_s2 = 1 : 3
        subplot(3,1,pc_s2);
        hold on;
        xlabel(sprintf('S1-aligned PC_%i weights',pc_s1))
        ylabel(sprintf('S2-aligned PC_%i weights',pc_s2))
        y = s2_coeff(idcs,pc_s2);
%         y = s2_coeff(pc_s2,idcs);
        mdl = fitlm(x,y,...
            'intercept',false);
        if mdl.Coefficients.pValue(end) < .05
            linestyle = '-';
        else 
            linestyle = '--';
        end
        plot(x,y,'.k')
        histogram2(x,y,7,...
            'displayStyle','tile',...
            'showemptybins','on',...
            'edgecolor','none');
        plot(x,mdl.predict(x(:)),'r',...
            'linestyle',linestyle,...
            'linewidth',1.5);
        axis tight;
        axis square;
    end
end

%%

figure;
hold on;
xlabel('S1-aligned variance')
ylabel('S2-aligned variance')
[x,idcs] = sort(nanvar(s1_psths));
y = nanvar(s2_psths(:,idcs));
mdl = fitlm(x,y);
if mdl.Coefficients.pValue(end) < .05
    linestyle = '-';
else
    linestyle = '--';
end
plot(x,y,'.k')
plot(x,mdl.predict(x'),'k',...
    'linestyle',linestyle,...
    'linewidth',1.5);
axis tight;
axis square;

plot(xlim,xlim,':')

set(gca,...
    'xlim',quantile(x,[0,.95]),...
    'ylim',quantile(y,[0,.95]),...
    'xscale','linear',...
    'yscale','linear');

%%

figure;
hold on;

% preallocation
corrcoeffs = nan(n_neurons,1);

% iterate through neurons
for nn = 1 : n_neurons
    x = s1_zpsths(:,nn);
    y = s2_zpsths(:,nn);
    nan_flags = isnan(x) | isnan(y);
    c = corrcoef(x(~nan_flags),y(~nan_flags));
    corrcoeffs(nn) = c(2);
end

% 
histogram(corrcoeffs,50);
plot([1,1]*mean(corrcoeffs),ylim,'-k');

xlabel('Correlation coefficients between S1- and S2-aligned psths')

%% color settings
same_clr = [1,1,1] * .0;
other_clr = [1,1,1] * .75;

%% S1-aligned PC projections

% figure initialization
fig = figure(figopt,...
    'position',[535,130,966,860],...
    'name','pc_projections_s1');
n_pcs2plot = 6;
sps = gobjects(n_pcs2plot,1);
for pc = 1 : n_pcs2plot
    sp_idx = pc * 2 - 1 - (pc > n_pcs2plot / 2) * (n_pcs2plot - 1);
    sps(pc) = subplot(n_pcs2plot/2,2,sp_idx);
    xlabel(sps(pc),'Time since S_i onset (ms)');
    ylabel(sps(pc),sprintf('S1-aligned PC %i',pc));
end
xxtick = unique([roi2plot';0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
set(sps,...
    axesopt.default,...
    'xlim',roi2plot + [-1,1] * .05 * range(roi2plot),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylimspec','tight',...
    'plotboxaspectratio',[3,1,1]);

% link axes
linkaxes(sps,'x');

% iterate through pcs
for pc = 1 : n_pcs2plot

    % compute surviving trial counts (through time)
    time_mat = repmat(...
        roi2plot_padded(1) + psthbin : psthbin : roi2plot_padded(2),n_total_trials,1);
    surviving_trial_counts = sum(time_mat(valid_flags,:) <= t1(valid_flags));
    
    % patch projection
    mu_xpatch = roi2plot_time;
    mu_ypatch = s1s1_score(:,pc)';
    mu_ypatch(end) = nan;
    mu_apatch = surviving_trial_counts;
    mu_apatch = mu_apatch ./ max(mu_apatch) .* ...
        range(alphabounds_mu) + alphabounds_mu(1);
    if fadeifnoisy
        alpha_levels = unique(mu_apatch,'stable');
        n_alpha_levels = numel(alpha_levels);
        for aa = 1 : n_alpha_levels
            alpha_flags = mu_apatch == alpha_levels(aa);
            p = patch(sps(pc),...
                [mu_xpatch(alpha_flags),nan],...
                [mu_ypatch(alpha_flags),nan],0,...
                'edgealpha',alpha_levels(aa),...
                'edgecolor',same_clr,...
                'facecolor','none',...
                'linewidth',1.5);
        end
    else
        p = plot(sps(pc),roi2plot_time,...
            s1s1_score(:,pc),...
            'color',same_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
    
    % plot projection onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    plot(sps(pc),roi2plot_time(onset_flags),...
        s1s1_score(onset_flags,pc),...
        'linewidth',1.5,...
        'marker','o',...
        'markersize',6,...
        'markerfacecolor','w',...
        'markeredgecolor',same_clr);
    
    % iterate through stimuli
    for tt = 1 : n_t
        t1_flags = t1 == t_set(tt);
        trial_flags = ...
            valid_flags & ...
            contrast_flags & ...
            t1_flags;
        if sum(trial_flags) < 1
            continue;
        end
        
        % plot projection offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        scatter(sps(pc),roi2plot_time(offset_flags),...
            s1s1_score(offset_flags,pc),36,...
            'linewidth',1.5,...
            'marker','o',...
            'markerfacealpha',alpha_levels(tt).^fadeifnoisy,...
            'markerfacecolor',same_clr,...
            'markeredgecolor','none');
    end

    % compute surviving trial counts (through time)
    time_mat = repmat(...
        roi2plot_padded(1) + psthbin : psthbin : roi2plot_padded(2),n_total_trials,1);
    surviving_trial_counts = sum(time_mat(valid_flags,:) <= t2(valid_flags));
    
    % patch projection
    mu_xpatch = roi2plot_time;
    mu_ypatch = s1s2_score(:,pc)';
    mu_ypatch(end) = nan;
    mu_apatch = surviving_trial_counts;
    mu_apatch = mu_apatch ./ max(mu_apatch) .* ...
        range(alphabounds_mu) + alphabounds_mu(1);
    if fadeifnoisy
        alpha_levels = unique(mu_apatch,'stable');
        n_alpha_levels = numel(alpha_levels);
        for aa = 1 : n_alpha_levels
            alpha_flags = mu_apatch == alpha_levels(aa);
            p = patch(sps(pc),...
                [mu_xpatch(alpha_flags),nan],...
                [mu_ypatch(alpha_flags),nan],0,...
                'edgealpha',alpha_levels(aa),...
                'edgecolor',other_clr,...
                'facecolor','none',...
                'linewidth',1.5);
        end
    else
        p = plot(sps(pc),roi2plot_time,...
            s1s2_score(:,pc),...
            'color',other_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
    
    % plot projection onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    plot(sps(pc),roi2plot_time(onset_flags),...
        s1s2_score(onset_flags,pc),...
        'linewidth',1.5,...
        'marker','o',...
        'markersize',6,...
        'markerfacecolor','w',...
        'markeredgecolor',other_clr);
    
    % iterate through stimuli
    for tt = 1 : n_t
        t2_flags = t2 == t_set(tt);
        trial_flags = ...
            valid_flags & ...
            contrast_flags & ...
            t2_flags;
        if sum(trial_flags) < 1
            continue;
        end
        
        % plot projection offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        scatter(sps(pc),roi2plot_time(offset_flags),...
            s1s2_score(offset_flags,pc),36,...
            'linewidth',1.5,...
            'marker','o',...
            'markerfacealpha',alpha_levels(tt).^fadeifnoisy,...
            'markerfacecolor',other_clr,...
            'markeredgecolor','none');
    end
    
    % update axes
    set(sps(pc),...
        'ytick',unique([0,ylim(sps(pc))]),...
        'yticklabel',{'','0',''},...
        'ylim',ylim(sps(pc))+[-1,1]*.15*range(ylim(sps(pc))));
    
    % annotate explained variance
    text(sps(pc),...
        .05,1.15,sprintf('%.1f%% variance',s1s1_exp(pc)),...
        'color',same_clr,...
        'units','normalized');
    text(sps(pc),...
        .05,1,sprintf('%.1f%% variance',s1s2_exp(pc)),...
        'color',other_clr,...
        'units','normalized');
    
    % ui stacking
    uistack(p,'bottom');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S2-aligned PC projections

% figure initialization
fig = figure(figopt,...
    'position',[535,130,966,860],...
    'name','pc_projections_s2');
n_pcs2plot = 6;
sps = gobjects(n_pcs2plot,1);
for pc = 1 : n_pcs2plot
    sp_idx = pc * 2 - 1 - (pc > n_pcs2plot / 2) * (n_pcs2plot - 1);
    sps(pc) = subplot(n_pcs2plot/2,2,sp_idx);
    xlabel(sps(pc),'Time since S_i onset (ms)');
    ylabel(sps(pc),sprintf('S2-aligned PC %i',pc));
end
xxtick = unique([roi2plot';0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
set(sps,...
    axesopt.default,...
    'xlim',roi2plot + [-1,1] * .05 * range(roi2plot),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylimspec','tight',...
    'plotboxaspectratio',[3,1,1]);

% link axes
linkaxes(sps,'x');

% iterate through pcs
for pc = 1 : n_pcs2plot

    % compute surviving trial counts (through time)
    time_mat = repmat(...
        roi2plot_padded(1) + psthbin : psthbin : roi2plot_padded(2),n_total_trials,1);
    surviving_trial_counts = sum(time_mat(valid_flags,:) <= t1(valid_flags));
    
    % patch projection
    mu_xpatch = roi2plot_time;
    mu_ypatch = s2s2_score(:,pc)';
    mu_ypatch(end) = nan;
    mu_apatch = surviving_trial_counts;
    mu_apatch = mu_apatch ./ max(mu_apatch) .* ...
        range(alphabounds_mu) + alphabounds_mu(1);
    if fadeifnoisy
        alpha_levels = unique(mu_apatch,'stable');
        n_alpha_levels = numel(alpha_levels);
        for aa = 1 : n_alpha_levels
            alpha_flags = mu_apatch == alpha_levels(aa);
            p = patch(sps(pc),...
                [mu_xpatch(alpha_flags),nan],...
                [mu_ypatch(alpha_flags),nan],0,...
                'edgealpha',alpha_levels(aa),...
                'edgecolor',same_clr,...
                'facecolor','none',...
                'linewidth',1.5);
        end
    else
        p = plot(sps(pc),roi2plot_time,...
            s2s2_score(:,pc),...
            'color',same_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
    
    % plot projection onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    plot(sps(pc),roi2plot_time(onset_flags),...
        s2s2_score(onset_flags,pc),...
        'linewidth',1.5,...
        'marker','o',...
        'markersize',6,...
        'markerfacecolor','w',...
        'markeredgecolor',same_clr);
    
    % iterate through stimuli
    for tt = 1 : n_t
        t1_flags = t1 == t_set(tt);
        trial_flags = ...
            valid_flags & ...
            contrast_flags & ...
            t1_flags;
        if sum(trial_flags) < 1
            continue;
        end
        
        % plot projection offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        scatter(sps(pc),roi2plot_time(offset_flags),...
            s2s2_score(offset_flags,pc),36,...
            'linewidth',1.5,...
            'marker','o',...
            'markerfacealpha',alpha_levels(tt).^fadeifnoisy,...
            'markerfacecolor',same_clr,...
            'markeredgecolor','none');
    end

    % compute surviving trial counts (through time)
    time_mat = repmat(...
        roi2plot_padded(1) + psthbin : psthbin : roi2plot_padded(2),n_total_trials,1);
    surviving_trial_counts = sum(time_mat(valid_flags,:) <= t2(valid_flags));
    
    % patch projection
    mu_xpatch = roi2plot_time;
    mu_ypatch = s2s1_score(:,pc)';
    mu_ypatch(end) = nan;
    mu_apatch = surviving_trial_counts;
    mu_apatch = mu_apatch ./ max(mu_apatch) .* ...
        range(alphabounds_mu) + alphabounds_mu(1);
    if fadeifnoisy
        alpha_levels = unique(mu_apatch,'stable');
        n_alpha_levels = numel(alpha_levels);
        for aa = 1 : n_alpha_levels
            alpha_flags = mu_apatch == alpha_levels(aa);
            p = patch(sps(pc),...
                [mu_xpatch(alpha_flags),nan],...
                [mu_ypatch(alpha_flags),nan],0,...
                'edgealpha',alpha_levels(aa),...
                'edgecolor',other_clr,...
                'facecolor','none',...
                'linewidth',1.5);
        end
    else
        p = plot(sps(pc),roi2plot_time,...
            s2s1_score(:,pc),...
            'color',other_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
    
    % plot projection onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    plot(sps(pc),roi2plot_time(onset_flags),...
        s2s1_score(onset_flags,pc),...
        'linewidth',1.5,...
        'marker','o',...
        'markersize',6,...
        'markerfacecolor','w',...
        'markeredgecolor',other_clr);
    
    % iterate through stimuli
    for tt = 1 : n_t
        t2_flags = t2 == t_set(tt);
        trial_flags = ...
            valid_flags & ...
            contrast_flags & ...
            t2_flags;
        if sum(trial_flags) < 1
            continue;
        end
        
        % plot projection offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        scatter(sps(pc),roi2plot_time(offset_flags),...
            s2s1_score(offset_flags,pc),36,...
            'linewidth',1.5,...
            'marker','o',...
            'markerfacealpha',alpha_levels(tt).^fadeifnoisy,...
            'markerfacecolor',other_clr,...
            'markeredgecolor','none');
    end
    
    % update axes
    set(sps(pc),...
        'ytick',unique([0,ylim(sps(pc))]),...
        'yticklabel',{'','0',''},...
        'ylim',ylim(sps(pc))+[-1,1]*.15*range(ylim(sps(pc))));
    
    % annotate explained variance
    text(sps(pc),...
        .05,1.15,sprintf('%.1f%% variance',s2s2_exp(pc)),...
        'color',same_clr,...
        'units','normalized');
    text(sps(pc),...
        .05,1,sprintf('%.1f%% variance',s2s1_exp(pc)),...
        'color',other_clr,...
        'units','normalized');
    
    % ui stacking
    uistack(p,'bottom');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end