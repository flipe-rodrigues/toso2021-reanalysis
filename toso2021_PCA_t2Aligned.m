%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% construct T1-aligned, Ii-split psths
pre_padd = 500;
roi2use = [-pre_padd,t_set(end)];
roi2plot = [-pre_padd,t_set(end)];
roi2use_n_bins = range(roi2use) * psthbin;
roi2plot_n_bins = range(roi2plot) * psthbin;
roi2use_time = linspace(roi2use(1),roi2use(2),roi2use_n_bins);
roi2plot_time = linspace(roi2plot(1),roi2plot(2),roi2plot_n_bins);
roi2use_flags = ...
    roi2plot_time >= roi2use(1) & ...
    roi2plot_time <= roi2use(2);

% preallocation
ref_psths = nan(roi2plot_n_bins,n_neurons);
s2_psths = nan(roi2plot_n_bins,n_neurons,n_contrasts);

% iterate through neurons
for nn = 1 : n_neurons
    progressreport(nn,n_neurons,'parsing neural data');
    neuron_flags = data.NeuronNumb == flagged_neurons(nn);
    ref_spike_flags = ...
        valid_flags & ...
        neuron_flags;
    if sum(ref_spike_flags) == 0
        continue;
    end
    
    % fetch spike counts & compute spike rates
    ref_spike_counts = data.FR(ref_spike_flags,:);
    ref_spike_rates = conv2(...
        1,kernel.pdf,ref_spike_counts,'valid')' / psthbin * 1e3;
    ref_n_trials = size(ref_spike_counts,1);
    
    % T2-aligned spike rates
    ref_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(ref_spike_flags) + ...
        t1(ref_spike_flags) + ...
        isi;
    ref_alignment_flags = ...
        valid_time >= ref_alignment + roi2plot(1) & ...
        valid_time < ref_alignment + t2(ref_spike_flags);
    ref_chunk_flags = ...
        valid_time >= ref_alignment + roi2plot(1) & ...
        valid_time < ref_alignment + roi2plot(2);
    ref_spkrates = ref_spike_rates;
    ref_spkrates(~ref_alignment_flags') = nan;
    ref_spkrates = reshape(...
        ref_spkrates(ref_chunk_flags'),[roi2plot_n_bins,ref_n_trials])';
    
    % compute mean spike density function
    ref_psths(:,nn) = nanmean(ref_spkrates,1);
    
    % iterate through contrasts
    for ii = 1 : n_contrasts
        contrast_flags = contrasts == contrast_set(ii);
        s2_spike_flags = ...
            valid_flags & ...
            neuron_flags & ...
            contrast_flags;
        
        % fetch spike counts & compute spike rates
        s2_spike_counts = data.FR(s2_spike_flags,:);
        s2_spike_rates = conv2(...
            1,kernel.pdf,s2_spike_counts,'valid')' / psthbin * 1e3;
        s2_n_trials = size(s2_spike_counts,1);
        
        % T2-aligned spike rates
        s2_alignment = ...
            pre_init_padding + ...
            pre_s1_delay(s2_spike_flags) + ...
            t1(s2_spike_flags) + ...
            isi;
        s2_alignment_flags = ...
            valid_time >= s2_alignment + roi2plot(1) & ...
            valid_time < s2_alignment + t2(s2_spike_flags);
        s2_chunk_flags = ...
            valid_time >= s2_alignment + roi2plot(1) & ...
            valid_time < s2_alignment + roi2plot(2);
        s2_spkrates = s2_spike_rates;
        s2_spkrates(~s2_alignment_flags') = nan;
        s2_spkrates = reshape(...
            s2_spkrates(s2_chunk_flags'),[roi2plot_n_bins,s2_n_trials])';
        
        % compute mean spike density function
        s2_psths(:,nn,ii) = nanmean(s2_spkrates,1);
    end
end

% nan handling
if ~strcmpi(contrast_str,'t1')
    s2_psths(isnan(s2_psths)) = 0;
end

%% normalization
mus = nanmean(ref_psths(roi2use_flags,:,:),[1,3]);
sigs = nanstd(ref_psths(roi2use_flags,:,:),0,[1,3]);
ref_zpsths = (ref_psths - mus) ./ sigs;
% mus = nanmean(s2_psths(roi2use_flags,:,:),[1,3]);
% sigs = nanstd(s2_psths(roi2use_flags,:,:),0,[1,3]);
s2_zpsths = (s2_psths - mus) ./ sigs;

%% PCA

% concatenate psths across conditions
s2_concat_all = nan(roi2use_n_bins*n_contrasts,n_neurons);
s2_concat_extr = nan(roi2use_n_bins*(n_contrasts-1),n_neurons);
s2_concat_mode = nan(roi2use_n_bins,n_neurons);
s2_concat_diff = nan(roi2use_n_bins,n_neurons);
for nn = 1 : n_neurons
    nn_zpsths_all = s2_zpsths(roi2use_flags,nn,:);
    nn_zpsths_extr = s2_zpsths(roi2use_flags,nn,(1:n_contrasts)~=contrast_mode_idx);
    nn_zpsths_mode = s2_zpsths(roi2use_flags,nn,contrast_mode_idx);
    nn_zpsths_diff = ...
        s2_zpsths(roi2use_flags,nn,end) - s2_zpsths(roi2use_flags,nn,1);
    s2_concat_all(:,nn) = nn_zpsths_all(:);
    s2_concat_extr(:,nn) = nn_zpsths_extr(:);
    s2_concat_mode(:,nn) = nn_zpsths_mode(:);
    s2_concat_diff(:,nn) = nn_zpsths_diff(:);
end

% training settings
pca_design = s2_concat_all;
%   'all'   ->  vanilla PCA
%   'extr'  ->  pseudo-demixed PCA
%   'mode'  ->  robust PCA
pca_design = ref_zpsths(roi2use_flags,:,:);

% compute observation weights
time_mat = repmat(roi2use(1) + psthbin : psthbin : roi2use(2),...
    sum(valid_flags),1);
weights = sum(time_mat <= t2(valid_flags));
weights = weights / max(weights);
% weights = ones(size(pca_design,1),1);
% for ii = 1 : n_contrasts
%     contrast_flags = contrasts == contrast_set(ii);
%     time_mat = repmat(roi2use(1) + psthbin : psthbin : roi2use(2),...
%         sum(contrast_flags),1);
%     concat_idcs = (1 : roi2use_n_bins) + roi2use_n_bins * (ii - 1);
%     weights(concat_idcs) = sum(time_mat <= t2(contrast_flags));
% end
% weights = repmat(weights,1,size(pca_design,1)/numel(weights));
% weights(weights == 0) = nan;

% PCA
[coeff,~,~,~,exp_pca] = pca(pca_design,...
    'weights',weights);
ref_score = ref_zpsths * coeff;
% coeff_choice = coeff;
% coeff = coeff_choice;

% reorder PCs by variance explained
% lat_pca = nanvar(s2_concat_all * coeff)';
% exp_pca = lat_pca / sum(nanvar(s2_concat_all)) * 100;
% lat_pca = nanvar(pca_design * coeff)';
% exp_pca = lat_pca / sum(nanvar(pca_design)) * 100;
% [~,pca_idcs] = sort(lat_pca,'descend');
% coeff = coeff(:,pca_idcs);
% exp_pca = lat_pca(pca_idcs) / sum(nanvar(s2_concat_all)) * 100;

% preallocation
s2_score = nan(roi2plot_n_bins,n_neurons,n_contrasts);

% sign changes
sign_flips = [1,1,1];
coeff(:,1:3) = coeff(:,1:3) .* sign_flips;

% iterate through contrasts
for ii = 1 : n_contrasts
    
    % project onto PCs
    s2_score(:,:,ii) = s2_zpsths(:,:,ii) * coeff;
end

%% 3D trajectories in PC space
fig = figure(figopt,...
    ...'position',[400,150,700,620],...
    'position',[100,150,460,480],...
    'name',sprintf('pc_trajectories3D_t2_%s',contrast_str));
set(gca,...
    axesopt.default,...
    'xtick',0,...
    'ytick',0,...
    'ztick',0);
xlabel(sprintf('%s\n%.1f%% variance','PC 1',exp_pca(1)),...
    'horizontalalignment','center');
ylabel(sprintf('%s\n%.1f%% variance','PC 2',exp_pca(2)),...
    'horizontalalignment','center');
zlabel(sprintf('%s\n%.1f%% variance','PC 3',exp_pca(3)),...
    'horizontalalignment','center');

% linewidth settings
linewidth = 1.5;
wall_linewidth = linewidth * 2 / 3;

% marker size settings
markersize = 5;
wall_markersize = markersize * 2 / 3;

% iterate through contrasts
for ii = 1 : n_contrasts
    contrast_flags = contrasts == contrast_set(ii);
    
    % plot trajectory
    plot3(s2_score(:,1,ii),...
        s2_score(:,2,ii),...
        s2_score(:,3,ii),...
        'color',contrast_clrs(ii,:),...
        'linestyle','-',...
        'linewidth',linewidth);
    
    % plot stimulus onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    plot3(s2_score(onset_flags,1,ii),...
        s2_score(onset_flags,2,ii),...
        s2_score(onset_flags,3,ii),...
        'linewidth',linewidth,...
        'marker','o',...
        'markersize',markersize,...
        'markerfacecolor','w',...
        'markeredgecolor',contrast_clrs(ii,:));
    
    % iterate through stimuli
    for tt = 1 : n_t
        t2_flags = t2 == t_set(tt);
        trial_flags = ...
            valid_flags & ...
            contrast_flags & ...
            t2_flags;
        if sum(trial_flags) < 1
            continue;
        end
        
        % plot stimulus offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        plot3(s2_score(offset_flags,1,ii),...
            s2_score(offset_flags,2,ii),...
            s2_score(offset_flags,3,ii),...
            'linewidth',linewidth,...
            'marker','o',...
            'markersize',markersize,...
            'markerfacecolor',contrast_clrs(ii,:),...
            'markeredgecolor',contrast_clrs(ii,:));
        
        % plot cross-condition offset-connecting line
        if ii == contrast_mode_idx
            p = plot3(squeeze(s2_score(offset_flags,1,:)),...
                squeeze(s2_score(offset_flags,2,:)),...
                squeeze(s2_score(offset_flags,3,:)),...
                'linewidth',linewidth*2/3,...
                'linestyle','-',...
                'color',contrast_clrs(contrast_mode_idx,:));
            uistack(p,'bottom');
        end
    end
end

% update axis
axis tight;
spacer = .25;
xlim(xlim + [-1,1] * spacer * range(xlim));
ylim(ylim + [-1,1] * spacer * range(ylim));
zlim(zlim + [-1,1] * spacer * range(zlim));
set(gca,...
    'xtick',[],...xlim,...
    'ytick',[],...ylim,...
    'ztick',[],...zlim,...
    'xticklabel',{},...
    'yticklabel',{},...
    'zticklabel',{},...
    'xcolor','k',...
    'ycolor','k',...
    'zcolor','k');

% plot 2D wall projections
lims = [xlim; ylim; zlim];
% lims(1,:) = fliplr(lims(1,:));
lims(2,:) = fliplr(lims(2,:));
% lims(3,:) = fliplr(lims(3,:));

% plot cube edges
cube_clr = [1,1,1] * .85 * 0;
cube_edges = gobjects(3,1);
cube_edges(1) = plot3([1,1].*lims(1,:),[1,1].*lims(2,1),[1,1].*lims(3,1),...
    'linestyle',':',...
    ...'linewidth',1,...
    'color',cube_clr);
cube_edges(2) = plot3([1,1].*lims(1,1),[1,1].*lims(2,:),[1,1].*lims(3,1),...
    'linestyle',':',...
    ...'linewidth',1,...
    'color',cube_clr);
cube_edges(3) = plot3([1,1].*lims(1,1),[1,1].*lims(2,1),[1,1].*lims(3,:),...
    'linestyle',':',...
    ...'linewidth',1,...
    'color',cube_clr);

% plot pair-wise projections
for jj = 1 : 3
    wall_ref_score = ref_score(:,1:3);
    wall_ref_score(:,jj,:) = lims(jj,1);
    wall_ii_score = s2_score(:,1:3,:);
    wall_ii_score(:,jj,:) = lims(jj,1);
    
    % plot reference trajectory
    %     plot3(wall_ref_score(:,1),...
    %         wall_ref_score(:,2),...
    %         wall_ref_score(:,3),...
    %         'color',[1,1,1]*4/5,...
    %         'linestyle','-',...
    %         'linewidth',1.5);
    
    % iterate through contrasts
    for ii = 1 : n_contrasts
        contrast_flags = contrasts == contrast_set(ii);
        
        % faded color
        clrs = colorlerp([contrast_clrs(ii,:);[1,1,1]],5);
        faded_clr = clrs(4,:);
        
        % plot trajectory
        plot3(wall_ii_score(:,1,ii),...
            wall_ii_score(:,2,ii),...
            wall_ii_score(:,3,ii),...
            'color',faded_clr,...
            'linestyle','-',...
            'linewidth',wall_linewidth);
        
        % plot stimulus onset
        onset_flags = roi2plot_time <= 0 & ...
            [roi2plot_time(2:end),nan] > 0;
        plot3(wall_ii_score(onset_flags,1,ii),...
            wall_ii_score(onset_flags,2,ii),...
            wall_ii_score(onset_flags,3,ii),...
            'linewidth',wall_linewidth,...
            'marker','o',...
            'markersize',wall_markersize,...
            'markerfacecolor','w',...
            'markeredgecolor',faded_clr);
        
        % iterate through stimuli
        for tt = 1 : n_t
            t2_flags = t2 == t_set(tt);
            trial_flags = ...
                valid_flags & ...
                contrast_flags & ...
                t2_flags;
            if sum(trial_flags) < 1
                continue;
            end
            
            % plot stimulus offset
            offset_flags = roi2plot_time < t_set(tt) & ...
                [roi2plot_time(2:end),nan] >= t_set(tt);
            plot3(wall_ii_score(offset_flags,1,ii),...
                wall_ii_score(offset_flags,2,ii),...
                wall_ii_score(offset_flags,3,ii),...
                'linewidth',wall_linewidth,...
                'marker','o',...
                'markersize',wall_markersize,...
                'markerfacecolor',faded_clr,...
                'markeredgecolor',faded_clr);
            
            % plot cross-condition offset-connecting line
            if ii == contrast_mode_idx
                p = plot3(squeeze(wall_ii_score(offset_flags,1,:)),...
                    squeeze(wall_ii_score(offset_flags,2,:)),...
                    squeeze(wall_ii_score(offset_flags,3,:)),...
                    'linewidth',wall_linewidth*2/3,...
                    'linestyle','-',...
                    'color',faded_clr);
                uistack(p,'bottom');
            end
        end
    end
end

% update axis
view(45,45)

% ui restacking
uistack(cube_edges,'bottom');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% PC projections

% figure initialization
fig = figure(figopt,...
    'position',[535,130,966,860],...
    'name',sprintf('pc_projections_t2_%s',contrast_str));
n_pcs2plot = 6;
sps = gobjects(n_pcs2plot,1);
for pc = 1 : n_pcs2plot
    sp_idx = pc * 2 - 1 - (pc > n_pcs2plot / 2) * (n_pcs2plot - 1);
    sps(pc) = subplot(n_pcs2plot/2,2,sp_idx);
    xlabel(sps(pc),'Time since S_2 onset (ms)');
    ylabel(sps(pc),sprintf('PC %i\n%.1f%% variance',pc,exp_pca(pc)));
end
xxtick = unique([roi2plot';0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
set(sps,...
    axesopt.default,...
    'xlim',roi2plot + [-1,1] * .05 * range(roi2plot),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylimspec','tight',...
    'plotboxaspectratio',[2,1,1]);

% link axes
linkaxes(sps,'x');

% iterate through pcs
for pc = 1 : n_pcs2plot
    
    % graphical object preallocation
    p = gobjects(n_contrasts,1);
    
    % iterate through contrasts
    for ii = 1 : n_contrasts
        contrast_flags = contrasts == contrast_set(ii);
        
        % plot projection
        p(ii) = plot(sps(pc),roi2plot_time,...
            s2_score(:,pc,ii),...
            'color',contrast_clrs(ii,:),...
            'linestyle','-',...
            'linewidth',1.5);
        
        % plot projection onset
        onset_flags = roi2plot_time <= 0 & ...
            [roi2plot_time(2:end),nan] > 0;
        plot(sps(pc),roi2plot_time(onset_flags),...
            s2_score(onset_flags,pc,ii),...
            'linewidth',1.5,...
            'marker','o',...
            'markersize',5,...
            'markerfacecolor','w',...
            'markeredgecolor',contrast_clrs(ii,:));
        
        % iterate through stimuli
        for tt = 1 : n_t
            t2_flags = t2 == t_set(tt);
            trial_flags = ...
                valid_flags & ...
                contrast_flags & ...
                t2_flags;
            if sum(trial_flags) < 1
                continue;
            end
            
            % plot projection offset
            offset_flags = roi2plot_time < t_set(tt) & ...
                [roi2plot_time(2:end),nan] >= t_set(tt);
            plot(sps(pc),roi2plot_time(offset_flags),...
                s2_score(offset_flags,pc,ii),...
                'linewidth',1.5,...
                'marker','o',...
                'markersize',6,...
                'markerfacecolor',contrast_clrs(ii,:),...
                'markeredgecolor','none');
        end
    end
    
    % update axes
    set(sps(pc),...
        'ytick',unique([0,ylim(sps(pc))]),...
        'yticklabel',{'','0',''},...
        'ylim',ylim(sps(pc))+[-1,1]*.1*range(ylim(sps(pc))));
    
    % ui stacking
    uistack(p(:),'bottom');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% 2D trajectories in curated PC space
fig = figure(figopt,...
    'name',sprintf('pc_trajectories2D_t2_%s',contrast_str));
axes(...
    axesopt.default,...
    'clipping','off');
xlabel('Rotated PC 1_{1}');
ylabel('Rotated PC 2_{2}');

% rotation specification
rotfuns = {@rotxd,@rotyd,@rotzd};
thetas = [50,-10,90] .* [1,1,1];
S_ref = nan(3,roi2plot_n_bins,n_contrasts);
S = nan(3,roi2plot_n_bins,n_contrasts);
for pc = 1 : 3
    S_ref(pc,:,1) = ref_score(:,pc);
    S(pc,:,:) = s2_score(:,pc,:);
end
B = cat(3,...
    padarray([-1,0,1],2,0,'post'),...
    padarray([-1,0,1],1,0,'both'),...
    padarray([-1,0,1],2,0,'pre')) * 3;

% preallocate rotation matrix
R = eye(3);

% iterate through dimensions
for ii = 1 : size(R,1)
    
    % compute compound rotation
    R = R * rotfuns{ii}(thetas(ii));
end

% iterate through contrast conditions
for ii = 1 : n_contrasts
    
    % apply rotations
    S_ref(:,:,ii) = R * S_ref(:,:,ii);
    S(:,:,ii) = R * S(:,:,ii);
end

% iterate through bases
for ii = 1 : 3
    
    % apply rotations
    B(:,:,ii) = R * B(:,:,ii);
end

% graphical object preallocation
p = gobjects(n_contrasts,1);

% linewidth settings
linewidth = 1.5;

% marker size settings
markersize = 7.5;

% plot reference trajectory
h_ref = plot3(S_ref(1,:,1),...
    S_ref(2,:,1),...
    S_ref(3,:,1),...
    'color','k',...
    'linestyle','--',...
    'linewidth',linewidth);

% update axis
axis tight;
xxlim = xlim + [-1,1] * .1 * range(xlim);
yylim = ylim + [-1,1] * .1 * range(ylim);
spacer = .05;
xlim(xxlim + [-1,1] * spacer * range(xxlim));
ylim(yylim + [-1,1] * spacer * range(yylim));
set(gca,...
    'xtick',unique([xxlim,0]),...
    'ytick',unique([yylim,0]),...
    'xticklabel',{'','0',''},...
    'yticklabel',{'','0',''},...
    'xcolor','k',...
    'ycolor','k');

% delete reference trajectory
delete(h_ref);

% iterate through contrasts
for ii = 1 : n_contrasts
    contrast_flags = contrasts == contrast_set(ii);
    
    % plot trajectory
    plot(S(1,:,ii),...
        S(2,:,ii),...
        ...S(3,:,ii),...
        'color',contrast_clrs(ii,:),...
        'linestyle','-',...
        'linewidth',linewidth);
    
    % plot stimulus onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    p(ii) = plot(S(1,onset_flags,ii),...
        S(2,onset_flags,ii),...
        ...S(3,onset_flags,ii),...
        'linewidth',linewidth,...
        'marker','o',...
        'markersize',markersize,...
        'markerfacecolor','w',...
        'markeredgecolor',contrast_clrs(ii,:));
    
    % iterate through stimuli
    for tt = 1 : n_t
        t2_flags = t2 == t_set(tt);
        trial_flags = ...
            valid_flags & ...
            contrast_flags & ...
            t2_flags;
        if sum(trial_flags) < 1
            continue;
        end
        
        % plot stimulus offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        plot(S(1,offset_flags,ii),...
            S(2,offset_flags,ii),...
            ...S(3,offset_flags,ii),...
            'linewidth',linewidth,...
            'marker','o',...
            'markersize',markersize,...
            'markerfacecolor',contrast_clrs(ii,:),...
            'markeredgecolor','none');
        
        % plot cross-condition offset-connecting line
        if ii == contrast_mode_idx
            h = plot(squeeze(S(1,offset_flags,:)),...
                squeeze(S(2,offset_flags,:)),...
                ...squeeze(S(3,offset_flags,:)),...
                'linewidth',linewidth*2/3,...
                'linestyle','--',...
                'color',contrast_clrs(contrast_mode_idx,:));
            uistack(h,'bottom');
        end
    end
end

% ui restacking
uistack(p,'top');

% update axis
% axis tight;
% xxlim = xlim;
% yylim = ylim;
% spacer = .05;
% xlim(xlim + [-1,1] * spacer * range(xlim));
% ylim(ylim + [-1,1] * spacer * range(ylim));
% set(gca,...
%     'xtick',unique([xxlim,0]),...
%     'ytick',unique([yylim,0]),...
%     'xticklabel',{'','0',''},...
%     'yticklabel',{'','0',''},...
%     'xcolor','k',...
%     'ycolor','k');

% iterate through dimensions
B_clrs = [1,0,0; 0,1,0; 0,0,1];
% B_clrs = colorlerp([0,0,0; 1,1,1],5)
for ii = 1 : size(B,1)
    
    % plot basis
    plot(B(1,:,ii),...
        B(2,:,ii),...
        ...B(3,:,ii),...
        'color',B_clrs(ii,:),...
        'linewidth',1.5,...
        'linestyle','-');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end