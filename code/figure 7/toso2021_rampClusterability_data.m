%% check 'main.m' has run (and run it if not)
toso2021_maincheck;

%% ROI settings
si_roi = [0,t_set(end)];
si_n_bins = range(si_roi) / psthbin;
si_time = linspace(si_roi(1),si_roi(2),si_n_bins);

%% construct Si-aligned psths

% preallocation
s1_psths = nan(si_n_bins,n_neurons);
s2_psths = nan(si_n_bins,n_neurons);

% iterate through neurons
for nn = 1 : n_neurons
    progressreport(nn,n_neurons,'parsing neural data');
    neuron_flags = data.NeuronNumb == flagged_neurons(nn);
    spike_flags = ...
        valid_flags & ...
        neuron_flags;
    
    % fetch spike rates
    spike_rates = data.SDF(spike_flags,:);
    n_trials = size(spike_rates,1);
    
    % S1-aligned spike rates
    s1_alignment_offset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags);
    s1_alignment_flags = ...
        padded_time >= s1_alignment_offset + si_roi(1) & ...
        padded_time < s1_alignment_offset + t1(spike_flags);
    s1_chunk_flags = ...
        padded_time >= s1_alignment_offset + si_roi(1) & ...
        padded_time < s1_alignment_offset + si_roi(2);
    s1_spkrates = spike_rates';
    s1_spkrates(~s1_alignment_flags') = nan;
    s1_spkrates = reshape(...
        s1_spkrates(s1_chunk_flags'),...
        [si_n_bins,n_trials])';
    
    % S2-aligned spike rates
    s2_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi;
    s2_alignment_flags = ...
        padded_time >= s2_alignment + si_roi(1) & ...
        padded_time < s2_alignment + t2(spike_flags);
    s2_chunk_flags = ...
        padded_time >= s2_alignment + si_roi(1) & ...
        padded_time < s2_alignment + si_roi(2);
    s2_spkrates = spike_rates';
    s2_spkrates(~s2_alignment_flags') = nan;
    s2_spkrates = reshape(...
        s2_spkrates(s2_chunk_flags'),...
        [si_n_bins,n_trials])';
    
    % compute mean spike density functions
    s1_psths(:,nn) = nanmean(s1_spkrates);
    s2_psths(:,nn) = nanmean(s2_spkrates);
end

%% normalization

% z-score S1-aligned spike density functions
s1_mus = nanmean(s1_psths,[1,3]);
s1_sigs = nanstd(s1_psths,0,[1,3]);
s1_zpsths = (s1_psths - s1_mus) ./ s1_sigs;

% z-score S2-aligned spike density functions
s2_mus = nanmean(s2_psths,[1,3]);
s2_sigs = nanstd(s2_psths,0,[1,3]);
s2_zpsths = (s2_psths - s2_mus) ./ s2_sigs;

%% parse cluster indices & colors

% S1-aligned clusters
s1_upramp_flags = ismember(flagged_neurons,ramp_idcs.s1{'up'});
s1_downramp_flags = ismember(flagged_neurons,ramp_idcs.s1{'down'});
s1_ramp_flags = ismember(flagged_neurons,cluster_idcs.s1{'ramp'});
s1_nonramp_flags = ismember(flagged_neurons,cluster_idcs.s1{'nonramp'});
s1_cluster_ids = [s1_upramp_flags | s1_downramp_flags,s1_nonramp_flags] * (1:2)';
s1_cluster_flags = s1_cluster_ids > 0;
s1_cluster_clrs = repmat([1,1,1],n_neurons,1);
s1_cluster_clrs(s1_cluster_flags,:) = ...
    ramp_clrs(s1_cluster_ids(s1_cluster_flags),:);

% S2-aligned clusters
s2_upramp_flags = ismember(flagged_neurons,ramp_idcs.s2{'up'});
s2_downramp_flags = ismember(flagged_neurons,ramp_idcs.s2{'down'});
s2_ramp_flags = ismember(flagged_neurons,cluster_idcs.s2{'ramp'});
s2_nonramp_flags = ismember(flagged_neurons,cluster_idcs.s2{'nonramp'});
s2_cluster_ids = [s2_upramp_flags | s2_downramp_flags,s2_nonramp_flags] * (1:2)';
s2_cluster_flags = s2_cluster_ids > 0;
s2_cluster_clrs = repmat([1,1,1],n_neurons,1);
s2_cluster_clrs(s2_cluster_flags,:) = ...
    ramp_clrs(s2_cluster_ids(s2_cluster_flags),:);

%% compute Si-aligned observation weights
time_mat = repmat(si_time,n_total_trials,1);
s1_weights = sum(time_mat(valid_flags,:) <= t1(valid_flags));
s1_weights = s1_weights / sum(s1_weights);
s2_weights = sum(time_mat(valid_flags,:) <= t2(valid_flags));
s2_weights = s2_weights / sum(s2_weights);

%% PCA

% compute S1-aligned PCs
s1_pca_neuron_coeff = pca(zscore(s1_psths,0,1));
[~,s1_pca_time_score] = pca(zscore(s1_psths,0,2)');
[s1_thetas,~] = cart2pol(s1_pca_neuron_coeff(:,1),s1_pca_neuron_coeff(:,2));

% compute S2-aligned PCs
s2_pca_neuron_coeff = pca(zscore(s2_psths,0,1));
[~,s2_pca_time_score] = pca(zscore(s2_psths,0,2)');
[s2_thetas,~] = cart2pol(s2_pca_neuron_coeff(:,1),s2_pca_neuron_coeff(:,2));

%% t-SNE

% compute S1-aligned t-SNE embedding
s1_tsne_embeddings = tsne(zscore(s1_psths,0,2)');

% compute S2-aligned t-SNE embedding
s2_tsne_embeddings = tsne(zscore(s2_psths,0,2)');

%% pearson's correlation coefficient

% preallocation
s1_rhos = nan(n_neurons,1);
s2_rhos = nan(n_neurons,1);

% iterate through neurons
for nn = 1 : n_neurons
    
    % S1-aligned correlation coefficient
    s1_rho = corrcoef(si_time,s1_zpsths(:,nn));
    s1_rhos(nn) = s1_rho(1,2);
    
    % S2-aligned correlation coefficient
    s2_rho = corrcoef(si_time,s2_zpsths(:,nn));
    s2_rhos(nn) = s2_rho(1,2);
end

%% clusterability metrics structure

% preallocation
s1_clusterability = struct();
s2_clusterability = struct();

% assignment of S1-aligned clusterability metrics
s1_clusterability.thetas = s1_thetas;
s1_clusterability.rhos = s1_rhos;

% assignment of S2-aligned clusterability metrics
s2_clusterability.thetas = s2_thetas;
s2_clusterability.rhos = s2_rhos;

% parse clusterability metrics
clusterability_metrics = fieldnames(s2_clusterability);
n_metrics = numel(clusterability_metrics);

%% hartigan's dip test

% preallocation
s1_diptestpval = struct();
s2_diptestpval = struct();

% iterate through clusterability metrics
for mm = 1 : n_metrics
    metric = clusterability_metrics{mm};
    
    % store dip test p-values
    [~,s1_diptestpval.(metric).all] = diptest(s1_clusterability.(metric));
    [~,s2_diptestpval.(metric).all] = diptest(s2_clusterability.(metric));
    
    % iterate through clusters
    for kk = 1 : n_clusters
        cluster = cluster_labels{kk};
        s1_cluster_flags = ...
            ismember(flagged_neurons,cluster_idcs.s1{cluster});
        s2_cluster_flags = ...
            ismember(flagged_neurons,cluster_idcs.s2{cluster});
        
        % store dip test p-values
        [~,s1_diptestpval.(metric).(cluster)] = ...
            diptest(s1_clusterability.(metric)(s1_cluster_flags));
        [~,s2_diptestpval.(metric).(cluster)] = ...
            diptest(s2_clusterability.(metric)(s2_cluster_flags));
    end
end

%% S1-aligned tiling

% figure initialization
fig = figure(figopt,...
    'name','tiling_s1');

% axes initialization
xxtick = unique([0;si_roi';t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
axes(axesopt.default,...
    'xlim',si_roi,...
    'ylim',[1,n_neurons],...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ytick',[1,n_neurons],...
    'colormap',hot(2^8),...
    'clipping','off');
title('S1-aligned PSTH raster');
xlabel('Time since S1 onset (ms)');
ylabel({'Neuron #','(sorted by neuron-wise PCs)'});

% sort by angular position in PC space
[~,s1_theta_idcs] = sortrows(s1_thetas);
s1_theta_idcs = circshift(s1_theta_idcs,150);

% color limits
clim = [-2,4];

% plot psth raster
imagesc(si_roi,[1,n_neurons],s1_zpsths(:,s1_theta_idcs)',clim);

% plot cluster affordances
plot(si_roi(1)-.025*range(xlim),find(s1_nonramp_flags(s1_theta_idcs)),...
    'color',ramp_clrs(2,:),...
    'marker','.',...
    'markersize',5);
plot(si_roi(1)-.0125*range(xlim),find(s1_ramp_flags(s1_theta_idcs)),...
    'color',ramp_clrs(1,:),...
    'marker','.',...
    'markersize',5);

% color bar
clrbar = colorbar;
clrbar.Ticks = unique([0,clim]);
clrlabel.string = 'Firing rate (z-score)';
clrlabel.fontsize = axesopt.default.fontsize * 1.1;
clrlabel.rotation = 270;
clrlabel.position = [3.5,sum(clim)/2,0];
set(clrbar,...
    axesopt.colorbar,...
    'color','k',...
    'fontsize',axesopt.default.fontsize);
set(clrbar.Label,...
    'color','k',...
    clrlabel);

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S2-aligned tiling

% figure initialization
fig = figure(figopt,...
    'name','tiling_s2');

% axes initialization
xxtick = unique([0;si_roi';t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
axes(axesopt.default,...
    'xlim',si_roi,...
    'ylim',[1,n_neurons],...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ytick',[1,n_neurons],...
    'colormap',hot(2^8),...
    'clipping','off');
title('S2-aligned PSTH raster');
xlabel('Time since S2 onset (ms)');
ylabel({'Neuron #','(sorted by neuron-wise PCs)'});

% sort by angular position in PC space
[~,s2_theta_idcs] = sortrows(s2_thetas);
s2_theta_idcs = flipud(circshift(s2_theta_idcs,-125));

% color limits
clim = [-2,4];

% plot psth raster
imagesc(si_roi,[1,n_neurons],s2_zpsths(:,s2_theta_idcs)',clim);

% plot cluster affordances
plot(si_roi(1)-.1*range(xlim),find(s2_nonramp_flags(s2_theta_idcs)),...
    'color',ramp_clrs(2,:),...
    'marker','.',...
    'markersize',5);
plot(si_roi(1)-.085*range(xlim),find(s2_ramp_flags(s2_theta_idcs)),...
    'color',ramp_clrs(1,:),...
    'marker','.',...
    'markersize',5);

% iterate through clusters
for kk = n_clusters : -1 : 1
    cluster = cluster_labels{kk};
    cluster_flags = ismember(flagged_neurons,cluster_idcs.s2{cluster});
    neuron_edges = linspace(.5,n_neurons+.5,50);
    neuron_pdf = histcounts(find(cluster_flags(s2_theta_idcs)),neuron_edges);
    xx = neuron_pdf / 5;
    xx = xx .* [1;1] * range(xlim) * .035 * -1;
    xx = [0; xx(:); 0];
    yy = neuron_edges .* [1;1];
    xpatch = [[1;1]; xx(:)];
    ypatch = [neuron_edges([end,1])'; yy(:)];
    
    % plot cluster affordances
    patch(xpatch,ypatch,ramp_clrs(kk,:),...
        'edgecolor','none',...
        'facealpha',1,...
        'linewidth',1.5);
end

% color bar
clrbar = colorbar;
clrbar.Ticks = unique([0,clim]);
clrlabel.string = 'Firing rate (z-score)';
clrlabel.fontsize = axesopt.default.fontsize * 1.1;
clrlabel.rotation = 270;
clrlabel.position = [3.5,sum(clim)/2,0];
set(clrbar,...
    axesopt.colorbar,...
    'color','k',...
    'fontsize',axesopt.default.fontsize);
set(clrbar.Label,...
    'color','k',...
    clrlabel);

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S1-aligned PC neuron-wise coefficient scatter
fig = figure(figopt,...
    'name','pc_neuronwiseCoefficients2D_s1');
axes(axesopt.default,...
    'clipping','off');
xlabel('S_{1}-aligned PC 1 coefficient_{1}');
ylabel('S_{1}-aligned PC 2 coefficient_{2}');

% background joint distribution
nbins = 15;
xbounds = quantile(s1_pca_neuron_coeff(:,1),[0,1]);
ybounds = quantile(s1_pca_neuron_coeff(:,2),[0,1]);
xedges = linspace(xbounds(1),xbounds(2),nbins+1);
yedges = linspace(ybounds(1),ybounds(2),nbins+1);
rampcounts2 = histcounts2(...
    s1_pca_neuron_coeff(s1_ramp_flags,1),s1_pca_neuron_coeff(s1_ramp_flags,2),...
    'xbinedges',xedges,...
    'ybinedges',yedges);
noncounts2 = histcounts2(...
    s1_pca_neuron_coeff(s1_nonramp_flags,1),s1_pca_neuron_coeff(s1_nonramp_flags,2),...
    'xbinedges',xedges,...
    'ybinedges',yedges);
C = cat(3,rampcounts2',noncounts2');
P = tensor2rgb(C,ramp_clrs);
imagesc(...
    xbounds+[1,-1]*diff(xedges(1:2))/2,...
    ybounds+[1,-1]*diff(yedges(1:2))/2,P);

% coefficient scatter
grapeplot(s1_pca_neuron_coeff(s1_nonramp_flags,1),...
    s1_pca_neuron_coeff(s1_nonramp_flags,2),...
    'markersize',3,...
    'markeredgecolor',s1_cluster_clrs(s1_nonramp_flags,:),...
    'markerfacecolor',s1_cluster_clrs(s1_nonramp_flags,:)*.85);
grapeplot(s1_pca_neuron_coeff(s1_ramp_flags,1),...
    s1_pca_neuron_coeff(s1_ramp_flags,2),...
    'markersize',3,...
    'markeredgecolor',s1_cluster_clrs(s1_ramp_flags,:),...
    'markerfacecolor',s1_cluster_clrs(s1_ramp_flags,:)*.85);

% update axis
xxlim = xlim;
yylim = ylim;
xlim(xxlim + [-1,1] * .05 * range(xxlim));
ylim(yylim + [-1,1] * .05 * range(yylim));
set(gca,...
    'xtick',unique([xxlim,0]),...
    'ytick',unique([yylim,0]),...
    'xticklabel',{'','0',''},...
    'yticklabel',{'','0',''},...
    'xcolor','k',...
    'ycolor','k');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S2-aligned PC neuron-wise coefficient scatter
fig = figure(figopt,...
    'name','pc_neuronwiseCoefficients2D_s2');
axes(axesopt.default,...
    'colormap',1-gray(2^8),...
    'clipping','off');
xlabel('Neuron-wise PC 1 coefficient_{1}');
ylabel('Neuron-wise PC 2 coefficient_{2}');

% background joint distribution
nbins = 15;
xbounds = quantile(s2_pca_neuron_coeff(:,1),[0,1]);
ybounds = quantile(s2_pca_neuron_coeff(:,2),[0,1]);
xedges = linspace(xbounds(1),xbounds(2),nbins+1);
yedges = linspace(ybounds(1),ybounds(2),nbins+1);
rampcounts2 = histcounts2(...
    s2_pca_neuron_coeff(s2_ramp_flags,1),s2_pca_neuron_coeff(s2_ramp_flags,2),...
    'xbinedges',xedges,...
    'ybinedges',yedges);
noncounts2 = histcounts2(...
    s2_pca_neuron_coeff(s2_nonramp_flags,1),s2_pca_neuron_coeff(s2_nonramp_flags,2),...
    'xbinedges',xedges,...
    'ybinedges',yedges);
C = cat(3,rampcounts2',noncounts2');
P = tensor2rgb(C,ramp_clrs);
imagesc(...
    xbounds+[1,-1]*diff(xedges(1:2))/2,...
    ybounds+[1,-1]*diff(yedges(1:2))/2,P);

% coefficient scatter
grapeplot(s2_pca_neuron_coeff(s2_nonramp_flags,1),...
    s2_pca_neuron_coeff(s2_nonramp_flags,2),...
    'markersize',3,...
    'markeredgecolor',s2_cluster_clrs(s2_nonramp_flags,:),...
    'markerfacecolor',s2_cluster_clrs(s2_nonramp_flags,:)*.85);
grapeplot(s2_pca_neuron_coeff(s2_ramp_flags,1),...
    s2_pca_neuron_coeff(s2_ramp_flags,2),...
    'markersize',3,...
    'markeredgecolor',s2_cluster_clrs(s2_ramp_flags,:),...
    'markerfacecolor',s2_cluster_clrs(s2_ramp_flags,:)*.85);

% update axis
xxlim = xlim;
yylim = ylim;
xlim(xxlim + [-1,1] * .05 * range(xxlim));
ylim(yylim + [-1,1] * .05 * range(yylim));
set(gca,...
    'xtick',unique([xxlim,0]),...
    'ytick',unique([yylim,0]),...
    'xticklabel',{'','0',''},...
    'yticklabel',{'','0',''},...
    'xcolor','k',...
    'ycolor','k');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S1-aligned PC time-wise score scatter
fig = figure(figopt,...
    'name','pc_timewiseScores2D_s1');
axes(axesopt.default,...
    'clipping','on');
xlabel('Time-wise PC 1 score_{1}');
ylabel('Time-wise PC 2 score_{2}');

% coefficient scatter
grapeplot(s1_pca_time_score(s1_nonramp_flags,1),s1_pca_time_score(s1_nonramp_flags,2),...
    'markeredgecolor',s1_cluster_clrs(s1_nonramp_flags,:),...
    'markerfacecolor',s1_cluster_clrs(s1_nonramp_flags,:));
grapeplot(s1_pca_time_score(s1_ramp_flags,1),s1_pca_time_score(s1_ramp_flags,2),...
    'markeredgecolor',s1_cluster_clrs(s1_ramp_flags,:),...
    'markerfacecolor',s1_cluster_clrs(s1_ramp_flags,:));

% update axis
xxlim = xlim;
yylim = ylim;
xlim(xxlim + [-1,1] * .05 * range(xxlim));
ylim(yylim + [-1,1] * .05 * range(yylim));
set(gca,...
    'xtick',unique([xxlim,0]),...
    'ytick',unique([yylim,0]),...
    'xticklabel',{'','0',''},...
    'yticklabel',{'','0',''},...
    'xcolor','k',...
    'ycolor','k');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S2-aligned PC time-wise score scatter
fig = figure(figopt,...
    'name','pc_timewiseScores2D_s2');
axes(axesopt.default,...
    'clipping','on');
xlabel('Time-wise PC 1 score_{1}');
ylabel('Time-wise PC 2 score_{2}');

% coefficient scatter
grapeplot(s2_pca_time_score(s2_nonramp_flags,1),s2_pca_time_score(s2_nonramp_flags,2),...
    'markeredgecolor',s2_cluster_clrs(s2_nonramp_flags,:),...
    'markerfacecolor',s2_cluster_clrs(s2_nonramp_flags,:)*.85);
grapeplot(s2_pca_time_score(s2_ramp_flags,1),s2_pca_time_score(s2_ramp_flags,2),...
    'markeredgecolor',s2_cluster_clrs(s2_ramp_flags,:),...
    'markerfacecolor',s2_cluster_clrs(s2_ramp_flags,:)*.85);

% update axis
xxlim = xlim;
yylim = ylim;
xlim(xxlim + [-1,1] * .05 * range(xxlim));
ylim(yylim + [-1,1] * .05 * range(yylim));
set(gca,...
    'xtick',unique([xxlim,0]),...
    'ytick',unique([yylim,0]),...
    'xticklabel',{'','0',''},...
    'yticklabel',{'','0',''},...
    'xcolor','k',...
    'ycolor','k');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S1-aligned t-SNE embeddings
fig = figure(figopt,...
    'name','tsne_s1');
axes(axesopt.default,...
    'clipping','off');
xlabel('t-SNE 1_{1}');
ylabel('t-SNE 2_{2}');

% coefficient scatter
grapeplot(s1_tsne_embeddings(s1_nonramp_flags,1),s1_tsne_embeddings(s1_nonramp_flags,2),...
    'markeredgecolor',s1_cluster_clrs(s1_nonramp_flags,:),...
    'markerfacecolor',s1_cluster_clrs(s1_nonramp_flags,:)*.85);
grapeplot(s1_tsne_embeddings(s1_ramp_flags,1),s1_tsne_embeddings(s1_ramp_flags,2),...
    'markeredgecolor',s1_cluster_clrs(s1_ramp_flags,:),...
    'markerfacecolor',s1_cluster_clrs(s1_ramp_flags,:)*.85);

% update axis
xxlim = xlim;
yylim = ylim;
xlim(xxlim + [-1,1] * .05 * range(xxlim));
ylim(yylim + [-1,1] * .05 * range(yylim));
set(gca,...
    'xtick',unique([xxlim,0]),...
    'ytick',unique([yylim,0]),...
    'xticklabel',{'','0',''},...
    'yticklabel',{'','0',''},...
    'xcolor','k',...
    'ycolor','k');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% S2-aligned t-SNE embeddings
fig = figure(figopt,...
    'name','tsne_s2');
axes(axesopt.default,...
    'clipping','off');
xlabel('t-SNE 1_{1}');
ylabel('t-SNE 2_{2}');

% coefficient scatter
grapeplot(s2_tsne_embeddings(s2_nonramp_flags,1),s2_tsne_embeddings(s2_nonramp_flags,2),...
    'markeredgecolor',s2_cluster_clrs(s2_nonramp_flags,:),...
    'markerfacecolor',s2_cluster_clrs(s2_nonramp_flags,:)*.85);
grapeplot(s2_tsne_embeddings(s2_ramp_flags,1),s2_tsne_embeddings(s2_ramp_flags,2),...
    'markeredgecolor',s2_cluster_clrs(s2_ramp_flags,:),...
    'markerfacecolor',s2_cluster_clrs(s2_ramp_flags,:)*.85);

% update axis
xxlim = xlim;
yylim = ylim;
xlim(xxlim + [-1,1] * .05 * range(xxlim));
ylim(yylim + [-1,1] * .05 * range(yylim));
set(gca,...
    'xtick',unique([xxlim,0]),...
    'ytick',unique([yylim,0]),...
    'xticklabel',{'','0',''},...
    'yticklabel',{'','0',''},...
    'xcolor','k',...
    'ycolor','k');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% distributions of S1-aligned clusterability metrics

% figure initialization
fig = figure(figopt,...
    'position',[100,600,560,415],...
    'name','clusterability_s1');

% axes initialization
n_sps = n_metrics;
sps = gobjects(n_sps,1);
for ii = 1 : n_sps
    sps(ii) = subplot(n_sps,1,ii);
    ylabel(sps(ii),'PDF');
end
set(sps,axesopt.default,...
    'plotboxaspectratio',[2.75,1,1],...
    'ticklength',axesopt.default.ticklength,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'ytick',0,...
    'clipping','on');
xlabel(sps(1),'|\theta(PC 1, PC 2)|');
xlabel(sps(2),'\rho(response, time)');

% bin settings
n_bins = 30;
bounds = struct();
edges = struct();
counts = struct();
bounds.thetas = [-pi,pi];
bounds.rhos = [-1,1];

% iterate through clusterability metrics
for mm = 1 : n_metrics
    metric = clusterability_metrics{mm};
    
    % compute distributions of clusterability metric
    edges.(metric) = linspace(bounds.(metric)(1),bounds.(metric)(2),n_bins);
    counts.(metric) = histcounts(s1_clusterability.(metric),edges.(metric));
    
    % plot distribution
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts.(metric),...
        'facecolor','w',...
        'edgecolor','none',...
        'facealpha',1,...
        'linewidth',1.5);
    stairs(sps(mm),edges.(metric),[counts.(metric),0],...
        'color','k',...
        'linewidth',1.5);
    
    % affordances for statistical tests
    pval = s1_diptestpval.(metric).all;
    if pval < .01
        test_str = '**';
        font_size = 16;
    elseif pval < .05
        test_str = '*';
        font_size = 16;
    else
        test_str = 'n.s.';
        font_size = axesopt.default.fontsize;
    end
    text(sps(mm),.5,.95,test_str,...
        'color','k',...
        'fontsize',font_size,...
        'horizontalalignment','center',...
        'verticalalignment','bottom',...
        'units','normalized');
end

% update axes
set(sps(1),...
    'xlim',bounds.(clusterability_metrics{1}),...
    'xtick',unique([0,bounds.(clusterability_metrics{1})]),...
    'xticklabel',{'-\pi','0','\pi'});
set(sps(2),...
    'xlim',bounds.(clusterability_metrics{2}),...
    'xtick',sort([0,bounds.(clusterability_metrics{2})]),...
    'xticklabel',num2cell(round(sort([0,bounds.(clusterability_metrics{2})]),2)));

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% distributions of S1-aligned clusterability metrics (split by cluster)

% figure initialization
fig = figure(figopt,...
    'position',[100,100,560,415],...
    'name','clusterability_clustersplit_s1');

% axes initialization
n_sps = n_metrics;
sps = gobjects(n_sps,1);
for ii = 1 : n_sps
    sps(ii) = subplot(n_sps,1,ii);
    ylabel(sps(ii),'PDF');
end
set(sps,axesopt.default,...
    'plotboxaspectratio',[2.75,1,1],...
    'ticklength',axesopt.default.ticklength,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'ytick',0,...
    'clipping','on');
set(sps(1),'ylim',[0,max(counts.(clusterability_metrics{1}))]);
set(sps(2),'ylim',[0,max(counts.(clusterability_metrics{2}))]);
xlabel(sps(1),'|\theta(PC 1, PC 2)|');
xlabel(sps(2),'\rho(response, time)');

% iterate through clusterability metrics
for mm = 1 : n_metrics
    metric = clusterability_metrics{mm};
    
    % compute distributions of clusterability metric
    counts_ramp = histcounts(s1_clusterability.(metric)(s1_ramp_flags),edges.(metric));
    counts_non = histcounts(s1_clusterability.(metric)(s1_nonramp_flags),edges.(metric));
    
    % plot distribution
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts_non,...
        'facecolor',ramp_clrs(2,:),...
        'edgecolor','none',...
        'facealpha',1,...
        'linewidth',1.5);
    stairs(sps(mm),edges.(metric),[counts_non,0],...
        'color','k',...
        'linewidth',1.5);
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts_ramp,...
        'facecolor',ramp_clrs(1,:),...
        'edgecolor','none',...
        'facealpha',1,...
        'linewidth',1.5);
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts_non,...
        'facecolor',ramp_clrs(2,:),...
        'edgecolor','none',...
        'facealpha',.5,...
        'linewidth',1.5);
    stairs(sps(mm),edges.(metric),[counts_ramp,0],...
        'color','k',...
        'linewidth',1.5);
    
    % iterate through clusters
    for kk = 1 : n_clusters
        cluster = cluster_labels{kk};
        
        % affordances for statistical tests
        pval = s1_diptestpval.(metric).(cluster);
        if pval < .01
            test_str = '**';
            font_size = 16;
        elseif pval < .05
            test_str = '*';
            font_size = 16;
        else
            test_str = 'n.s.';
            font_size = axesopt.default.fontsize;
        end
        text(sps(mm),.5,.9-kk*.1,test_str,...
            'color',ramp_clrs(kk,:),...
            'fontsize',font_size,...
            'horizontalalignment','center',...
            'verticalalignment','bottom',...
            'units','normalized');
    end
end

% update axes
set(sps(1),...
    'xlim',bounds.(clusterability_metrics{1}),...
    'xtick',unique([0,bounds.(clusterability_metrics{1})]),...
    'xticklabel',{'-\pi','0','\pi'});
set(sps(2),...
    'xlim',bounds.(clusterability_metrics{2}),...
    'xtick',sort([0,bounds.(clusterability_metrics{2})]),...
    'xticklabel',num2cell(round(sort([0,bounds.(clusterability_metrics{2})]),2)));

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% distributions of S2-aligned clusterability metrics

% figure initialization
fig = figure(figopt,...
    'position',[660,600,560,415],...
    'name','clusterability_s2');

% axes initialization
n_sps = n_metrics;
sps = gobjects(n_sps,1);
for ii = 1 : n_sps
    sps(ii) = subplot(n_sps,1,ii);
    ylabel(sps(ii),'PDF');
end
set(sps,axesopt.default,...
    'plotboxaspectratio',[2.75,1,1],...
    'ticklength',axesopt.default.ticklength,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'ytick',0,...
    'clipping','on');
xlabel(sps(1),'|\theta(PC 1, PC 2)|');
xlabel(sps(2),'\rho(response, time)');

% bin settings
n_bins = 30;
bounds = struct();
edges = struct();
counts = struct();
bounds.thetas = [-pi,pi];
bounds.rhos = [-1,1];

% iterate through clusterability metrics
for mm = 1 : n_metrics
    metric = clusterability_metrics{mm};
    
    % compute distributions of clusterability metric
    edges.(metric) = linspace(bounds.(metric)(1),bounds.(metric)(2),n_bins);
    counts.(metric) = histcounts(s2_clusterability.(metric),edges.(metric));
    
    % plot distribution
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts.(metric),...
        'facecolor','w',...
        'edgecolor','none',...
        'facealpha',1,...
        'linewidth',1.5);
    stairs(sps(mm),edges.(metric),[counts.(metric),0],...
        'color','k',...
        'linewidth',1.5);
    
    % affordances for statistical tests
    pval = s2_diptestpval.(metric).all;
    if pval < .01
        test_str = '**';
        font_size = 16;
    elseif pval < .05
        test_str = '*';
        font_size = 16;
    else
        test_str = 'n.s.';
        font_size = axesopt.default.fontsize;
    end
    text(sps(mm),.5,.95,test_str,...
        'color','k',...
        'fontsize',font_size,...
        'horizontalalignment','center',...
        'verticalalignment','bottom',...
        'units','normalized');
end

% update axes
set(sps(1),...
    'xlim',bounds.(clusterability_metrics{1}),...
    'xtick',unique([0,bounds.(clusterability_metrics{1})]),...
    'xticklabel',{'-\pi','0','\pi'});
set(sps(2),...
    'xlim',bounds.(clusterability_metrics{2}),...
    'xtick',sort([0,bounds.(clusterability_metrics{2})]),...
    'xticklabel',num2cell(round(sort([0,bounds.(clusterability_metrics{2})]),2)));

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% distributions of S2-aligned clusterability metrics (split by cluster)

% figure initialization
fig = figure(figopt,...
    'position',[660,100,560,415],...
    'name','clusterability_clustersplit_s2');

% axes initialization
n_sps = n_metrics;
sps = gobjects(n_sps,1);
for ii = 1 : n_sps
    sps(ii) = subplot(n_sps,1,ii);
    ylabel(sps(ii),'PDF');
end
set(sps,axesopt.default,...
    'plotboxaspectratio',[2.75,1,1],...
    'ticklength',axesopt.default.ticklength,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'ytick',0,...
    'clipping','on');
set(sps(1),'ylim',[0,max(counts.(clusterability_metrics{1}))]);
set(sps(2),'ylim',[0,max(counts.(clusterability_metrics{2}))]);
xlabel(sps(1),'|\theta(PC 1, PC 2)|');
xlabel(sps(2),'\rho(response, time)');

% iterate through clusterability metrics
for mm = 1 : n_metrics
    metric = clusterability_metrics{mm};
    
    % compute distributions of clusterability metric
    counts_ramp = histcounts(s2_clusterability.(metric)(s2_ramp_flags),edges.(metric));
    counts_non = histcounts(s2_clusterability.(metric)(s2_nonramp_flags),edges.(metric));
    
    % plot distribution
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts_non,...
        'facecolor',ramp_clrs(2,:),...
        'edgecolor','none',...
        'facealpha',1,...
        'linewidth',1.5);
    stairs(sps(mm),edges.(metric),[counts_non,0],...
        'color','k',...
        'linewidth',1.5);
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts_ramp,...
        'facecolor',ramp_clrs(1,:),...
        'edgecolor','none',...
        'facealpha',1,...
        'linewidth',1.5);
    histogram(sps(mm),...
        'binedges',edges.(metric),...
        'bincounts',counts_non,...
        'facecolor',ramp_clrs(2,:),...
        'edgecolor','none',...
        'facealpha',.5,...
        'linewidth',1.5);
    stairs(sps(mm),edges.(metric),[counts_ramp,0],...
        'color','k',...
        'linewidth',1.5);
    
    % iterate through clusters
    for kk = 1 : n_clusters
        cluster = cluster_labels{kk};
        
        % affordances for statistical tests
        pval = s2_diptestpval.(metric).(cluster);
        if pval < .01
            test_str = '**';
            font_size = 16;
        elseif pval < .05
            test_str = '*';
            font_size = 16;
        else
            test_str = 'n.s.';
            font_size = axesopt.default.fontsize;
        end
        text(sps(mm),.5,.9-kk*.1,test_str,...
            'color',ramp_clrs(kk,:),...
            'fontsize',font_size,...
            'horizontalalignment','center',...
            'verticalalignment','bottom',...
            'units','normalized');
    end
end

% update axes
set(sps(1),...
    'xlim',bounds.(clusterability_metrics{1}),...
    'xtick',unique([0,bounds.(clusterability_metrics{1})]),...
    'xticklabel',{'-\pi','0','\pi'});
set(sps(2),...
    'xlim',bounds.(clusterability_metrics{2}),...
    'xtick',sort([0,bounds.(clusterability_metrics{2})]),...
    'xticklabel',num2cell(round(sort([0,bounds.(clusterability_metrics{2})]),2)));

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end