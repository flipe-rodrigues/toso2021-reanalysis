%% check 'main.m' has run (and run it if not)
toso2021_maincheck;

%% manual curation

% excluded for being unstable (assessed by looking at spike rasters)
if strcmpi(task_str,'duration')
    neurons2exclude = [...
        1,5,8,9,10,11,12,14,20,23,29,36,40,71,86,92,95,136,181,185,192,...
        201,207,208,239,247,249,254,265,280,285,326,336,340,374,...
        375,429,430,438,442,453,468,541,557,571,584,599,600];
elseif strcmpi(task_str,'intensity')
    neurons2exclude = [...
        96,113,289,291,292,322,324,325,327,...
        329,330,331,332,333,371,346,371,378,...
        385,386,389,392];
end

%% construct S2-aligned, Ti- & Ii-split psths

% preallocation
s2_mean_frs = nan(n_neurons_total,1);
t1i1_trial_counts = zeros(n_neurons_total,n_t,n_i);
t1i2_trial_counts = zeros(n_neurons_total,n_t,n_i);
t2i1_trial_counts = zeros(n_neurons_total,n_t,n_i);
t2i2_trial_counts = zeros(n_neurons_total,n_t,n_i);

% iterate through neurons
for nn = neuron_idcs'
    progressreport(nn,n_neurons_total,'computing selection criteria');
    neuron_flags = data.NeuronNumb == neuron_idcs(nn);
    spike_flags = ...
        valid_flags & ...
        neuron_flags;
    if sum(spike_flags) == 0
        continue;
    end
    
    % fetch spike counts & compute spike rates
    spike_counts = data.FR(spike_flags,:);
    spike_rates = data.SDF(spike_flags,:);
    n_trials = size(spike_counts,1);
    
    % S2-aligned spike rates
    s2_alignment_onset = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi;
    s2_alignment_flags = ...
        padded_time >= s2_alignment_onset & ...
        padded_time < s2_alignment_onset + t2(spike_flags);
    s2_chunk_flags = ...
        padded_time >= s2_alignment_onset & ...
        padded_time < s2_alignment_onset + t_set(end);
    s2_spkrates = spike_rates';
    s2_spkrates(~s2_alignment_flags') = nan;
    s2_spkrates = reshape(...
        s2_spkrates(s2_chunk_flags'),[n_tbins,n_trials])';
    
    % neuron selection criteria
    s2_mean_frs(nn) = nanmean(s2_spkrates,[1,2]);
    
    % iterate through durations
    for tt = 1 : n_t
        t1_flags = t1 == t_set(tt);
        
        % iterate through intensities
        for ii = 1 : n_i
            i1_flags = i1 == i_set(ii);
            i2_flags = i2 == i_set(ii);
            t1i1_spike_flags = ...
                valid_flags & ...
                neuron_flags & ...
                t1_flags & ...
                i1_flags;
            t1i2_spike_flags = ...
                valid_flags & ...
                neuron_flags & ...
                t1_flags & ...
                i2_flags;
            
            % store trial type counts
            t1i1_trial_counts(nn,tt,ii) = sum(t1i1_spike_flags);
            t1i2_trial_counts(nn,tt,ii) = sum(t1i2_spike_flags);
        end
    end
    
    % iterate through durations
    for tt = 1 : n_t
        t2_flags = t2 == t_set(tt);
        
        % iterate through intensities
        for ii = 1 : n_i
            i1_flags = i1 == i_set(ii);
            i2_flags = i2 == i_set(ii);
            t2i1_spike_flags = ...
                valid_flags & ...
                neuron_flags & ...
                t2_flags & ...
                i1_flags;
            t2i2_spike_flags = ...
                valid_flags & ...
                neuron_flags & ...
                t2_flags & ...
                i2_flags;
            
            % store trial type counts
            t2i1_trial_counts(nn,tt,ii) = sum(t2i1_spike_flags);
            t2i2_trial_counts(nn,tt,ii) = sum(t2i2_spike_flags);
        end
    end
end

%% compute surviving trial counts
t2i1_surviving_trial_counts = cumsum(t2i1_trial_counts,2,'reverse');
t2i2_surviving_trial_counts = cumsum(t2i2_trial_counts,2,'reverse');

%% neuron selection
mean_fr_flags = ...
    s2_mean_frs >= mean_fr_cutoff;
trial_count_flags = ...
    all(t2i1_trial_counts >= trial_count_cutoff,[2,3]) & ...
    all(t2i2_trial_counts >= trial_count_cutoff,[2,3]);
surviving_trial_count_flags = ...
    all(t2i1_surviving_trial_counts(:,end,:) >= 2,[2,3]) & ...
    all(t2i2_surviving_trial_counts(:,end,:) >= 2,[2,3]);
curation_flags = ...
    ~ismember(neuron_idcs,neurons2exclude);
neurons2keep_flags = ...
    mean_fr_flags & ...
    trial_count_flags & ...
    curation_flags;
flagged_neurons = neuron_idcs(neurons2keep_flags);
n_neurons = numel(flagged_neurons);

%% display selection outcome
fprintf('\nSELECTION CRITERIA:\n');
fprintf('- minimum mean firing rate in middle I2 trials: %.2f Hz\n',...
    mean_fr_cutoff);
fprintf('- minimum trial count on all T2-I2 combinations: %i\n',...
    trial_count_cutoff);
fprintf('- sability assessed by visual inspection\n');
fprintf('%i/%i neurons passed.\n\n',n_neurons,n_neurons_total);