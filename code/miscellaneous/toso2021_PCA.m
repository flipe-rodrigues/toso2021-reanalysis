%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% TODO
% should probably add the option to train on choice-split Ti-aligned data,
% and then project Ii-split data on those PCs...

%% construct Ti-aligned, Ii-split psths
pre_padd = 500;
roi2use = [0,t_set(end-1)];
roi2plot = [-pre_padd,t_set(end)];
roi2use_n_bins = range(roi2use) * psthbin;
roi2plot_n_bins = range(roi2plot) * psthbin;
roi2use_time = linspace(roi2use(1),roi2use(2),roi2use_n_bins);
roi2plot_time = linspace(roi2plot(1),roi2plot(2),roi2plot_n_bins);
roi2use_flags = ...
    roi2plot_time >= roi2use(1) & ...
    roi2plot_time <= roi2use(2);

% preallocation
s1_psths = nan(roi2plot_n_bins,n_neurons,n_i);
s2_psths = nan(roi2plot_n_bins,n_neurons,n_i);
post_s2_psths = nan(post_t2_delay,n_neurons,n_choices);

% iterate through neurons
for nn = 1 : n_neurons
    progressreport(nn,n_neurons,'parsing neural data');
    neuron_flags = data.NeuronNumb == flagged_neurons(nn);
    spike_flags = ...
        valid_flags & ...
        neuron_flags;
    
    % iterate through intensities
    for ii = 1 : n_i
        i1_flags = i1 == i_set(ii);
        i2_flags = i2 == i_set(ii);
        s1_spike_flags = ...
            spike_flags & ...
            i1_flags;
        s2_spike_flags = ...
            spike_flags & ...
            i2_flags;
        if sum(s1_spike_flags) == 0 || sum(s2_spike_flags) == 0
            continue;
        end
        
        % fetch T1-aligned spike counts & compute spike rates
        s1_spike_counts = data.FR(s1_spike_flags,:);
        s1_spike_rates = conv2(...
            1,kernel.pdf,s1_spike_counts,'valid')' / psthbin * 1e3;
        s1_n_trials = size(s1_spike_counts,1);
        
        % fetch T2-aligned spike counts & compute spike rates
        s2_spike_counts = data.FR(s2_spike_flags,:);
        s2_spike_rates = conv2(...
            1,kernel.pdf,s2_spike_counts,'valid')' / psthbin * 1e3;
        s2_n_trials = size(s2_spike_counts,1);
        
        % T1-aligned spike rates
        s1_alignment_offset = ...
            pre_init_padding + ...
            pre_t1_delay(s1_spike_flags);
        s1_alignment_flags = ...
            valid_time >= s1_alignment_offset + roi2plot(1) & ...
            valid_time < s1_alignment_offset + t1(s1_spike_flags);
        s1_chunk_flags = ...
            valid_time >= s1_alignment_offset + roi2plot(1) & ...
            valid_time < s1_alignment_offset + roi2plot(2);
        s1_spkrates = s1_spike_rates;
        s1_spkrates(~s1_alignment_flags') = nan;
        s1_spkrates = reshape(...
            s1_spkrates(s1_chunk_flags'),...
            [roi2plot_n_bins,s1_n_trials])';
        
        % T2-aligned spike rates
        s2_alignment = ...
            pre_init_padding + ...
            pre_t1_delay(s2_spike_flags) + ...
            t1(s2_spike_flags) + ...
            isi;
        s2_alignment_flags = ...
            valid_time >= s2_alignment + roi2plot(1) & ...
            valid_time < s2_alignment + t2(s2_spike_flags);
        s2_chunk_flags = ...
            valid_time >= s2_alignment + roi2plot(1) & ...
            valid_time < s2_alignment + roi2plot(2);
        s2_spkrates = s2_spike_rates;
        s2_spkrates(~s2_alignment_flags') = nan;
        s2_spkrates = reshape(...
            s2_spkrates(s2_chunk_flags'),...
            [roi2plot_n_bins,s2_n_trials])';
        
        % compute mean spike density functions
        s1_psths(:,nn,ii) = nanmean(s1_spkrates,1);
        s2_psths(:,nn,ii) = nanmean(s2_spkrates,1);
    end
    
    % iterate through choices
    for ii = 1 : n_choices
        choice_flags = choices == choice_set(ii);
        post_s2_spike_flags = ...
            spike_flags & ...
            choice_flags;
        if sum(post_s2_spike_flags) == 0
            continue;
        end
        
        % fetch post T2-aligned spike counts & compute spike rates
        post_s2_spike_counts = data.FR(post_s2_spike_flags,:);
        post_s2_spike_rates = conv2(...
            1,kernel.pdf,post_s2_spike_counts,'valid')' / psthbin * 1e3;
        post_s2_n_trials = size(post_s2_spike_counts,1);
        
        % post T2 delay-aligned spike rates
        post_s2_alignment = ...
            pre_init_padding + ...
            pre_t1_delay(post_s2_spike_flags) + ...
            t1(post_s2_spike_flags) + ...
            isi + ...
            t2(post_s2_spike_flags);
        post_s2_alignment_flags = ...
            valid_time >= post_s2_alignment & ...
            valid_time < post_s2_alignment + post_t2_delay;
        post_s2_chunk_flags = post_s2_alignment_flags;
        post_s2_spkrates = post_s2_spike_rates;
        post_s2_spkrates(~post_s2_alignment_flags') = nan;
        post_s2_spkrates = reshape(...
            post_s2_spkrates(post_s2_chunk_flags'),...
            [post_t2_delay,post_s2_n_trials])';
        
        % compute mean spike density functions
        post_s2_psths(:,nn,ii) = nanmean(post_s2_spkrates,1);
    end
end

% nan handling
% s1_psths(isnan(s1_psths)) = 0;
% s2_psths(isnan(s2_psths)) = 0;
% post_s2_psths(isnan(post_s2_psths)) = 0;

%% normalization

% z-score T1-aligned spike density functions
s1_mus = nanmean(s1_psths,[1,3]);
s1_sigs = nanstd(s1_psths,0,[1,3]);
s1_zpsths = (s1_psths - s1_mus) ./ s1_sigs;

% z-score T2-aligned spike density functions
s2_mus = nanmean(s2_psths,[1,3]);
s2_sigs = nanstd(s2_psths,0,[1,3]);
s2_zpsths = (s2_psths - s2_mus) ./ s2_sigs;

% z-score post T2-aligned spike density functions
post_s2_mus = nanmean(post_s2_psths,[1,3]);
post_s2_sigs = nanstd(post_s2_psths,0,[1,3]);
post_s2_zpsths = (post_s2_psths - post_s2_mus) ./ post_s2_sigs;

%% cross-condition concatenations

% concatenate T1-aligned psths across conditions
s1_concat_all = nan(roi2use_n_bins*n_i,n_neurons);
s1_concat_extr = nan(roi2use_n_bins*(n_i-1),n_neurons);
s1_concat_mode = nan(roi2use_n_bins,n_neurons);
s1_concat_diff = nan(roi2use_n_bins,n_neurons);
for nn = 1 : n_neurons
    nn_zpsths_all = s1_zpsths(roi2use_flags,nn,:);
    nn_zpsths_extr = s1_zpsths(roi2use_flags,nn,(1:n_i)~=i1_mode_idx);
    nn_zpsths_mode = s1_zpsths(roi2use_flags,nn,i1_mode_idx);
    nn_zpsths_diff = s1_zpsths(roi2use_flags,nn,end) - s1_zpsths(roi2use_flags,nn,1);
    s1_concat_all(:,nn) = nn_zpsths_all(:);
    s1_concat_extr(:,nn) = nn_zpsths_extr(:);
    s1_concat_mode(:,nn) = nn_zpsths_mode(:);
    s1_concat_diff(:,nn) = nn_zpsths_diff(:);
end

% concatenate T2-aligned psths across conditions
s2_concat_all = nan(roi2use_n_bins*n_i,n_neurons);
s2_concat_extr = nan(roi2use_n_bins*(n_i-1),n_neurons);
s2_concat_mode = nan(roi2use_n_bins,n_neurons);
s2_concat_diff = nan(roi2use_n_bins,n_neurons);
for nn = 1 : n_neurons
    nn_zpsths_all = s2_zpsths(roi2use_flags,nn,:);
    nn_zpsths_extr = s2_zpsths(roi2use_flags,nn,(1:n_i)~=i2_mode_idx);
    nn_zpsths_mode = s2_zpsths(roi2use_flags,nn,i2_mode_idx);
    nn_zpsths_diff = s2_zpsths(roi2use_flags,nn,end) - s2_zpsths(roi2use_flags,nn,1);
    s2_concat_all(:,nn) = nn_zpsths_all(:);
    s2_concat_extr(:,nn) = nn_zpsths_extr(:);
    s2_concat_mode(:,nn) = nn_zpsths_mode(:);
    s2_concat_diff(:,nn) = nn_zpsths_diff(:);
end

% concatenate post T2-aligned psths across conditions
post_s2_concat_all = nan(post_t2_delay*n_choices,n_neurons);
post_s2_concat_diff = nan(post_t2_delay,n_neurons);
for nn = 1 : n_neurons
    nn_zpsths_all = post_s2_zpsths(:,nn,:);
    nn_zpsths_diff = post_s2_zpsths(:,nn,end) - post_s2_zpsths(:,nn,1);
    post_s2_concat_all(:,nn) = nn_zpsths_all(:);
    post_s2_concat_diff(:,nn) = nn_zpsths_diff(:);
end

%% PCA

% training settings
pca_epoch_str = 's2';
pca_design_str = 'all';
%   'all'   ->  vanilla PCA
%   'extr'  ->  pseudo-demixed PCA
%   'mode'  ->  robust PCA
pca_design = eval([pca_epoch_str,'_concat_',pca_design_str]);
pca_alignment = eval(strrep(pca_epoch_str,'s','t'));
pca_contrast_str = strrep(pca_epoch_str,'s','i');
pca_contrasts = eval(pca_contrast_str);
pca_contrast_set = eval([pca_contrast_str(1:end-1),'_set']);
pca_n_contrasts = numel(pca_contrast_set);

% compute observation weights
weights = ones(size(pca_design,1),1);
for ii = 1 : pca_n_contrasts
    i2_flags = pca_contrasts == pca_contrast_set(ii);
    time_mat = repmat(roi2use(1) + psthbin : psthbin : roi2use(2),...
        sum(i2_flags),1);
    concat_idcs = (1 : roi2use_n_bins) + roi2use_n_bins * (ii - 1);
    weights(concat_idcs) = sum(time_mat <= pca_alignment(i2_flags));
end
weights = repmat(weights,1,size(pca_design,1)/numel(weights));

% PCA
coeff = pca(pca_design,...
    'weights',weights);

% reorder PCs by variance explained
s1_lat = nanvar(s1_concat_all * coeff)';
s2_lat = nanvar(s2_concat_all * coeff)';
post_s2_lat = nanvar(post_s2_concat_all * coeff)';
[~,pca_idcs] = sort(eval([pca_epoch_str,'_lat']),'descend');
coeff = coeff(:,pca_idcs);
s1_exp_pca = s1_lat(pca_idcs) / sum(nanvar(s1_concat_all)) * 100;
s2_exp_pca = s2_lat(pca_idcs) / sum(nanvar(s2_concat_all)) * 100;

% preallocation
s1_score = nan(roi2plot_n_bins,n_neurons,n_i);
s2_score = nan(roi2plot_n_bins,n_neurons,n_i);

% iterate through intensities
for ii = 1 : n_i
    
    % project onto PCs
    s1_score(:,:,ii) = s1_zpsths(:,:,ii) * coeff;
    s2_score(:,:,ii) = s2_zpsths(:,:,ii) * coeff;
end

%% 3D trajectories in PC space (T1-aligned)
fig = figure(figopt,...
    'name',sprintf('pc_trajectories_t1'));
set(gca,...
    axesopt.default,...
    'xtick',0,...
    'ytick',0,...
    'ztick',0);
xlabel(sprintf('PC_{%s} %i\n%.1f%% variance',pca_epoch_str,1,s1_exp_pca(1)),...
    'horizontalalignment','center');
ylabel(sprintf('PC_{%s} %i\n%.1f%% variance',pca_epoch_str,2,s1_exp_pca(2)),...
    'horizontalalignment','center');
zlabel(sprintf('PC_{%s} %i\n%.1f%% variance',pca_epoch_str,3,s1_exp_pca(3)),...
    'horizontalalignment','center');

% iterate through intensities
for ii = 1 : n_i
    
    % plot T1-aligned trajectory
    plot3(s1_score(:,1,ii),...
        s1_score(:,2,ii),...
        s1_score(:,3,ii),...
        'color',i1_clrs(ii,:),...
        'linestyle','-',...
        'linewidth',1.5);
    
    % plot T1-aligned stimulus onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    plot3(s1_score(onset_flags,1,ii),...
        s1_score(onset_flags,2,ii),...
        s1_score(onset_flags,3,ii),...
        'linewidth',1.5,...
        'marker','o',...
        'markersize',5,...
        'markerfacecolor','w',...
        'markeredgecolor',i1_clrs(ii,:));
    
    % iterate through stimuli
    for tt = 1 : n_t
        
        % plot T1-aligned stimulus offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        plot3(s1_score(offset_flags,1,ii),...
            s1_score(offset_flags,2,ii),...
            s1_score(offset_flags,3,ii),...
            'linewidth',1.5,...
            'marker','o',...
            'markersize',6,...
            'markerfacecolor',i1_clrs(ii,:),...
            'markeredgecolor',i1_clrs(ii,:));
    end
end

% update axis
axis tight;
xlim(xlim + [-1,1] * .1 * range(xlim));
ylim(ylim + [-1,1] * .1 * range(ylim));
zlim(zlim + [-1,1] * .1 * range(zlim));
set(gca,...
    'xtick',xlim,...
    'ytick',ylim,...
    'ztick',zlim,...
    'xticklabel',{},...
    'yticklabel',{},...
    'zticklabel',{},...
    'xcolor','k',...
    'ycolor','k',...
    'zcolor','k');

% update axis
angle = 0;
view(angle,0);

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% 3D trajectories in PC space (T2-aligned)
fig = figure(figopt,...
    'name',sprintf('pc_trajectories_t2'));
set(gca,...
    axesopt.default,...
    'xtick',0,...
    'ytick',0,...
    'ztick',0);
xlabel(sprintf('PC_{%s} %i\n%.1f%% variance',pca_epoch_str,1,s2_exp_pca(1)),...
    'horizontalalignment','center');
ylabel(sprintf('PC_{%s} %i\n%.1f%% variance',pca_epoch_str,2,s2_exp_pca(2)),...
    'horizontalalignment','center');
zlabel(sprintf('PC_{%s} %i\n%.1f%% variance',pca_epoch_str,3,s2_exp_pca(3)),...
    'horizontalalignment','center');

% iterate through intensities
for ii = 1 : n_i
    
    % plot T2-aligned trajectory
    plot3(s2_score(:,1,ii),...
        s2_score(:,2,ii),...
        s2_score(:,3,ii),...
        'color',i2_clrs(ii,:),...
        'linestyle','-',...
        'linewidth',1.5);
    
    % plot T2-aligned stimulus onset
    onset_flags = roi2plot_time <= 0 & ...
        [roi2plot_time(2:end),nan] > 0;
    plot3(s2_score(onset_flags,1,ii),...
        s2_score(onset_flags,2,ii),...
        s2_score(onset_flags,3,ii),...
        'linewidth',1.5,...
        'marker','o',...
        'markersize',5,...
        'markerfacecolor','w',...
        'markeredgecolor',i2_clrs(ii,:));
    
    % iterate through stimuli
    for tt = 1 : n_t
        
        % plot T2-aligned stimulus offset
        offset_flags = roi2plot_time < t_set(tt) & ...
            [roi2plot_time(2:end),nan] >= t_set(tt);
        plot3(s2_score(offset_flags,1,ii),...
            s2_score(offset_flags,2,ii),...
            s2_score(offset_flags,3,ii),...
            'linewidth',1.5,...
            'marker','o',...
            'markersize',6,...
            'markerfacecolor',i2_clrs(ii,:),...
            'markeredgecolor',i2_clrs(ii,:));
    end
end

% update axis
axis tight;
xlim(xlim + [-1,1] * .1 * range(xlim));
ylim(ylim + [-1,1] * .1 * range(ylim));
zlim(zlim + [-1,1] * .1 * range(zlim));
set(gca,...
    'xtick',xlim,...
    'ytick',ylim,...
    'ztick',zlim,...
    'xticklabel',{},...
    'yticklabel',{},...
    'zticklabel',{},...
    'xcolor','k',...
    'ycolor','k',...
    'zcolor','k');

% update axis
angle = 0;
view(angle,0);

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% PC projections (T1-aligned)

% figure initialization
fig = figure(figopt,...
    'position',[1.8,41.8,766.4,740.8],...
    'name',sprintf('pc_projections_t1'));
n_pcs2plot = 6;
sps = gobjects(n_pcs2plot,1);
for pc = 1 : n_pcs2plot
    sp_idx = pc * 2 - 1 - (pc > n_pcs2plot / 2) * (n_pcs2plot - 1);
    sps(pc) = subplot(n_pcs2plot/2,2,sp_idx);
    xlabel(sps(pc),'Time since T_1 onset (s)');
    ylabel(sps(pc),sprintf('PC_{%s} %i\n%.1f%% variance',...
        pca_epoch_str,pc,s1_exp_pca(pc)));
end
xxtick = unique([roi2plot';0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
set(sps,...
    axesopt.default,...
    'xlim',roi2plot + [-1,1] * .05 * range(roi2plot),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylimspec','tight',...
    'plotboxaspectratio',[2,1,1]);

% link axes
linkaxes(sps,'x');

% iterate through pcs
for pc = 1 : n_pcs2plot
    
    % graphical object preallocation
    p = gobjects(n_i,1);
    
    % iterate through intensities
    for ii = 1 : n_i
        
        % plot projection
        p(ii) = plot(sps(pc),roi2plot_time,...
            s1_score(:,pc,ii),...
            'color',i1_clrs(ii,:),...
            'linestyle','-',...
            'linewidth',1.5);
        
        % plot projection onset
        onset_flags = roi2plot_time <= 0 & ...
            [roi2plot_time(2:end),nan] > 0;
        plot(sps(pc),roi2plot_time(onset_flags),...
            s1_score(onset_flags,pc,ii),...
            'linewidth',1.5,...
            'marker','o',...
            'markersize',5,...
            'markerfacecolor','w',...
            'markeredgecolor',i1_clrs(ii,:));
        
        % iterate through stimuli
        for tt = 1 : n_t
            
            % plot projection offset
            offset_flags = roi2plot_time < t_set(tt) & ...
                [roi2plot_time(2:end),nan] >= t_set(tt);
            plot(sps(pc),roi2plot_time(offset_flags),...
                s1_score(offset_flags,pc,ii),...
                'linewidth',1.5,...
                'marker','o',...
                'markersize',6,...
                'markerfacecolor',i1_clrs(ii,:),...
                'markeredgecolor','none');
        end
    end
    
    % update axes
    set(sps(pc),...
        'ytick',unique([0,ylim(sps(pc))]),...
        'yticklabel',{'','0',''},...
        'ylim',ylim(sps(pc))+[-1,1]*.1*range(ylim(sps(pc))));
    
    % ui stacking
    uistack(p(:),'bottom');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% PC projections (T2-aligned)

% figure initialization
fig = figure(figopt,...
    'position',[769.8,41.8,766.4,740.8],...
    'name',sprintf('pc_projections_t2'));
n_pcs2plot = 6;
sps = gobjects(n_pcs2plot,1);
for pc = 1 : n_pcs2plot
    sp_idx = pc * 2 - 1 - (pc > n_pcs2plot / 2) * (n_pcs2plot - 1);
    sps(pc) = subplot(n_pcs2plot/2,2,sp_idx);
    xlabel(sps(pc),'Time since T_2 onset (s)');
    ylabel(sps(pc),sprintf('PC_{%s} %i\n%.1f%% variance',...
        pca_epoch_str,pc,s2_exp_pca(pc)));
end
xxtick = unique([roi2plot';0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(xxtick > 0 & xxtick < t_set(end)) = {''};
set(sps,...
    axesopt.default,...
    'xlim',roi2plot + [-1,1] * .05 * range(roi2plot),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylimspec','tight',...
    'plotboxaspectratio',[2,1,1]);

% link axes
linkaxes(sps,'x');

% iterate through pcs
for pc = 1 : n_pcs2plot
    
    % graphical object preallocation
    p = gobjects(n_i,1);
    
    % iterate through intensities
    for ii = 1 : n_i
        
        % plot projection
        p(ii) = plot(sps(pc),roi2plot_time,...
            s2_score(:,pc,ii),...
            'color',i2_clrs(ii,:),...
            'linestyle','-',...
            'linewidth',1.5);
        
        % plot projection onset
        onset_flags = roi2plot_time <= 0 & ...
            [roi2plot_time(2:end),nan] > 0;
        plot(sps(pc),roi2plot_time(onset_flags),...
            s2_score(onset_flags,pc,ii),...
            'linewidth',1.5,...
            'marker','o',...
            'markersize',5,...
            'markerfacecolor','w',...
            'markeredgecolor',i2_clrs(ii,:));
        
        % iterate through stimuli
        for tt = 1 : n_t
            
            % plot projection offset
            offset_flags = roi2plot_time < t_set(tt) & ...
                [roi2plot_time(2:end),nan] >= t_set(tt);
            plot(sps(pc),roi2plot_time(offset_flags),...
                s2_score(offset_flags,pc,ii),...
                'linewidth',1.5,...
                'marker','o',...
                'markersize',6,...
                'markerfacecolor',i2_clrs(ii,:),...
                'markeredgecolor','none');
        end
    end
    
    % update axes
    set(sps(pc),...
        'ytick',unique([0,ylim(sps(pc))]),...
        'yticklabel',{'','0',''},...
        'ylim',ylim(sps(pc))+[-1,1]*.1*range(ylim(sps(pc))));
    
    % ui stacking
    uistack(p(:),'bottom');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end