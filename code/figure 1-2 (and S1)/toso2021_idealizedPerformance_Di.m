%% check 'main.m' has run (and run it if not)
toso2021_maincheck;

%% simulate behavior by an 'idealized' observer
toso2021_idealizedObserver;

%% stimulus settings
stimuli = round(d2 - d1);
stim_set = unique(stimuli(valid_flags));
stim2group_flags = abs(diff(stim_set)) <= range(stim_set) * .01;
if any(stim2group_flags)
    for ii = find(stim2group_flags)'
        stimuli(stimuli == stim_set(ii)) = stim_set(ii + 1);
    end
end
stim_set = unique(stimuli(valid_flags));
n_stimuli = numel(stim_set);
stim_lbl = sprintf('%s - %s (%s)',d2_lbl,d1_lbl,d_units);

%% compute NDD level associated with each stimulus
stim_ndd = nan(n_stimuli,1);

% iterate through stimuli
for ii = 1 : n_stimuli
    if ii <= floor(n_stimuli/2)
        ndd_idx = 1;
    elseif ii == floor(n_stimuli/2) + 1
        ndd_idx = 2;
    else
        ndd_idx = 3;
    end
    stim_ndd(ii) = ndd_set(ndd_idx);
end

%% denominator settings
denominator = round(d2 + d1);
denominator_set = unique(denominator(valid_flags));
denominator_count = numel(denominator_set);
denominator_lbl = sprintf('%s + %s (%s)',d1_lbl,d2_lbl,d_units);

% normalize denominator range
norm_denominator = (denominator - min(denominator)) / range(denominator);
denominator_normset = unique(norm_denominator(valid_flags));

% denominator-specific axes properties
axesopt.denominator.xlim = ...
    ([denominator_normset(1),denominator_normset(end)] +  [-1,1] * .05);
axesopt.denominator.xtick = denominator_normset;
axesopt.denominator.xticklabel = num2cell(round(denominator_set,2));
ticks2delete = ...
    ~ismember(axesopt.denominator.xtick,...
    [min(axesopt.denominator.xtick),max(axesopt.denominator.xtick)]);
axesopt.denominator.xticklabel(ticks2delete) = {''};

%% NDD colors
ndd_clrs = flipud(gray(n_ndd));

%% construct psychophysical triples

% normalize stimulus range
norm_stimuli = (stimuli - min(stimuli)) / range(stimuli);
normstim_set = unique(norm_stimuli(valid_flags));

% preallocation
psy = struct();

% iterate through subjects
for ss = 1 : n_subjects
    subject_flags = subjects == subject_set(ss);
    
    % iterate through stimuli
    for ii = 1 : n_stimuli
        stim_flags = stimuli == stim_set(ii);
        trial_flags = ...
            valid_flags & ...
            unique_flags & ...
            subject_flags & ...
            stim_flags;
        
        % subject's psychophysical triple
        psy(ss).x(ii,1) = normstim_set(ii);
        psy(ss).y(ii,1) = sum(idealized_choice(trial_flags));
        psy(ss).n(ii,1) = sum(trial_flags);
        psy(ss).err(ii,1) = ...
            std(idealized_choice(trial_flags)) / sqrt(sum(trial_flags));
    end
end

% pooled psychophysical triple
bigpsy.x = normstim_set;
bigpsy.y = sum(horzcat(psy.y),2);
bigpsy.n = sum(horzcat(psy.n),2);
bigpsy.err = zeros(n_stimuli,1);

%% compute stimulus- & NDD-split performance

% preallocation
stim_subj_perf = nan(n_stimuli,n_subjects);
stim_perf = nan(n_stimuli,1);
denominator_subj_perf = nan(denominator_count,n_subjects);
denominator_perf = nan(denominator_count,1);
ndd_subj_perf = nan(n_ndd,n_subjects);
ndd_perf = nan(n_ndd,1);

% iterate through NDD levels
for ii = 1 : n_ndd
    ndd_flags = ...
        valid_flags & ...
        unique_flags & ...
        ndd == ndd_set(ii);
    
    % iterate through subjects
    for jj = 1 : n_subjects
        subject_flags = ...
            ndd_flags & ...
            subjects == subject_set(jj);
        
        % compute performance
        ndd_subj_perf(ii,jj) = ...
            sum(idealized_choice(subject_flags)) / sum(subject_flags);
    end
    
    % compute performance
    ndd_perf(ii) = ...
        sum(idealized_choice(ndd_flags)) / sum(ndd_flags);
end


% iterate through stimuli
for ii = 1 : n_stimuli
    stim_flags = ...
        valid_flags & ...
        stimuli == stim_set(ii);
    
    % iterate through subjects
    for jj = 1 : n_subjects
        subject_flags = ...
            stim_flags & ...
            subjects == subject_set(jj);
        
        % compute performance
        stim_subj_perf(ii,jj) = ...
            nansum(idealized_choice(subject_flags)) / nansum(subject_flags);
    end
    
    % compute performance
    stim_perf(ii) = ...
        sum(idealized_choice(stim_flags)) / sum(stim_flags);
end

% iterate through stimuli
for ii = 1 : denominator_count
    denominator_flags = ...
        valid_flags & ...
        denominator == denominator_set(ii);
    
    % iterate through subjects
    for jj = 1 : n_subjects
        subject_flags = ...
            denominator_flags & ...
            subjects == subject_set(jj);
        
        % compute performance
        denominator_subj_perf(ii,jj) = ...
            nansum(idealized_choice(subject_flags)) / nansum(subject_flags);
    end
    
    % compute performance
    denominator_perf(ii) = ...
        sum(idealized_choice(denominator_flags)) / sum(denominator_flags);
end

%% plot phychometric function

% stimulus-specific axes properties
axesopt.stimulus.xlim = ...
    ([normstim_set(1),normstim_set(end)] +  [-1,1] * .05);
axesopt.stimulus.xtick = normstim_set;
axesopt.stimulus.xticklabel = num2cell(round(stim_set,2));
ticks2delete = ...
    ~ismember(axesopt.stimulus.xtick,...
    [min(axesopt.stimulus.xtick),max(axesopt.stimulus.xtick)]);
axesopt.stimulus.xticklabel(ticks2delete) = {''};

% figure initialization
fig = figure(figopt,...
    'name',sprintf('idealized_performance_Di'));

% axes initialization
axes(...
    axesopt.default,...
    axesopt.stimulus,...
    axesopt.psycurve);
xlabel(stim_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl));

% reference lines
plot([1,1]*median(normstim_set),ylim,':k');
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .0 * range(xlim);
    
    % NDD-crossing line
    plot(normstim_set+offset,stim_subj_perf(:,ss),...
        'color',subject_clr,...
        'linestyle','--',...
        'linewidth',1.5);
    
    % iterate through NDD levels
    for kk = 1 : n_ndd
        ndd_flags = stim_ndd == ndd_set(kk);
        
        % plot subject's performance
        plot(normstim_set(ndd_flags)+offset,...
            stim_subj_perf(ndd_flags,ss),...
            'color',subject_clr,...
            'marker','o',...
            'markersize',6.5,...
            'markeredgecolor',subject_clr,...
            'markerfacecolor',subject_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
end

% NDD-crossing line
plot(normstim_set,stim_perf,...
    'color','k',...
    'linestyle','--',...
    'linewidth',1.5);

% iterate through NDD levels
for kk = 1 : n_ndd
    ndd_flags = stim_ndd == ndd_set(kk);
    
    % plot pooled performance
    plot(normstim_set(ndd_flags),...
        stim_perf(ndd_flags),...
        'color','k',...
        'marker','o',...
        'markersize',8.5,...
        'markeredgecolor','k',...
        'markerfacecolor',ndd_clrs(kk,:),...
        'linestyle','-',...
        'linewidth',1.5);
end

% inset with denominator performance
axes(...
    axesopt.default,...
    axesopt.inset.se,...
    axesopt.denominator,...
    axesopt.psycurve,...
    'yticklabel',{'0','','','0.75','1'});
xlabel(denominator_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl),...
    'rotation',-90,...
    'verticalalignment','bottom');

% reference lines
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .0 * range(xlim);

    % iterate through denominator levels
    for kk = 1 : denominator_count
        
        % plot subject's performance
        plot(denominator_normset(kk)+offset,...
            denominator_subj_perf(kk,ss),...
            'color',subject_clr,...
            'marker','o',...
            'markersize',8.5-4.5,...
            'markeredgecolor',subject_clr,...
            'markerfacecolor',subject_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
end

% plot pooled performance
plot(denominator_normset,...
    denominator_perf,...
    'color','k',...
    'marker','o',...
    'markersize',8.5-2.5,...
    'markeredgecolor','k',...
    'markerfacecolor','k',...
    'linestyle','-',...
    'linewidth',1.5);

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% plot performance as a function of stimulus & NDD

% figure initialization
fig = figure(figopt,...
    'position',[489 343 560 412.5],...
    'name',sprintf('idealized_performance_%s_distros',ndd_lbl));

% axes initialization
axes(...
    axesopt.default,...
    'plotboxaspectratio',[1,2.25,1],...
    'xlim',[min(ndd_set),max(ndd_set)]+[-1,1]*1/2*range(ndd_set),...
    'xtick',ndd_set,...
    'ylim',axesopt.psycurve.ylim,...
    'ytick',axesopt.psycurve.ytick,...
    'yticklabel',axesopt.psycurve.yticklabel);
xlabel(ndd_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl));

% reference lines
plot([1,1]*0,ylim,':k');
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .025 * range(xlim);
    
    % NDD-crossing line
    plot(ndd_set+offset,...
        psy(ss).y(floor(n_stimuli/2)+(0:n_ndd-1))./...
        psy(ss).n(floor(n_stimuli/2)+(0:n_ndd-1)),...
        'color',subject_clr,...
        'linestyle','--',...
        'linewidth',1.5);
    
    % iterate through NDD levels
    for kk = 1 : n_ndd
        ndd_flags = stim_ndd == ndd_set(kk);
        
        % plot subject's performance
        plot(stim_ndd(ndd_flags)+offset,...
            stim_subj_perf(ndd_flags,ss),...
            'color',subject_clr,...
            'marker','o',...
            'markersize',6.5,...
            'markeredgecolor',subject_clr,...
            'markerfacecolor',subject_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
end

% NDD-crossing line
plot(ndd_set,...
    bigpsy.y(floor(n_stimuli/2)+(0:n_ndd-1))./...
    bigpsy.n(floor(n_stimuli/2)+(0:n_ndd-1)),...
    'color','k',...
    'linestyle','--',...
    'linewidth',1.5);

% iterate through NDD levels
for kk = 1 : n_ndd
    ndd_flags = stim_ndd == ndd_set(kk);
    
    % plot average performance
    plot(stim_ndd(ndd_flags),...
        bigpsy.y(ndd_flags)./bigpsy.n(ndd_flags),...
        'color','k',...
        'marker','o',...
        'markersize',8.5,...
        'markeredgecolor','k',...
        'markerfacecolor',ndd_clrs(kk,:),...
        'linestyle','-',...
        'linewidth',1.5);
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% plot performance as a function of NDD

% figure initialization
fig = figure(figopt,...
    'position',[489 343 560 412.5],...
    'name',sprintf('idealized_performance_%s_averages',ndd_lbl));

% axes initialization
axes(...
    axesopt.default,...
    'plotboxaspectratio',[1,2.25,1],...
    'xlim',[min(ndd_set),max(ndd_set)]+[-1,1]*1/2*range(ndd_set),...
    'xtick',ndd_set,...
    'ylim',axesopt.psycurve.ylim,...
    'ytick',axesopt.psycurve.ytick,...
    'yticklabel',axesopt.psycurve.yticklabel);
xlabel(ndd_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl));

% reference lines
plot([1,1]*0,ylim,':k');
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .025 * range(xlim);
    
    % plot subject's average performance
    plot(ndd_set+offset,ndd_subj_perf(:,ss),...
        'color',subject_clr,...
        'marker','s',...
        'markersize',7.65,...
        'markeredgecolor',subject_clr,...
        'markerfacecolor',subject_clr,...
        'linestyle','-',...
        'linewidth',1.5);
end

% plot pooled performance
plot(ndd_set,ndd_perf,...
    'color','k',...
    'markeredgecolor','k',...
    'markerfacecolor','k',...
    'linestyle','-',...
    'linewidth',1.5);

% iterate through NDD levels
for kk = 1 : n_ndd
    
    % plot pooled performance
    plot(ndd_set(kk),ndd_perf(kk),...
        'color','k',...
        'marker','s',...
        'markersize',12,...
        'markeredgecolor','k',...
        'markerfacecolor',ndd_clrs(kk,:),...
        'linestyle','-',...
        'linewidth',1.5);
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end