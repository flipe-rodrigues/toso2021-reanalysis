%% check 'main.m' has run (and run it if not)
toso2021_maincheck;

%% numerator settings
numerator = round(s2 - s1);
numerator_set = unique(numerator(valid_flags));
numerator2group_flags = abs(diff(numerator_set)) <= range(numerator_set) * .01;
if any(numerator2group_flags)
    for ii = find(numerator2group_flags)'
        numerator(numerator == numerator_set(ii)) = numerator_set(ii + 1);
    end
end
numerator_set = unique(numerator(valid_flags));
numerator_count = numel(numerator_set);
numerator_lbl = sprintf('%s - %s (%s)',s2_lbl,s1_lbl,s_units);

% normalize numerator range
norm_numerator = (numerator - min(numerator)) / range(numerator);
numerator_normset = unique(norm_numerator(valid_flags));

% numerator-specific axes properties
axesopt.numerator.xlim = ...
    ([numerator_normset(1),numerator_normset(end)] +  [-1,1] * .05);
axesopt.numerator.xtick = numerator_normset;
axesopt.numerator.xticklabel = num2cell(round(numerator_set,2));
ticks2delete = ...
    ~ismember(axesopt.numerator.xtick,...
    [min(axesopt.numerator.xtick),max(axesopt.numerator.xtick)]);
axesopt.numerator.xticklabel(ticks2delete) = {''};

% compute NSD level associated with each numerator value
nsd_by_numerator = nan(numerator_count,1);

% iterate through stimuli
for ii = 1 : numerator_count
    if ii <= floor(numerator_count/2)
        nsd_idx = 1;
    else
        nsd_idx = 2;
    end
    nsd_by_numerator(ii) = nsd_set(nsd_idx);
end

%% denominator settings
denominator = round(s2 + s1);
denominator_set = unique(denominator(valid_flags));
denominator_count = numel(denominator_set);
denominator_lbl = sprintf('%s + %s (%s)',s1_lbl,s2_lbl,s_units);

% normalize denominator range
norm_denominator = (denominator - min(denominator)) / range(denominator);
denominator_normset = unique(norm_denominator(valid_flags));

% denominator-specific axes properties
axesopt.denominator.xlim = ...
    ([denominator_normset(1),denominator_normset(end)] +  [-1,1] * .05);
axesopt.denominator.xtick = denominator_normset;
axesopt.denominator.xticklabel = num2cell(round(denominator_set,2));
ticks2delete = ...
    ~ismember(axesopt.denominator.xtick,...
    [min(axesopt.denominator.xtick),max(axesopt.denominator.xtick)]);
axesopt.denominator.xticklabel(ticks2delete) = {''};

%% NSD colors
nsd_clrs = flipud(gray(n_nsd));

%% construct psychophysical triples

% preallocation
psycurves = struct();

% iterate through subjects
for ss = 1 : n_subjects
    subject_flags = subjects == subject_set(ss);
    
    % iterate through stimuli
    for ii = 1 : numerator_count
        numerator_flags = numerator == numerator_set(ii);
        trial_flags = ...
            valid_flags & ...
            unique_flags & ...
            subject_flags & ...
            numerator_flags;
        
        % subject's psychophysical triple
        psycurves(ss).x(ii,1) = numerator_normset(ii);
        psycurves(ss).y(ii,1) = sum(choice(trial_flags));
        psycurves(ss).n(ii,1) = sum(trial_flags);
        psycurves(ss).err(ii,1) = ...
            std(choice(trial_flags)) / sqrt(sum(trial_flags));
    end
end

% pooled psychophysical triple
bigpsy.x = numerator_normset;
bigpsy.y = sum(horzcat(psycurves.y),2);
bigpsy.n = sum(horzcat(psycurves.n),2);
bigpsy.err = zeros(numerator_count,1);

%% fit psychometric function

% psychometric fit settings
psyopt.fit = struct();
psyopt.fit.expType = 'YesNo';
psyopt.fit.sigmoidName = 'logistic';
psyopt.fit.estimateType = 'MAP';
psyopt.fit.confP = [.95,.9,.68];
psyopt.fit.borders = [0,1;0,1;0,.25;0,.25;0,0];
psyopt.fit.fixedPars = [nan,nan,nan,nan,0];
psyopt.fit.stepN = [100,100,20,20,20];

% iterate through subjects
for ss = 1 : n_subjects
    
    % fit subject's psychometric curve
    psycurves(ss).fit = ...
        psignifit([psycurves(ss).x,psycurves(ss).y,psycurves(ss).n],psyopt.fit);
end

% fit pooled psychometric curve
bigpsy.fit = psignifit([bigpsy.x,bigpsy.y,bigpsy.n],psyopt.fit);

%% compute stimulus- & NSD-split performance

% preallocation
numerator_subj_perf = nan(numerator_count,n_subjects);
numerator_perf = nan(numerator_count,1);
denominator_subj_perf = nan(denominator_count,n_subjects);
denominator_perf = nan(denominator_count,1);
nsd_subj_perf = nan(n_nsd,n_subjects);
nsd_perf = nan(n_nsd,1);

% iterate through NSD levels
for ii = 1 : n_nsd
    nsd_flags = ...
        valid_flags & ...
        unique_flags & ...
        nsd == nsd_set(ii);
    
    % iterate through subjects
    for jj = 1 : n_subjects
        subject_flags = ...
            nsd_flags & ...
            subjects == subject_set(jj);
        
        % compute performance
        nsd_subj_perf(ii,jj) = ...
            sum(choice(subject_flags)) / sum(subject_flags);
    end
    
    % compute performance
    nsd_perf(ii) = ...
        sum(choice(nsd_flags)) / sum(nsd_flags);
end

% iterate through stimuli
for ii = 1 : numerator_count
    numerator_flags = ...
        valid_flags & ...
        numerator == numerator_set(ii);
    
    % iterate through subjects
    for jj = 1 : n_subjects
        subject_flags = ...
            numerator_flags & ...
            subjects == subject_set(jj);
        
        % compute performance
        numerator_subj_perf(ii,jj) = ...
            nansum(choice(subject_flags)) / nansum(subject_flags);
    end
    
    % compute performance
    numerator_perf(ii) = ...
        sum(choice(numerator_flags)) / sum(numerator_flags);
end

% iterate through stimuli
for ii = 1 : denominator_count
    denominator_flags = ...
        valid_flags & ...
        denominator == denominator_set(ii);
    
    % iterate through subjects
    for jj = 1 : n_subjects
        subject_flags = ...
            denominator_flags & ...
            subjects == subject_set(jj);
        
        % compute performance
        denominator_subj_perf(ii,jj) = ...
            nansum(choice(subject_flags)) / nansum(subject_flags);
    end
    
    % compute performance
    denominator_perf(ii) = ...
        sum(choice(denominator_flags)) / sum(denominator_flags);
end

%% plot phychometric function

% figure initialization
fig = figure(figopt,...
    'name',sprintf('performance_Si'));

% axes initialization
axes(...
    axesopt.default,...
    axesopt.numerator,...
    axesopt.psycurve);
xlabel(numerator_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl));

% reference lines
plot([1,1]*median(numerator_normset),ylim,':k');
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .0 * range(xlim);
    
    % NSD-crossing line
    plot(numerator_normset+offset,numerator_subj_perf(:,ss),...
        'color',subject_clr,...
        'linestyle','--',...
        'linewidth',1.5);
    
    % iterate through NSD levels
    for kk = 1 : n_nsd
        nsd_flags = nsd_by_numerator == nsd_set(kk);
        
        % plot subject's performance
        plot(numerator_normset(nsd_flags)+offset,...
            numerator_subj_perf(nsd_flags,ss),...
            'color',subject_clr,...
            'marker','o',...
            'markersize',6.5,...
            'markeredgecolor',subject_clr,...
            'markerfacecolor',subject_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
end

% NSD-crossing line
plot(numerator_normset,numerator_perf,...
    'color','k',...
    'linestyle','--',...
    'linewidth',1.5);

% iterate through NSD levels
for kk = 1 : n_nsd
    nsd_flags = nsd_by_numerator == nsd_set(kk);
    
    % plot pooled performance
    plot(numerator_normset(nsd_flags),...
        numerator_perf(nsd_flags),...
        'color','k',...
        'marker','o',...
        'markersize',8.5,...
        'markeredgecolor','k',...
        'markerfacecolor',nsd_clrs(kk,:),...
        'linestyle','-',...
        'linewidth',1.5);
end

% inset with denominator performance
axes(...
    axesopt.default,...
    axesopt.inset.se,...
    axesopt.denominator,...
    axesopt.psycurve,...
    'yticklabel',{'0','','','0.75','1'});
xlabel(denominator_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl),...
    'rotation',-90,...
    'verticalalignment','bottom');

% reference lines
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .0 * range(xlim);

    % iterate through denominator levels
    for kk = 1 : denominator_count
        
        % plot subject's performance
        plot(denominator_normset(kk)+offset,...
            denominator_subj_perf(kk,ss),...
            'color',subject_clr,...
            'marker','o',...
            'markersize',8.5-4.5,...
            'markeredgecolor',subject_clr,...
            'markerfacecolor',subject_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
end

% plot pooled performance
plot(denominator_normset,...
    denominator_perf,...
    'color','k',...
    'marker','o',...
    'markersize',8.5-2.5,...
    'markeredgecolor','k',...
    'markerfacecolor','k',...
    'linestyle','-',...
    'linewidth',1.5);

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% plot performance as a function of stimulus & NSD

% figure initialization
fig = figure(figopt,...
    'position',[489 343 560 412.5],...
    'name',sprintf('performance_%s_distros',nsd_lbl));

% axes initialization
axes(...
    axesopt.default,...
    'plotboxaspectratio',[1,2.25,1],...
    'xlim',[min(nsd_set),max(nsd_set)]+[-1,1]*1/2*range(nsd_set),...
    'xtick',nsd_set,...
    'ylim',axesopt.psycurve.ylim,...
    'ytick',axesopt.psycurve.ytick,...
    'yticklabel',axesopt.psycurve.yticklabel);
xlabel(nsd_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl));

% reference lines
plot([1,1]*0,ylim,':k');
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .025 * range(xlim);
    
    % NSD-crossing line
    plot(nsd_set+offset,...
        psycurves(ss).y(floor(numerator_count/2)+(0:n_nsd-1))./...
        psycurves(ss).n(floor(numerator_count/2)+(0:n_nsd-1)),...
        'color',subject_clr,...
        'linestyle','--',...
        'linewidth',1.5);
    
    % iterate through NSD levels
    for kk = 1 : n_nsd
        nsd_flags = nsd_by_numerator == nsd_set(kk);
        
        % plot subject's performance
        plot(nsd_by_numerator(nsd_flags)+offset,...
            numerator_subj_perf(nsd_flags,ss),...
            'color',subject_clr,...
            'marker','o',...
            'markersize',6.5,...
            'markeredgecolor',subject_clr,...
            'markerfacecolor',subject_clr,...
            'linestyle','-',...
            'linewidth',1.5);
    end
end

% NSD-crossing line
plot(nsd_set,...
    bigpsy.y(floor(numerator_count/2)+(0:n_nsd-1))./...
    bigpsy.n(floor(numerator_count/2)+(0:n_nsd-1)),...
    'color','k',...
    'linestyle','--',...
    'linewidth',1.5);

% iterate through NSD levels
for kk = 1 : n_nsd
    nsd_flags = nsd_by_numerator == nsd_set(kk);
    
    % plot average performance
    plot(nsd_by_numerator(nsd_flags),...
        bigpsy.y(nsd_flags)./bigpsy.n(nsd_flags),...
        'color','k',...
        'marker','o',...
        'markersize',8.5,...
        'markeredgecolor','k',...
        'markerfacecolor',nsd_clrs(kk,:),...
        'linestyle','-',...
        'linewidth',1.5);
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% plot performance as a function of NSD

% figure initialization
fig = figure(figopt,...
    'position',[489 343 560 412.5],...
    'name',sprintf('performance_%s_averages',nsd_lbl));

% axes initialization
axes(...
    axesopt.default,...
    'plotboxaspectratio',[1,2.25,1],...
    'xlim',[min(nsd_set),max(nsd_set)]+[-1,1]*1/2*range(nsd_set),...
    'xtick',nsd_set,...
    'ylim',axesopt.psycurve.ylim,...
    'ytick',axesopt.psycurve.ytick,...
    'yticklabel',axesopt.psycurve.yticklabel);
xlabel(nsd_lbl);
ylabel(sprintf('P(%s > %s)',s2_lbl,s1_lbl));

% reference lines
plot([1,1]*0,ylim,':k');
plot(xlim,[1,1]*.5,':k');

% iterate through subjects
for ss = 1 : n_subjects
    offset = (ss - (n_subjects + 1) / 2) * .025 * range(xlim);
    
    % plot subject's average performance
    plot(nsd_set+offset,nsd_subj_perf(:,ss),...
        'color',subject_clr,...
        'marker','s',...
        'markersize',7.65,...
        'markeredgecolor',subject_clr,...
        'markerfacecolor',subject_clr,...
        'linestyle','-',...
        'linewidth',1.5);
end

% plot pooled performance
plot(nsd_set,nsd_perf,...
    'color','k',...
    'markeredgecolor','k',...
    'markerfacecolor','k',...
    'linestyle','-',...
    'linewidth',1.5);

% iterate through NSD levels
for kk = 1 : n_nsd
    
    % plot pooled performance
    plot(nsd_set(kk),nsd_perf(kk),...
        'color','k',...
        'marker','s',...
        'markersize',12,...
        'markeredgecolor','k',...
        'markerfacecolor',nsd_clrs(kk,:),...
        'linestyle','-',...
        'linewidth',1.5);
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end