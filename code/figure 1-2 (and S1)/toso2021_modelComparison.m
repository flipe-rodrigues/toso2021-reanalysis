%% check 'main.m' has run (and run it if not)
toso2021_maincheck;

%% model comparison settings
models2test = {...
    'none',...
    'm',...
    'w',...
    'lambda',...
    'gamma',...
    'm_w',...
    'm_lambda',...
    'm_gamma',...
    'w_lambda',...
    'w_gamma',...
    'lambda_gamma',...
    'm_w_lambda',...
    'm_w_gamma',...
    'm_lambda_gamma',...
    'w_lambda_gamma',...
    'm_w_lambda_gamma',...
    }';
n_models = numel(models2test);

%% 3. pseudo-code replace dummy data with actual data

% iterate through contrasts
for ii = 1 : n_contrasts
    cond.data(ii).x = psycurves(ii).x;
    cond.data(ii).y = psycurves(ii).y;
    cond.data(ii).n = psycurves(ii).n;
    cond.data(ii).err = psycurves(ii).err;
end
ctrl.data = cond.data(contrast_mode_idx);
cond.data = cond.data((1:n_contrasts)~=contrast_mode_idx);
n_conditions = numel(cond.data);

%% fit psychometric curves (w/ model comparison)

% fit control psychometric curve
psyopt.fit.fixedPars = nan(5,1);
ctrl.psy.hat.fit = psignifit(...
    [ctrl.data.x,ctrl.data.y,ctrl.data.n],psyopt.fit);
ctrl.psy.hat.m = ctrl.psy.hat.fit.Fit(1);
ctrl.psy.hat.w = ctrl.psy.hat.fit.Fit(2);
ctrl.psy.hat.l = ctrl.psy.hat.fit.Fit(3);
ctrl.psy.hat.g = ctrl.psy.hat.fit.Fit(4);

% setup model comparison
fixed_params = array2table([...
    [           nan;            nan;            nan;            nan; 0],...
    [ctrl.psy.hat.m;            nan;            nan;            nan; 0],...
    [           nan; ctrl.psy.hat.w;            nan;            nan; 0],...
    [           nan;            nan; ctrl.psy.hat.l;            nan; 0],...
    [           nan;            nan;            nan; ctrl.psy.hat.g; 0],...
    [ctrl.psy.hat.m; ctrl.psy.hat.w;            nan;            nan; 0],...
    [ctrl.psy.hat.m;            nan; ctrl.psy.hat.l;            nan; 0],...
    [ctrl.psy.hat.m;            nan;            nan; ctrl.psy.hat.g; 0],...
    [           nan; ctrl.psy.hat.w; ctrl.psy.hat.l;            nan; 0],...
    [           nan; ctrl.psy.hat.w;            nan; ctrl.psy.hat.g; 0],...
    [           nan;            nan; ctrl.psy.hat.l; ctrl.psy.hat.g; 0],...
    [ctrl.psy.hat.m; ctrl.psy.hat.w; ctrl.psy.hat.l;            nan; 0],...
    [ctrl.psy.hat.m; ctrl.psy.hat.w;            nan; ctrl.psy.hat.g; 0],...
    [ctrl.psy.hat.m;            nan; ctrl.psy.hat.l; ctrl.psy.hat.g; 0],...
    [           nan; ctrl.psy.hat.w; ctrl.psy.hat.l; ctrl.psy.hat.g; 0],...
    [ctrl.psy.hat.m; ctrl.psy.hat.w; ctrl.psy.hat.l; ctrl.psy.hat.g; 0],...
    ],...
    'variablenames',models2test);

% iterate through conditions
for ii = 1 : n_conditions
    
    % preallocation
    models = cell(n_models,1);
    aic = nan(n_models,1);
    bic = nan(n_models,1);
    
    % iteratre through models
    for jj = 1 : n_models
        
        % fit condition psychometric curve
        psyopt.fit.fixedPars = fixed_params.(models2test{jj});
        models{jj} = psignifit(...
            [cond.data(ii).x,cond.data(ii).y,cond.data(ii).n],psyopt.fit);
        
        % compute AIC & BIC
        logP = models{jj}.logPmax;
        n_params = sum(isnan(psyopt.fit.fixedPars));
        n_obs = sum(cond.data(ii).n);
        aic(jj) = 2 * n_params - 2 * logP;
        bic(jj) = log(n_obs) * n_params - 2 * logP;
    end
    
    % model selection (akaike information criteria)
    [~,aic_idx] = min(aic);
    cond.psy.hat(ii).aic.fit = models{aic_idx};
    cond.psy.hat(ii).aic.m = models{aic_idx}.Fit(1);
    cond.psy.hat(ii).aic.w = models{aic_idx}.Fit(2);
    cond.psy.hat(ii).aic.l = models{aic_idx}.Fit(3);
    cond.psy.hat(ii).aic.g = models{aic_idx}.Fit(4);
    cond.psy.hat(ii).aic.lbl = categorical(...
        models2test(aic_idx),models2test);
    
    % model selection (bayesian information criteria)
    [~,bic_idx] = min(bic);
    cond.psy.hat(ii).bic.fit = models{bic_idx};
    cond.psy.hat(ii).bic.m = models{bic_idx}.Fit(1);
    cond.psy.hat(ii).bic.w = models{bic_idx}.Fit(2);
    cond.psy.hat(ii).bic.l = models{bic_idx}.Fit(3);
    cond.psy.hat(ii).bic.g = models{bic_idx}.Fit(4);
    cond.psy.hat(ii).bic.lbl = categorical(...
        models2test(bic_idx),models2test);
end

%% plot psychometric fits (e.g. session)

% figure & axes initialization
figure(figopt,...
    'name','psychometric_fits');
set(gca,...
    axesopt.default,...
    axesopt.psycurve);

% labels
title('Psychometric fits',...
    'fontsize',14);
xlabel('Stimulus level',...
    'fontsize',12);
ylabel('P(choice)',...
    'fontsize',12);

% chance level
plot(xlim,[1,1]*.5,':k');

% categorical boundary
plot([1,1]*.5,ylim,':k');

% color settings
ctrl.clr = contrast_clrs(contrast_mode_idx,:);
cond.clrs = contrast_clrs((1:n_contrasts)~=contrast_mode_idx,:);

% plot control fit
psyopt.plot.datafaceclr = ctrl.clr;
plotpsy(ctrl.data,ctrl.psy.hat.fit,psyopt.plot);

% iterate through conditions
for ii = 1 : n_conditions
    
    % plot best condition fit (AIC)
    psyopt.plot.datafaceclr = cond.clrs(ii,:);
    plotpsy(cond.data(ii),cond.psy.hat(ii).aic.fit,psyopt.plot);
    text(.05,.95-.1*(ii-1),['AIC: ',char(cond.psy.hat(ii).aic.lbl)],...
        'horizontalalignment','left',...
        'verticalalignment','top',...
        'interpreter','none',...
        'units','normalized',...
        'color',cond.clrs(ii,:),...
        'fontsize',8);
    pause(1);
    
    % plot best condition fit (BIC)
    psyopt.plot.datafaceclr = cond.clrs(ii,:);
    plotpsy(cond.data(ii),cond.psy.hat(ii).bic.fit,psyopt.plot);
    text(.05,.9-.1*(ii-1),['BIC: ',char(cond.psy.hat(ii).bic.lbl)],...
        'horizontalalignment','left',...
        'verticalalignment','top',...
        'interpreter','none',...
        'units','normalized',...
        'color',cond.clrs(ii,:),...
        'fontsize',8);
    pause(1);
end

%% model comparison summary (across sessions)

% figure & axes initialization
figure(figopt,...
    'name','model_comparison_summary',...
    'windowstate','maximized');
sps = gobjects(2,1);
sps(1) = subplot(1,2,1);
sps(2) = subplot(1,2,2);
set(sps,axesopt.default,...
    'xlimmode','auto',...
    'ylimmode','auto',...
    'ycolor','none',...
    'plotboxaspectratio',[2,1,1],...
    'ticklabelinterpreter','none');

% labels
title(sps(1),'AIC',...
    'fontsize',14);
xlabel(sps(1),'Fixed parameters',...
    'fontsize',12);
title(sps(2),'BIC',...
    'fontsize',14);
xlabel(sps(2),'Fixed parameters',...
    'fontsize',12);

% fetch best model labels
cond_fits = cond.psy.hat;
aic_fits = [cond_fits.aic];
bic_fits = [cond_fits.bic];

% plot AIC distro
histogram([aic_fits.lbl],...
    'edgecolor','w',...
    'facecolor','k',...
    'facealpha',1,...
    'linewidth',1,...
    'barwidth',1,...
    'parent',sps(1));

% plot BIC distro
histogram([bic_fits.lbl],...
    'edgecolor','k',...
    'facecolor','w',...
    'facealpha',1,...
    'linewidth',1,...
    'barwidth',1,...
    'parent',sps(2));