%% check 'main.m' has run (and run it if not)
toso2021_maincheck;

%% model comparison settings
models2test = {...
    'none',...
    '$m$',...
    '$w$',...
    '$\lambda$',...
    '$\gamma$',...
    '$m, w$',...
    '$m, \lambda$',...
    '$m, \gamma$',...
    '$w, \lambda$',...
    '$w, \gamma$',...
    '$\lambda, \gamma$',...
    '$m, w, \lambda$',...
    '$m, w, \gamma$',...
    '$m, \lambda, \gamma$',...
    '$w, \lambda, \gamma$',...
    '$m, w, \lambda, \gamma$',...
    }';
% models2test = {...
%     '\bf{none}',...
%     '$\bf{m}$',...
%     '$\bf{w}$',...
%     '$\lambda$',...
%     '$\gamma$',...
%     '$\bf{m}, \bf{w}$',...
%     '$\bf{m}, \lambda$',...
%     '$\bf{m}, \gamma$',...
%     '$\bf{w}, \lambda$',...
%     '$\bf{w}, \gamma$',...
%     '$\lambda, \gamma$',...
%     '$\bf{m}, \bf{w}, \lambda$',...
%     '$\bf{m}, \bf{w}, \gamma$',...
%     '$\bf{m}, \lambda, \gamma$',...
%     '$\bf{w}, \lambda, \gamma$',...
%     '$\bf{m}, \bf{w}, \lambda, \gamma$',...
%     }';
n_models = numel(models2test);

%% stimulus settings
stimuli = s2;

% normalize stimulus range
norm_stimuli = (stimuli - min(stimuli)) / range(stimuli);
normstim_set = unique(norm_stimuli(valid_flags));

%% construct psychophysical triples

% preallocation
all = struct();
ctrl = struct();
cond = struct();

% iterate through subjects
for ss = 1 : n_subjects
    progressreport(ss,n_subjects,'constructing triples');
    subject_flags = subjects == subject_set(ss);
    
    % iterate through contrasts
    for kk = 1 : n_contrasts
        contrast_flags = contrasts == contrast_set(kk);
        
        % iterate through stimuli
        for ii = 1 : n_stimuli
            stimulus_flags = stimuli == stim_set(ii);
            trial_flags = ...
                valid_flags & ...
                unique_flags & ...
                subject_flags & ...
                contrast_flags & ...
                stimulus_flags;
            all.data(ss,kk).x(ii,1) = normstim_set(ii);
            all.data(ss,kk).y(ii,1) = sum(choice(trial_flags));
            all.data(ss,kk).n(ii,1) = sum(trial_flags);
            all.data(ss,kk).err(ii,1) = ...
                std(choice(trial_flags)) / sqrt(sum(trial_flags));
        end
    end
end

% parse reference and test data
ctrl.data = all.data(:,contrast_mode_idx);
cond.data = all.data(:,(1:n_contrasts)~=contrast_mode_idx);
n_conditions = size(cond.data,2);

%% fit psychometric curves (w/ model comparison)

% iterate through subjects
for ss = 1 : n_subjects
    
    % fit control psychometric curve
    psyopt.fit.fixedPars = nan(5,1);
    ctrl.psy(ss,1).hat.fit = psignifit(...
        [ctrl.data(ss).x,ctrl.data(ss).y,ctrl.data(ss).n],psyopt.fit);
    m = ctrl.psy(ss).hat.fit.Fit(1);
    w = ctrl.psy(ss).hat.fit.Fit(2);
    l = ctrl.psy(ss).hat.fit.Fit(3);
    g = ctrl.psy(ss).hat.fit.Fit(4);
    
    % setup model comparison
    fixed_params = array2table([...
        [ nan; nan; nan; nan; 0],...
        [   m; nan; nan; nan; 0],...
        [ nan;   m; nan; nan; 0],...
        [ nan; nan;   l; nan; 0],...
        [ nan; nan; nan;   g; 0],...
        [   m;   m; nan; nan; 0],...
        [   m; nan;   l; nan; 0],...
        [   m; nan; nan;   g; 0],...
        [ nan;   m;   l; nan; 0],...
        [ nan;   m; nan;   g; 0],...
        [ nan; nan;   l;   g; 0],...
        [   m;   m;   l; nan; 0],...
        [   m;   m; nan;   g; 0],...
        [   m; nan;   l;   g; 0],...
        [ nan;   m;   l;   g; 0],...
        [   m;   m;   l;   g; 0],...
        ],...
        'variablenames',models2test);
    
    % iterate through conditions
    for ii = 1 : n_conditions
        progressreport(ii+(ss-1)*n_conditions,n_subjects*n_conditions,...
            'model comparison');
        
        % preallocation
        models = cell(n_models,1);
        aic = nan(n_models,1);
        bic = nan(n_models,1);
        
        % iteratre through models
        for jj = 1 : n_models
            
            % fit condition psychometric curve
            psyopt.fit.fixedPars = fixed_params.(models2test{jj});
            models{jj} = psignifit(...
                [cond.data(ss,ii).x,cond.data(ss,ii).y,cond.data(ss,ii).n],psyopt.fit);
            
            % compute AIC & BIC
            logP = models{jj}.logPmax;
            n_params = sum(isnan(psyopt.fit.fixedPars));
            n_obs = sum(cond.data(ss,ii).n);
            aic(jj) = 2 * n_params - 2 * logP;
            bic(jj) = log(n_obs) * n_params - 2 * logP;
        end
        
        % model selection (akaike information criteria)
        [~,aic_idx] = min(aic);
        cond.psy.hat(ss,ii).aic.fit = models{aic_idx};
        cond.psy.hat(ss,ii).aic.m = models{aic_idx}.Fit(1);
        cond.psy.hat(ss,ii).aic.w = models{aic_idx}.Fit(2);
        cond.psy.hat(ss,ii).aic.l = models{aic_idx}.Fit(3);
        cond.psy.hat(ss,ii).aic.g = models{aic_idx}.Fit(4);
        cond.psy.hat(ss,ii).aic.lbl = categorical(...
            models2test(aic_idx),models2test);
        
        % model selection (bayesian information criteria)
        [~,bic_idx] = min(bic);
        cond.psy.hat(ss,ii).bic.fit = models{bic_idx};
        cond.psy.hat(ss,ii).bic.m = models{bic_idx}.Fit(1);
        cond.psy.hat(ss,ii).bic.w = models{bic_idx}.Fit(2);
        cond.psy.hat(ss,ii).bic.l = models{bic_idx}.Fit(3);
        cond.psy.hat(ss,ii).bic.g = models{bic_idx}.Fit(4);
        cond.psy.hat(ss,ii).bic.lbl = categorical(...
            models2test(bic_idx),models2test);
    end
end

%% plot psychometric fits

% color settings
ctrl.clr = contrast_clrs(contrast_mode_idx,:);
cond.clrs = contrast_clrs((1:n_contrasts)~=contrast_mode_idx,:);

% iterate through subjects
for ss = 1 : n_subjects
    
    % figure & axes initialization
    figure(figopt,...
        'name',sprintf('psychometric_fits_%i',ss));
    set(gca,...
        axesopt.default,...
        axesopt.psycurve);
    
    % chance level
    plot(xlim,[1,1]*.5,':k');
    
    % categorical boundary
    plot([1,1]*.5,ylim,':k');
    
    % labels
    title(sprintf('Psychometric fits (subject %i)',ss),...
        'fontsize',14);
    xlabel('Stimulus level',...
        'fontsize',12);
    ylabel('P(choice)',...
        'fontsize',12);
    
    % plot control fit
    psyopt.plot.datafaceclr = ctrl.clr;
    plotpsy(ctrl.data(ss),ctrl.psy(ss).hat.fit,psyopt.plot);
    
    % iterate through conditions
    for ii = 1 : n_conditions
        
        % plot best condition fit (AIC)
        psyopt.plot.datafaceclr = cond.clrs(ii,:);
        plotpsy(cond.data(ss,ii),cond.psy.hat(ss,ii).aic.fit,psyopt.plot);
        text(.05,.95-.1*(ii-1),['AIC: ',char(cond.psy.hat(ss,ii).aic.lbl)],...
            'horizontalalignment','left',...
            'verticalalignment','top',...
            'interpreter','latex',...
            'units','normalized',...
            'color',cond.clrs(ii,:),...
            'fontsize',10);
        
        % plot best condition fit (BIC)
        psyopt.plot.datafaceclr = cond.clrs(ii,:);
        plotpsy(cond.data(ss,ii),cond.psy.hat(ss,ii).bic.fit,psyopt.plot);
        text(.05,.9-.1*(ii-1),['BIC: ',char(cond.psy.hat(ss,ii).bic.lbl)],...
            'horizontalalignment','left',...
            'verticalalignment','top',...
            'interpreter','latex',...
            'units','normalized',...
            'color',cond.clrs(ii,:),...
            'fontsize',10);
    end
end

%% model comparison summary (across sessions)

% figure & axes initialization
fig = figure(figopt,...
    'name',sprintf('model_comparison_summary_%',contrast_str));

% axes settings
axes(axesopt.default,...
    'ytick',1:n_contrasts-1,...
    'ylimspec','tight',...
    'plotboxaspectratio',[2,1,1],...
    'ticklabelinterpreter','latex');

% labels
title('Model comparison');
xlabel('Fixed parameters');
ylabel('Best model count');

% fetch best model labels
cond_fits = cond.psy.hat;
aic_fits = [cond_fits.aic];
bic_fits = [cond_fits.bic];

% plot AIC distro
histogram([aic_fits.lbl],...
    'edgecolor','k',...
    'facecolor','k',...
    'facealpha',1,...
    'linewidth',1.5,...
    'barwidth',1);

% plot BIC distro
histogram([bic_fits.lbl],...
    'edgecolor','k',...
    'facecolor','w',...
    'facealpha',1,...
    'linewidth',1.5,...
    'barwidth',1);

% legend
legend({'AIC','BIC'},...
    'box','off');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% model comparison summary (across sessions)

% figure & axes initialization
fig = figure(figopt,...
    'name',sprintf('model_comparison_summary_%',contrast_str),...
    'windowstate','maximized');
sps = gobjects(2,1);
sps(1) = subplot(1,2,1);
sps(2) = subplot(1,2,2);
set(sps,axesopt.default,...
    'xlimmode','auto',...
    'ylimspec','tight',...
    'ycolor','none',...
    'plotboxaspectratio',[2,1,1],...
    'ticklabelinterpreter','latex');

% labels
title(sps(1),'AIC',...
    'fontsize',14);
xlabel(sps(1),'Fixed parameters',...
    'fontsize',12);
title(sps(2),'BIC',...
    'fontsize',14);
xlabel(sps(2),'Fixed parameters',...
    'fontsize',12);

% fetch best model labels
cond_fits = cond.psy.hat;
aic_fits = [cond_fits.aic];
bic_fits = [cond_fits.bic];

% plot AIC distro
histogram([aic_fits.lbl],...
    'edgecolor','w',...
    'facecolor','k',...
    'facealpha',1,...
    'linewidth',1,...
    'barwidth',1,...
    'parent',sps(1));

% plot BIC distro
histogram([bic_fits.lbl],...
    'edgecolor','k',...
    'facecolor','w',...
    'facealpha',1,...
    'linewidth',1,...
    'barwidth',1,...
    'parent',sps(2));

% axes linkage
linkaxes(sps,'y');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end