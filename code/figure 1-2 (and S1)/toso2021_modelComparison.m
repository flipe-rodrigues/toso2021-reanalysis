%% check 'main.m' has run (and run it if not)
toso2021_maincheck;

%% model comparison settings
models2test = {...
    'none',...
    '$m$',...
    '$w$',...
    '$\lambda$',...
    '$\gamma$',...
    '$m, w$',...
    '$m, \lambda$',...
    '$m, \gamma$',...
    '$w, \lambda$',...
    '$w, \gamma$',...
    '$\lambda, \gamma$',...
    '$m, w, \lambda$',...
    '$m, w, \gamma$',...
    '$m, \lambda, \gamma$',...
    '$w, \lambda, \gamma$',...
    '$m, w, \lambda, \gamma$',...
    }';
n_models = numel(models2test);
model_idcs = 1 : n_models;

%% stimulus settings
stimuli = s2;

% normalize stimulus range
norm_stimuli = (stimuli - min(stimuli)) / range(stimuli);
normstim_set = unique(norm_stimuli(valid_flags));

%% construct psychophysical triples

% preallocation
all = struct();
ctrl = struct();
cond = struct();

% iterate through subjects
for ss = 1 : n_subjects
    progressreport(ss,n_subjects,'constructing triples');
    subject_flags = subjects == subject_set(ss);
    
    % iterate through contrasts
    for kk = 1 : n_contrasts
        contrast_flags = contrasts == contrast_set(kk);
        
        % iterate through stimuli
        for ii = 1 : n_stimuli
            stimulus_flags = stimuli == stim_set(ii);
            trial_flags = ...
                valid_flags & ...
                unique_flags & ...
                subject_flags & ...
                contrast_flags & ...
                stimulus_flags;
            all.data(ss,kk).x(ii,1) = normstim_set(ii);
            all.data(ss,kk).y(ii,1) = sum(choice(trial_flags));
            all.data(ss,kk).n(ii,1) = sum(trial_flags);
            all.data(ss,kk).err(ii,1) = ...
                std(choice(trial_flags)) / sqrt(sum(trial_flags));
        end
    end
end

% parse reference and test data
ctrl.data = all.data(:,contrast_mode_idx);
cond.data = all.data(:,(1:n_contrasts)~=contrast_mode_idx);
n_conditions = size(cond.data,2);

%% fit psychometric curves (w/ model comparison)

% iterate through subjects
for ss = 1 : n_subjects
    
    % fit control psychometric curve
    psyopt.fit.fixedPars = nan(5,1);
    ctrl.psy(ss,1).hat.fit = psignifit(...
        [ctrl.data(ss).x,ctrl.data(ss).y,ctrl.data(ss).n],psyopt.fit);
    m = ctrl.psy(ss).hat.fit.Fit(1);
    w = ctrl.psy(ss).hat.fit.Fit(2);
    l = ctrl.psy(ss).hat.fit.Fit(3);
    g = ctrl.psy(ss).hat.fit.Fit(4);
    
    % setup model comparison
    fixed_params = array2table([...
        [ nan; nan; nan; nan; 0],...
        [   m; nan; nan; nan; 0],...
        [ nan;   m; nan; nan; 0],...
        [ nan; nan;   l; nan; 0],...
        [ nan; nan; nan;   g; 0],...
        [   m;   m; nan; nan; 0],...
        [   m; nan;   l; nan; 0],...
        [   m; nan; nan;   g; 0],...
        [ nan;   m;   l; nan; 0],...
        [ nan;   m; nan;   g; 0],...
        [ nan; nan;   l;   g; 0],...
        [   m;   m;   l; nan; 0],...
        [   m;   m; nan;   g; 0],...
        [   m; nan;   l;   g; 0],...
        [ nan;   m;   l;   g; 0],...
        [   m;   m;   l;   g; 0],...
        ],...
        'variablenames',models2test);
    
    % iterate through conditions
    for ii = 1 : n_conditions
        progressreport(ii+(ss-1)*n_conditions,n_subjects*n_conditions,...
            'model comparison');
        
        % preallocation
        models = cell(n_models,1);
        aic = nan(n_models,1);
        bic = nan(n_models,1);
        
        % iteratre through models
        for jj = model_idcs
            
            % fit condition psychometric curve
            psyopt.fit.fixedPars = fixed_params.(models2test{jj});
            models{jj} = psignifit(...
                [cond.data(ss,ii).x,cond.data(ss,ii).y,cond.data(ss,ii).n],psyopt.fit);
            
            % compute AIC & BIC
            logP = models{jj}.logPmax;
            n_params = sum(isnan(psyopt.fit.fixedPars));
            n_obs = sum(cond.data(ss,ii).n);
            aic(jj) = 2 * n_params - 2 * logP;
            bic(jj) = log(n_obs) * n_params - 2 * logP;
        end
        
        % store unconstrained model
        cond.psy(ss,ii).hat.fit = models{1};
        
        % model selection (akaike information criteria)
        [~,aic_idx] = min(aic);
        cond.psy(ss,ii).hat.aic.fit = models{aic_idx};
        cond.psy(ss,ii).hat.aic.m = models{aic_idx}.Fit(1);
        cond.psy(ss,ii).hat.aic.w = models{aic_idx}.Fit(2);
        cond.psy(ss,ii).hat.aic.l = models{aic_idx}.Fit(3);
        cond.psy(ss,ii).hat.aic.g = models{aic_idx}.Fit(4);
        cond.psy(ss,ii).hat.aic.vals = aic;
        cond.psy(ss,ii).hat.aic.idx = aic_idx;
        cond.psy(ss,ii).hat.aic.lbl = categorical(...
            models2test(aic_idx),models2test);
        
        % model selection (bayesian information criteria)
        [~,bic_idx] = min(bic);
        cond.psy(ss,ii).hat.bic.fit = models{bic_idx};
        cond.psy(ss,ii).hat.bic.m = models{bic_idx}.Fit(1);
        cond.psy(ss,ii).hat.bic.w = models{bic_idx}.Fit(2);
        cond.psy(ss,ii).hat.bic.l = models{bic_idx}.Fit(3);
        cond.psy(ss,ii).hat.bic.g = models{bic_idx}.Fit(4);
        cond.psy(ss,ii).hat.bic.vals = bic;
        cond.psy(ss,ii).hat.bic.idx = bic_idx;
        cond.psy(ss,ii).hat.bic.lbl = categorical(...
            models2test(bic_idx),models2test);
    end
end

%% plot psychometric fits

% color settings
ctrl.clr = contrast_clrs(contrast_mode_idx,:);
cond.clrs = contrast_clrs((1:n_contrasts)~=contrast_mode_idx,:);

% iterate through subjects
for ss = 1 : n_subjects
    
    % figure & axes initialization
    figure(figopt,...
        'name',sprintf('psychometric_fits_%i',ss));
    set(gca,...
        axesopt.default,...
        axesopt.psycurve);
    
    % chance level
    plot(xlim,[1,1]*.5,':k');
    
    % categorical boundary
    plot([1,1]*.5,ylim,':k');
    
    % labels
    title(sprintf('Psychometric fits (subject %i)',ss),...
        'fontsize',14);
    xlabel('Stimulus level',...
        'fontsize',12);
    ylabel('P(choice)',...
        'fontsize',12);
    
    % plot control fit
    psyopt.plot.datafaceclr = ctrl.clr;
    plotpsy(ctrl.data(ss),ctrl.psy(ss).hat.fit,psyopt.plot);
    
    % iterate through conditions
    for ii = 1 : n_conditions
        
        % plot best condition fit (AIC)
        psyopt.plot.datafaceclr = cond.clrs(ii,:);
        plotpsy(cond.data(ss,ii),cond.psy(ss,ii).hat.aic.fit,psyopt.plot);
        text(.05,.95-.1*(ii-1),['AIC: ',char(cond.psy(ss,ii).hat.aic.lbl)],...
            'horizontalalignment','left',...
            'verticalalignment','top',...
            'interpreter','latex',...
            'units','normalized',...
            'color',cond.clrs(ii,:),...
            'fontsize',10);
        
        % plot best condition fit (BIC)
        psyopt.plot.datafaceclr = cond.clrs(ii,:);
        plotpsy(cond.data(ss,ii),cond.psy(ss,ii).hat.bic.fit,psyopt.plot);
        text(.05,.9-.1*(ii-1),['BIC: ',char(cond.psy(ss,ii).hat.bic.lbl)],...
            'horizontalalignment','left',...
            'verticalalignment','top',...
            'interpreter','latex',...
            'units','normalized',...
            'color',cond.clrs(ii,:),...
            'fontsize',10);
    end
end

%% bin settings
numbins = n_models * 2 + 1;
binedges = linspace(1,n_models+1,numbins);
binwidth = diff(binedges(1:2));
binedges = binedges - binwidth / 2;

%% model selection (AIC)

% figure & axes initialization
fig = figure(figopt,...
    'position',[660,600,420,420],...
    'name',sprintf('model_selection_aic_%s',contrast_str));

% axes settings
axes(axesopt.default,...
    'xlim',[1,n_models]+[-1,1],...
    'xtick',model_idcs,...
    'xticklabel',models2test,...
    'xticklabelrotation',45,...
    'ylim',[0,6],...
    'ytick',0:n_models,...
    'ylimspec','tight',...
    'plotboxaspectratio',[2.75,1,1],...
    'ticklabelinterpreter','latex');

% axes labels
title('AIC');
xlabel('Fixed parameters');
ylabel('Best model count');

% preallocation
prev_bincounts = 0;

% iterate through conditions
for ii = 1 : n_conditions
    
    % iterate through subjects
    for ss = 1 : n_subjects
        
        % compute distribution
        bincounts = histcounts(cond.psy(ss,ii).hat.aic.idx,binedges);
        
        % plot BIC distribution
        h = histogram(...
            'binedges',binedges,...
            'bincounts',bincounts + prev_bincounts,...
            'edgecolor','w',...
            'facecolor',cond.clrs(ii,:),...
            'facealpha',1,...
            'linewidth',1.5);
        
        % ui restacking
        uistack(h,'bottom');
        
        % update previous counts
        prev_bincounts = prev_bincounts + bincounts;
    end
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% model selection (BIC)

% figure & axes initialization
fig = figure(figopt,...
    'position',[660,100,420,420],...
    'name',sprintf('model_selection_bic_%s',contrast_str));

% axes settings
axes(axesopt.default,...
    'xlim',[1,n_models]+[-1,1],...
    'xtick',model_idcs,...
    'xticklabel',models2test,...
    'xticklabelrotation',45,...
    'ylim',[0,6],...
    'ytick',0:n_models,...
    'ylimspec','tight',...
    'plotboxaspectratio',[2.75,1,1],...
    'ticklabelinterpreter','latex');

% axes labels
title('BIC');
xlabel('Fixed parameters');
ylabel('Best model count');

% preallocation
prev_bincounts = 0;

% iterate through conditions
for ii = 1 : n_conditions
    
    % iterate through subjects
    for ss = 1 : n_subjects
        
        % compute distribution
        bincounts = histcounts(cond.psy(ss,ii).hat.bic.idx,binedges);
        
        % plot BIC distribution
        h = histogram(...
            'binedges',binedges,...
            'bincounts',bincounts + prev_bincounts,...
            'edgecolor','w',...
            'facecolor',cond.clrs(ii,:),...
            'facealpha',1,...
            'linewidth',1.5);
        
        % ui restacking
        uistack(h,'bottom');
        
        % update previous counts
        prev_bincounts = prev_bincounts + bincounts;
    end
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% parse & sort AIC and BIC scores

% preallocation
aic_vals = nan(n_models,n_conditions,n_subjects);
bic_vals = nan(n_models,n_conditions,n_subjects);

% iterate through conditions
for ii = 1 : n_conditions
    
    % iterate through subjects
    for ss = 1 : n_subjects
        
        % store information criteria
        aic_vals(:,ii,ss) = cond.psy(ss,ii).hat.aic.vals;
        bic_vals(:,ii,ss) = cond.psy(ss,ii).hat.bic.vals;
    end
end

% normalization
aic_vals = aic_vals - min(aic_vals,[],[1,2]);
bic_vals = bic_vals - min(bic_vals,[],[1,2]);

% sorting
[~,aic_sorted_idcs] = sort(nanmean(aic_vals,[2,3]));
[~,bic_sorted_idcs] = sort(nanmean(bic_vals,[2,3]));
% aic_sorted_idcs = 1 : n_models;
% bic_sorted_idcs = 1 : n_models;

%% model comparison (AIC)

% figure & axes initialization
fig = figure(figopt,...
    'position',[240,350,615,460],...
    'name',sprintf('model_comparison_aic_%s',contrast_str));

% axes settings
axes(axesopt.default,...
    'xlim',[1,n_models]+[-1,1]*.05*(n_models-1),...
    'xtick',model_idcs,...
    'xticklabel',strrep(models2test(aic_sorted_idcs),'$',''),...
    'xticklabelrotation',45,...
    'yscale','log',...
    'ylim',[.5,2e3],...
    'ytick',10.^(0:3),...
    'clipping','off',...
    'layer','bottom');

% axes labels
xlabel('Fixed parameters');
ylabel('\DeltaAIC');

% transfer function
tfun = @(x) x + 1;

% graphical object preallocation
p = gobjects(n_conditions,1);

% iterate through conditions
for ii = 1 : n_conditions
    
    % iterate through subjects
    for ss = 1 : n_subjects
        
        % plot condition- & subject-specific scores
        plot(model_idcs,tfun(aic_vals(aic_sorted_idcs,ii,ss)),...
            'marker','o',...
            'markersize',3.5,...
            'markeredgecolor','none',...
            'markerfacecolor',cond.clrs(ii,:),...
            'linestyle','none',...
            'linewidth',1);
    end
end

% iterate through conditions
for ii = 1 : n_conditions
    aic_mu = mean(tfun(aic_vals(aic_sorted_idcs,ii,:)),3)';
    aic_std = std(tfun(aic_vals(aic_sorted_idcs,ii,:)),0,3)';
    aic_sem = aic_std ./ sqrt(n_subjects);
    
    % plot subject-agnostic mean
    errorpatch(model_idcs,aic_mu,aic_sem,cond.clrs(ii,:),...
        'facealpha',.25);
    p(ii) = plot(model_idcs,aic_mu,...
        'color',cond.clrs(ii,:),...
        'marker','o',...
        'markersize',6,...
        'markeredgecolor',cond.clrs(ii,:),...
        'markerfacecolor','w',...
        'linestyle','-',...
        'linewidth',1.5);
end

% plot condition-agnostic & subject-agnostic mean
plot(model_idcs,mean(tfun(aic_vals(aic_sorted_idcs,:,:)),[2,3])',...
    'color','k',...
    'linestyle','--',...
    'linewidth',1.5);

% ui restacking
uistack(p,'top');

% legend
leg_str = cellfun(@(x,y)sprintf('%s = %i %s',x,y,contrast_units),...
    repmat({contrast_lbl},n_conditions,1),...
    num2cell(contrast_set(1:n_contrasts~=contrast_mode_idx)),...
    'uniformoutput',false);
legend(p(isgraphics(p)),leg_str(isgraphics(p)),...
    'edgecolor','k',...
    'location','southeast',...
    'box','off');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% model comparison (BIC)

% figure & axes initialization
fig = figure(figopt,...
    'position',[240,350,615,460],...
    'name',sprintf('model_comparison_bic_%s',contrast_str));

% axes settings
axes(axesopt.default,...
    'xlim',[1,n_models]+[-1,1]*.05*(n_models-1),...
    'xtick',model_idcs,...
    'xticklabel',strrep(models2test(bic_sorted_idcs),'$',''),...
    'xticklabelrotation',45,...
    'yscale','log',...
    'ylim',[.5,2e3],...
    'ytick',10.^(0:3),...
    'clipping','off',...
    'layer','bottom');

% axes labels
xlabel('Fixed parameters');
ylabel('\DeltaBIC');

% transfer function
tfun = @(x) x + 1;

% graphical object preallocation
p = gobjects(n_conditions,1);

% iterate through conditions
for ii = 1 : n_conditions
    
    % iterate through subjects
    for ss = 1 : n_subjects
        
        % plot condition- & subject-specific scores
        plot(model_idcs,tfun(bic_vals(bic_sorted_idcs,ii,ss)),...
            'marker','o',...
            'markersize',3.5,...
            'markeredgecolor','none',...
            'markerfacecolor',cond.clrs(ii,:),...
            'linestyle','none',...
            'linewidth',1);
    end
end

% iterate through conditions
for ii = 1 : n_conditions
    bic_mu = mean(tfun(bic_vals(bic_sorted_idcs,ii,:)),3)';
    bic_std = std(tfun(bic_vals(bic_sorted_idcs,ii,:)),0,3)';
    bic_sem = bic_std ./ sqrt(n_subjects);
    
    % plot subject-agnostic mean
    errorpatch(model_idcs,bic_mu,bic_sem,cond.clrs(ii,:),...
        'facealpha',.25);
    p(ii) = plot(model_idcs,bic_mu,...
        'color',cond.clrs(ii,:),...
        'marker','o',...
        'markersize',6,...
        'markeredgecolor',cond.clrs(ii,:),...
        'markerfacecolor','w',...
        'linestyle','-',...
        'linewidth',1.5);
end

% plot condition-agnostic & subject-agnostic mean
plot(model_idcs,mean(tfun(bic_vals(bic_sorted_idcs,:,:)),[2,3])',...
    'color','k',...
    'linestyle','--',...
    'linewidth',1.5);

% ui restacking
uistack(p,'top');

% legend
leg_str = cellfun(@(x,y)sprintf('%s = %i %s',x,y,contrast_units),...
    repmat({contrast_lbl},n_conditions,1),...
    num2cell(contrast_set(1:n_contrasts~=contrast_mode_idx)),...
    'uniformoutput',false);
legend(p(isgraphics(p)),leg_str(isgraphics(p)),...
    'edgecolor','k',...
    'location','southeast',...
    'box','off');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% psychometric parameter scatters

% parameter settings
param_labels = {...
    'm',...
    'w',...
    '\lambda',...
    '\gamma'}';
n_params = numel(param_labels);
param_bounds = [...
    250,500;...
    600,1200;...
    0,.25;...
    0,.25];

% iterate through parameters
for pp = 1 : n_params
    if ismember(param_labels{pp},{'m','w'})
        multiplier = range(s_set);
        offset = min(s_set);
        units = 'ms';
    else
        multiplier = 1;
        offset = 0;
        units = '';
    end

    % figure & axes initialization
    fig = figure(figopt,...
        'position',[75+(pp-1)*350,375,285,350],...
        'name',sprintf('model_comparison_%s_%s',...
        contrast_str,strrep(param_labels{pp},'\','')));
    
    % axes settings
    set(gca,axesopt.default,...
        'xlim',param_bounds(pp,:)+[-1,1]*.05*range(param_bounds(pp,:)),...
        'ylim',param_bounds(pp,:)+[-1,1]*.05*range(param_bounds(pp,:)),...
        'xtick',linspace(param_bounds(pp,1),param_bounds(pp,2),3),...
        'ytick',linspace(param_bounds(pp,1),param_bounds(pp,2),3),...
        'xticklabel',{'0','','1'},...
        'yticklabel',{'0','','1'},...
        'clipping','off');
    
    % axes labels
    xlabel(sprintf('%s_{%s = %i %s} (%s)',...
        param_labels{pp},d2_lbl(1),d_set(d2_mode_idx),d_units,units));
    ylabel(sprintf('%s_{%s \\neq %i %s} (%s)',...
        param_labels{pp},d2_lbl(1),d_set(d2_mode_idx),d_units,units));
        
    % reference
    plot(xlim,ylim,...
        'color','k',...
        'linestyle','--',...
        'linewidth',1);
    
    % preallocation
    p_ctrl = nan(1,n_subjects);
    p_cond = nan(n_conditions,n_subjects);
    
    % iterate through conditions
    for ii = 1 : n_conditions
        
        % iterate through subjects
        for ss = 1 : n_subjects
            p_ctrl(ss) = ctrl.psy(ss).hat.fit.Fit(pp) * multiplier + offset;
            p_cond(ii,ss) = cond.psy(ss,ii).hat.fit.Fit(pp) * multiplier + offset;
        end
    end
    
    % iterate through conditions
    for ii = 1 : n_conditions
        
        % iterate through subjects
        for ss = 1 : n_subjects
            p_ctrl(ss) = ctrl.psy(ss).hat.fit.Fit(pp) * multiplier + offset;
            p_cond(ii,ss) = cond.psy(ss,ii).hat.fit.Fit(pp) * multiplier + offset;
            
            % plot parameter scatter
            plot(p_ctrl(ss),p_cond(ii,ss),...
                'marker','o',...
                'markersize',5,...
                'markeredgecolor','none',...
                'markerfacecolor',cond.clrs(ii,:),...
                'linestyle','none',...
                'linewidth',1);
        end
        
        % plot subject-agnostic mean
        ctrl_mu = nanmean(p_ctrl);
        cond_mu = nanmean(p_cond(ii,:));
        ctrl_sem = nanstd(p_ctrl) ./ sqrt(n_subjects);
        cond_sem = nanstd(p_cond(ii,:)) ./ sqrt(n_subjects);
        plot(ctrl_mu+[-1,1]*ctrl_sem,cond_mu*[1,1],...
            'color',cond.clrs(ii,:),...
            'linestyle','-',...
            'linewidth',1.5);
        plot(ctrl_mu*[1,1],cond_mu+[-1,1]*cond_sem,...
            'color',cond.clrs(ii,:),...
            'linestyle','-',...
            'linewidth',1.5);
    end

    % save figure
    if want2save
        svg_file = fullfile(panel_path,[fig.Name,'.svg']);
        print(fig,svg_file,'-dsvg','-painters');
    end
end