%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% run settings
n_runs = 1;

%% bootstrap settings
n_boots = 1e3;

%% GLM settings
distro = 'poisson';
glm_wins = t_set(t1_mode_idx);
% glm_wins = t_set(1:end);
n_glm = numel(glm_wins);

%% preallocation
spkcounts = struct();
fractions = struct();

%% iterate through runs
for rr = 1 : n_runs
    if n_runs > 1
        toso2021_simulateSpikes;
    end
    
    %% iterate through spike integration windows
    for gg = 1 : n_glm
        glm_win = glm_wins(gg);
        glm_str = sprintf('t%i',glm_win);
        
        %% ROI settings
        
        % initialization
        glm_roi = struct();
        glm_roi_lbl = struct();
        
        % roi definitions
%         glm_roi.aroundInitMov = [-glm_win,0] - 316;
        glm_roi.preInit = [-glm_win,0];
        glm_roi.postInit = [0,glm_win];
        glm_roi.preS1Onset = [-glm_win,0];
        glm_roi.postS1Onset = [0,glm_win];
        glm_roi.preS1Offset = [-glm_win,0];
        glm_roi.postS1Offset = [0,glm_win];
        glm_roi.preS2Onset = [-glm_win,0];
        glm_roi.postS2Onset = [0,glm_win];
        glm_roi.preS2Offset = [-glm_win,0];
        glm_roi.postS2Offset = [0,glm_win];
        glm_roi.preGoCue = [-glm_win,0];
        glm_roi.postGoCue = [0,glm_win];
        glm_roi.aroundReaction = [0,glm_win] + 200;
        glm_roi.aroundChoice = [0,glm_win] + 500;
        
        % roi labels
%         glm_roi_lbl.aroundInitMov = 'Initiation movement';
        glm_roi_lbl.preInit = 'Pre-initiation';
        glm_roi_lbl.postInit = 'Post-initiation';
        glm_roi_lbl.preS1Onset = 'Pre-S1 onset';
        glm_roi_lbl.postS1Onset = 'Post-S1 onset';
        glm_roi_lbl.preS1Offset = 'Pre-S1 offset';
        glm_roi_lbl.postS1Offset = 'Post-S1 offset';
        glm_roi_lbl.preS2Onset = 'Pre-S2 onset';
        glm_roi_lbl.postS2Onset = 'Post-S2 onset';
        glm_roi_lbl.preS2Offset = 'Pre-S2 offset';
        glm_roi_lbl.postS2Offset = 'Post-S2 offset';
        glm_roi_lbl.preGoCue = 'Pre-go cue';
        glm_roi_lbl.postGoCue = 'Post-go cue';
        glm_roi_lbl.aroundReaction = '~Reaction';
        glm_roi_lbl.aroundChoice = '~Choice';
        
        % epoch parsing
        epochs = fieldnames(glm_roi);
        n_epochs = numel(epochs);
        
        %% neuron selection
        
        % selected for being good examples of i2-modulation
        if strcmpi(task_str,'duration')
            neurons2use = [...
                21,24,35,38,62,65,68,72,100,130,205,206,215,224,...
                234,241,356,381,391,393,397,402,406,428,441,448,...
                459,461,462,470,473,493,526,544,553,555,566];
            %     neurons2use = [...
            %         38,72,205,215,224,391,393,397,402,448,459,462,470,526,566];
        elseif strcmpi(task_str,'intensity')
            neurons2use = [...
                19,22,30,61,66,70,100,111,112,115,...
                166,238,243,260,344,408,410];
        end
        neurons2use = flagged_neurons;
        % neurons2use = neuron_idcs;
        n_neurons2use = numel(neurons2use);
        
        %% construct response
        
        % iterate through neurons
        for nn = 1 : n_neurons2use
            progressreport(nn,n_neurons2use,'fetching spike counts');
            neuron_flags = data.NeuronNumb == neurons2use(nn);
            
            % flag trials for the current condition
            trial_flags = ...
                valid_flags & ...
                neuron_flags;
            if sum(trial_flags) == 0
                continue;
            end
            
            % fetch spike counts & compute spike rates
            spike_counts = data.FR(trial_flags,:)';
            n_trials = sum(trial_flags);
            
            % around approach spike rates
            if isfield(glm_roi,'aroundInitMov')
                alignment_onset = ...
                    repmat(pre_init_padding,n_trials,1);
                alignment_flags = ...
                    padded_time >= alignment_onset + glm_roi.aroundInitMov(1) & ...
                    padded_time < alignment_onset + glm_roi.aroundInitMov(2);
                chunk_flags = alignment_flags;
                spkcounts_aroundInitMov = spike_counts;
                spkcounts_aroundInitMov(~alignment_flags') = nan;
                spkcounts_aroundInitMov = ...
                    reshape(spkcounts_aroundInitMov(chunk_flags'),[glm_win,n_trials])';
                spkcounts.aroundInitMov(gg,trial_flags) = nansum(spkcounts_aroundInitMov,2);
            end
            
            % pre initiation spike rates
            alignment_onset = ...
                repmat(pre_init_padding,n_trials,1);
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.preInit(1) & ...
                padded_time < alignment_onset + glm_roi.preInit(2);
            chunk_flags = alignment_flags;
            spkcounts_preInit = spike_counts;
            spkcounts_preInit(~alignment_flags') = nan;
            spkcounts_preInit = ...
                reshape(spkcounts_preInit(chunk_flags'),[glm_win,n_trials])';
            
            % post initiation spike rates
            alignment_onset = ...
                repmat(pre_init_padding,n_trials,1);
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.postInit(1) & ...
                padded_time < alignment_onset + glm_roi.postInit(2);
            chunk_flags = alignment_flags;
            spkcounts_postInit = spike_counts;
            spkcounts_postInit(~alignment_flags') = nan;
            spkcounts_postInit = ...
                reshape(spkcounts_postInit(chunk_flags'),[glm_win,n_trials])';
            
            % pre-S1 onset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags);
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.preS1Onset(1) & ...
                padded_time < alignment_onset + glm_roi.preS1Onset(2);
            chunk_flags = alignment_flags;
            spkcounts_preS1Onset = spike_counts;
            spkcounts_preS1Onset(~alignment_flags') = nan;
            spkcounts_preS1Onset = ...
                reshape(spkcounts_preS1Onset(chunk_flags'),[glm_win,n_trials])';
            
            % post-S1 onset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags);
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.postS1Onset(1) & ...
                padded_time < alignment_onset + t1(trial_flags);
            chunk_flags = ...
                padded_time >= alignment_onset + glm_roi.postS1Onset(1) & ...
                padded_time < alignment_onset + glm_roi.postS1Onset(2);
            spkcounts_postS1Onset = spike_counts;
            spkcounts_postS1Onset(~alignment_flags') = nan;
            spkcounts_postS1Onset = ...
                reshape(spkcounts_postS1Onset(chunk_flags'),[glm_win,n_trials])';
            
            % pre-S1 offset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags);
            alignment_flags = ...
                padded_time >= alignment_onset - t1(trial_flags) & ...
                padded_time < alignment_onset + glm_roi.preS1Offset(2);
            chunk_flags = ...
                padded_time >= alignment_onset + glm_roi.preS1Offset(1) & ...
                padded_time < alignment_onset + glm_roi.preS1Offset(2);
            spkcounts_preS1Offset = spike_counts;
            spkcounts_preS1Offset(~alignment_flags') = nan;
            spkcounts_preS1Offset = ...
                reshape(spkcounts_preS1Offset(chunk_flags'),[glm_win,n_trials])';
            
            % post-S1 offset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags);
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.postS1Offset(1) & ...
                padded_time < alignment_onset + glm_roi.postS1Offset(2);
            chunk_flags = alignment_flags;
            spkcounts_postS1Offset = spike_counts;
            spkcounts_postS1Offset(~alignment_flags') = nan;
            spkcounts_postS1Offset = ...
                reshape(spkcounts_postS1Offset(chunk_flags'),[glm_win,n_trials])';
            
            % pre-S2 onset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags) + ...
                isi;
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.preS2Onset(1) & ...
                padded_time < alignment_onset + glm_roi.preS2Onset(2);
            chunk_flags = alignment_flags;
            spkcounts_preS2Onset = spike_counts;
            spkcounts_preS2Onset(~alignment_flags') = nan;
            spkcounts_preS2Onset = ...
                reshape(spkcounts_preS2Onset(chunk_flags'),[glm_win,n_trials])';
            
            % post-S2 onset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags) + ...
                isi;
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.postS2Onset(1) & ...
                padded_time < alignment_onset + t2(trial_flags);
            chunk_flags = ...
                padded_time >= alignment_onset + glm_roi.postS2Onset(1) & ...
                padded_time < alignment_onset + glm_roi.postS2Onset(2);
            spkcounts_postS2Onset = spike_counts;
            spkcounts_postS2Onset(~alignment_flags') = nan;
            spkcounts_postS2Onset = ...
                reshape(spkcounts_postS2Onset(chunk_flags'),[glm_win,n_trials])';
            
            % pre-S2 offset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags) + ...
                isi + ...
                t2(trial_flags);
            alignment_flags = ...
                padded_time >= alignment_onset - t2(trial_flags) & ...
                padded_time < alignment_onset + glm_roi.preS2Offset(2);
            chunk_flags = ...
                padded_time >= alignment_onset + glm_roi.preS2Offset(1) & ...
                padded_time < alignment_onset + glm_roi.preS2Offset(2);
            spkcounts_preS2Offset = spike_counts;
            spkcounts_preS2Offset(~alignment_flags') = nan;
            spkcounts_preS2Offset = ...
                reshape(spkcounts_preS2Offset(chunk_flags'),[glm_win,n_trials])';
            
            % post-S2 offset spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags) + ...
                isi + ...
                t2(trial_flags);
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.postS2Offset(1) & ...
                padded_time < alignment_onset + glm_roi.postS2Offset(2);
            chunk_flags = alignment_flags;
            spkcounts_postS2Offset = spike_counts;
            spkcounts_postS2Offset(~alignment_flags') = nan;
            spkcounts_postS2Offset = ...
                reshape(spkcounts_postS2Offset(chunk_flags'),[glm_win,n_trials])';
            
            % pre-go spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags) + ...
                isi + ...
                t2(trial_flags) + ...
                post_s2_delay;
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.preGoCue(1) & ...
                padded_time < alignment_onset + glm_roi.preGoCue(2);
            chunk_flags = alignment_flags;
            spkcounts_preGoCue = spike_counts;
            spkcounts_preGoCue(~alignment_flags') = nan;
            spkcounts_preGoCue = ...
                reshape(spkcounts_preGoCue(chunk_flags'),[glm_win,n_trials])';
            
            % post-go spike rates
            alignment_onset = ...
                pre_init_padding + ...
                pre_s1_delay(trial_flags) + ...
                t1(trial_flags) + ...
                isi + ...
                t2(trial_flags) + ...
                post_s2_delay;
            alignment_flags = ...
                padded_time >= alignment_onset + glm_roi.postGoCue(1) & ...
                padded_time < alignment_onset + glm_roi.postGoCue(2);
            chunk_flags = alignment_flags;
            spkcounts_postGoCue = spike_counts;
            spkcounts_postGoCue(~alignment_flags') = nan;
            spkcounts_postGoCue = ...
                reshape(spkcounts_postGoCue(chunk_flags'),[glm_win,n_trials])';
            
            % around choice spike rates
            if isfield(glm_roi,'aroundReaction')
                alignment_onset = ...
                    pre_init_padding + ...
                    pre_s1_delay(trial_flags) + ...
                    t1(trial_flags) + ...
                    isi + ...
                    t2(trial_flags) + ...
                    post_s2_delay;
                alignment_flags = ...
                    padded_time >= alignment_onset + glm_roi.aroundReaction(1) & ...
                    padded_time < alignment_onset + glm_roi.aroundReaction(2);
                chunk_flags = alignment_flags;
                spkcounts_aroundReaction = spike_counts;
                spkcounts_aroundReaction(~alignment_flags') = nan;
                spkcounts_aroundReaction = ...
                    reshape(spkcounts_aroundReaction(chunk_flags'),[glm_win,n_trials])';
                spkcounts.aroundReaction(gg,trial_flags) = nansum(spkcounts_aroundReaction,2);
            end
            
            % around choice spike rates
            if isfield(glm_roi,'aroundChoice')
                alignment_onset = ...
                    pre_init_padding + ...
                    pre_s1_delay(trial_flags) + ...
                    t1(trial_flags) + ...
                    isi + ...
                    t2(trial_flags) + ...
                    post_s2_delay;
                alignment_flags = ...
                    padded_time >= alignment_onset + glm_roi.aroundChoice(1) & ...
                    padded_time < alignment_onset + glm_roi.aroundChoice(2);
                chunk_flags = alignment_flags;
                spkcounts_aroundChoice = spike_counts;
                spkcounts_aroundChoice(~alignment_flags') = nan;
                spkcounts_aroundChoice = ...
                    reshape(spkcounts_aroundChoice(chunk_flags'),[glm_win,n_trials])';
                spkcounts.aroundChoice(gg,trial_flags) = nansum(spkcounts_aroundChoice,2);
            end
            
            % store average spike rates
            spkcounts.preInit(gg,trial_flags) = nansum(spkcounts_preInit,2);
            spkcounts.postInit(gg,trial_flags) = nansum(spkcounts_postInit,2);
            spkcounts.preS1Onset(gg,trial_flags) = nansum(spkcounts_preS1Onset,2);
            spkcounts.postS1Onset(gg,trial_flags) = nansum(spkcounts_postS1Onset,2);
            spkcounts.preS1Offset(gg,trial_flags) = nansum(spkcounts_preS1Offset,2);
            spkcounts.postS1Offset(gg,trial_flags) = nansum(spkcounts_postS1Offset,2);
            spkcounts.preS2Onset(gg,trial_flags) = nansum(spkcounts_preS2Onset,2);
            spkcounts.postS2Onset(gg,trial_flags) = nansum(spkcounts_postS2Onset,2);
            spkcounts.preS2Offset(gg,trial_flags) = nansum(spkcounts_preS2Offset,2);
            spkcounts.postS2Offset(gg,trial_flags) = nansum(spkcounts_postS2Offset,2);
            spkcounts.preGoCue(gg,trial_flags) = nansum(spkcounts_preGoCue,2);
            spkcounts.postGoCue(gg,trial_flags) = nansum(spkcounts_postGoCue,2);
        end
        
        %% spike count GLMs
        
        % design matrix
        design = [prev_choice,prev_correct,s1,d1,s2,d2,choice,correct,trial_idcs];
        n_regressors = size(design,2);
        n_coefficients = n_regressors + 1;
        
        % feature normalization
        zdesign = (design - nanmean(design)) ./ nanstd(design);

        % preallocation
        betas = struct();
        boot_betas = struct();
        pvals = struct();
        residuals = struct();
        rsquared = struct();

        % iterate through epochs
        for ee = 1 : n_epochs
            epoch = epochs{ee};

            % preallocation
            betas.(epoch) = zeros(n_neurons2use,n_coefficients);
            pvals.(epoch) = zeros(n_neurons2use,n_coefficients);
            residuals.(epoch) = nan(n_glm,n_total_trials);
            boot_betas.(epoch) = zeros(n_neurons2use,n_coefficients,n_boots);
            
            % duration selection
            t1_flags = t1 >= glm_win * ...
                ismember(epoch,{'postS1Onset','preS1Offset'});
            t2_flags = t2 >= glm_win * ...
                ismember(epoch,{'postS2Onset','preS2Offset'});
            
            % intensity selection (for bootstrapping purposes)
            i1_flags = (i1 == i_set(i1_mode_idx)) | ...
                ~ismember(epoch,{'postS1Onset','preS1Offset'});
            i2_flags = (i2 == i_set(i2_mode_idx)) | ...
                ~ismember(epoch,{'postS2Onset','preS2Offset'});
            
            % iterate through neurons
            for nn = 1 : n_neurons2use
                progressreport(nn,n_neurons2use,...
                    sprintf('fitting neuron-wise GLMs (%s)',epoch));
                neuron_flags = data.NeuronNumb == neurons2use(nn);
                trial_flags = ...
                    valid_flags & ...
                    neuron_flags & ...
                    t1_flags & ...
                    t2_flags;
                n_flagged_trials = sum(trial_flags);
                if n_flagged_trials <= 1
                    continue;
                end
                
                % fit GLM
                X = zdesign(trial_flags,:);
                y = spkcounts.(epoch)(gg,trial_flags);
                opts = statset('robust','off');
                mdl = fitglm(X,y,'linear',...
                    'predictorvars',{'prevchoice','prevreward',s1_lbl,d1_lbl,s2_lbl,d2_lbl,'choice','reward','trial#'},...
                    'distribution',distro,...
                    'intercept',true,...
                    'options',opts);
%                 mdlPoisson = fitglm(X,y,'linear',...
%                     'predictorvars',{'prevchoice','prevreward',s1_lbl,d1_lbl,s2_lbl,d2_lbl,'choice','reward','trial#'},...
%                     ...'predictorvars',{s1_lbl,d1_lbl,s2_lbl,d2_lbl,'choice','reward','trial#'},...
%                     ...'predictorvars',{s1_lbl,d1_lbl,s2_lbl,d2_lbl,'choice','trial#'},...
%                     ...'predictorvars',{s1_lbl,d1_lbl,s2_lbl,d2_lbl,'trial#'},...
%                     ...'predictorvars',{d1_lbl,d2_lbl,'trial#'},...
%                     'distribution','poisson',...
%                     'options',opts,...
%                     'intercept',true);
%                 rsquared.(epoch).poisson(gg,nn) = mdlPoisson.Rsquared.Ordinary;

                % bootstrapping
                for bb = 1 : n_boots
                    boot_mdl = fitglm(X,randsample(y,n_flagged_trials),'linear',...
                        'predictorvars',mdl.CoefficientNames(2:end),...
                        'distribution',mdl.Distribution.Name,...
                        'intercept',ismember('(Intercept)',mdl.CoefficientNames),...
                        'options',opts);
                    boot_betas.(epoch)(nn,:,bb) = boot_mdl.Coefficients.Estimate;
                end

                % caching
                betas.(epoch)(nn,:) = mdl.Coefficients.Estimate;
                pvals.(epoch)(nn,:) = mdl.Coefficients.pValue;
                residuals.(epoch)(gg,trial_flags) = mdl.Residuals.Raw;
                rsquared.(epoch).normal(gg,nn) = mdl.Rsquared.Ordinary;
                
%                 % bootstrapping
%                 for bb = 1 : n_boots
%                     bootmdl = fitglm(mdl.Variables{:,1:end-1},...
%                         mdl.Variables{randperm(n_flagged_trials),end},'linear',...
%                         'predictorvars',mdl.CoefficientNames(2:end),...
%                         'distribution',mdl.Distribution.Name,...
%                         'intercept',true);
%                     bootbetas.(epoch)(nn,:,bb) = bootmdl.Coefficients.Estimate;
%                 end
            end
        end
        
        %% plot proportion of significantly modulated neurons
        
        % coefficient selection
        coeffs2plot = {...
            'T_1','T_2','I_1','I_2',...
            };
        coeffs2plot = mdl.CoefficientNames(2:end-1);
        n_coeffs2plot = numel(coeffs2plot);
        
        % bar width settings
        epoch_span = 3 / 4;
        barwidth = epoch_span / n_coeffs2plot;
        
        % figure initialization
        fig = figure(figopt,...
            'windowstate','maximized',...
            ...'position',[541.8000 905 2560 1.3248e+03],...[150,125,1685,825],...
            'name',sprintf('GLM_significance_crossEpochs_%s_%i',distro,glm_win),...
            'color',[1,1,1]*1);
        
        % axes initialization
        yymax = .3;
        yylim = [-1,1]*yymax+[-1,1]*.05*yymax*2;
        yytick = unique([0,[-1,1]*yymax,[-1,1]*.05,[-1,1]*.01]);
        yyticklabel = num2cell(abs(round(yytick,2)));
        yyticklabel(~ismember(yytick,[0,[-1,1]*yymax])) = {''};
        axes(axesopt.default,...
            'plotboxaspectratio',[3,1,1],...
            'color','none',...
            'ticklength',axesopt.default.ticklength*.25,...
            'xlim',[1,n_epochs]+[-1,1]*.75,...
            'xtick',1:n_epochs,...
            'xticklabel',struct2cell(glm_roi_lbl),...
            'xticklabelrotation',45,...
            'ylim',yylim,...
            'ytick',yytick,...
            'yticklabel',yyticklabel,...
            'clipping','off',...
            'layer','bottom');
        title(sprintf('Spike counts in %i ms ~ %s(\\phi(\\betaX))',...
            glm_win,capitalize(distro)));
        ylabel({'P(significant regression coefficients)',...
            '\downarrow-modulated                   \uparrow-modulated'},...
            'verticalalignment','middle');
        
        % significance settings
        alphas = [.05,.01];
        n_alphas = numel(alphas);
        pval_corr = 3;
        
        % reference lines
        plot(xlim,[1,1]*0,'-k',...
            'linewidth',1.5);
%         plot(xlim,[1,1]*0,':k');
%         plot(xlim,[1,1]*min(alphas),':k');
%         plot(xlim,[1,1]*-min(alphas),':k');
%         plot(xlim,[1,1]*max(alphas),':k');
%         plot(xlim,[1,1]*-max(alphas),':k');
                
        % pseudo-legend (stimulus epochs)
        s1epoch_idcs = ...
            [find(ismember(epochs,'postS1Onset')),...
            find(ismember(epochs,'preS1Offset'))];
        plot(s1epoch_idcs+[-1,1]*barwidth*n_coeffs2plot/2,[1,1]*yymax,...
            'linestyle','-',...
            'linewidth',3,...
            'color',stim_clrs(1,:));
        text(mean(s1epoch_idcs),yymax*1.025,'S1 presentation',...
            'color',stim_clrs(1,:),...
            'fontsize',12,...
            'horizontalalignment','center',...
            'verticalalignment','bottom');
        s2epoch_idcs = ...
            [find(ismember(epochs,'postS2Onset')),...
            find(ismember(epochs,'preS2Offset'))];
        plot(s2epoch_idcs+[-1,1]*barwidth*n_coeffs2plot/2,[1,1]*yymax,...
            'linestyle','-',...
            'linewidth',3,...
            'color',stim_clrs(2,:));
        text(mean(s2epoch_idcs),yymax*1.025,'S2 presentation',...
            'color',stim_clrs(2,:),...
            'fontsize',12,...
            'horizontalalignment','center',...
            'verticalalignment','bottom');
        
        % graphical object preallocation
        h = gobjects((n_coefficients-2)*n_epochs*2*n_alphas,1);
        h_idx = 1;
        
        % iterate through epochs
        for ee = 1 : n_epochs
            epoch = epochs{ee};
            
            % compute horizontal offsets
            x_offsets = ee + (0 : n_coeffs2plot - 1) * barwidth + ...
                barwidth / 2 - epoch_span / 2;
            
            % iterate through alphas
            for aa = 1 : n_alphas
                
                % preallocation
                P = nan(n_coeffs2plot,2);
                
                % iterate through coefficients
                for bb = 1 : n_coeffs2plot
                    coeff_lbl = coeffs2plot{bb};
                    coeff_idx = find(ismember(mdl.CoefficientNames,coeff_lbl));
                    coeff_lbl = strrep(coeff_lbl,'#','');
                    coeff_str = strrep(lower(coeff_lbl),'_','');
                    coeff_clrs = eval([coeff_str,'_clrs']);
                    x = x_offsets(bb);
                    
                    % significance flags
                    significant_flags = pvals.(epoch)(:,coeff_idx) <= alphas(aa) / pval_corr;
                    significant_flags = ...
                        betas.(epoch)(:,coeff_idx) <= quantile(boot_betas.(epoch)(:,coeff_idx,:),alphas(aa)/pval_corr,3) | ...
                        betas.(epoch)(:,coeff_idx) >= quantile(boot_betas.(epoch)(:,coeff_idx,:),1-alphas(aa)/pval_corr,3);

                    % pseudo-legend (regressors)
                    if ee == 1 && alphas(aa) == max(alphas)
                        text(x-.025,yymax*.95,coeff_str,...
                            'color','k',...
                            'fontsize',8,...
                            'horizontalalignment','right',...
                            'verticalalignment','middle',...
                            'interpreter','none',...
                            'edgecolor','none',...
                            'rotation',90);
                        if bb == 1
                            plot(1+[-1,1]*barwidth*n_coeffs2plot/2,[1,1]*yymax,...
                                'color','k',...
                                'linewidth',1.5);
                            text(1,yymax*1.025,'Regressors',...
                                'color','k',...
                                'fontsize',12,...
                                'horizontalalignment','center',...
                                'verticalalignment','bottom');
                        end
                    end
                    
                    % iterate through signs
                    signs = [-1,1];
                    for ss = 1 : 2
                        sign_flags = sign(betas.(epoch)(:,coeff_idx)) == signs(ss);
                        n = sum(significant_flags & sign_flags);
                        p = n / n_neurons2use;
                        
                        % store proportion for later use
                        fractions.(glm_str).(epoch).(coeff_lbl)(rr,aa,ss) = p;
                        
                        if signs(ss) == -1
                            facecolor = coeff_clrs(1,:);
                        else
                            facecolor = coeff_clrs(end,:);
                        end
                        if false % p < alphas(aa)
                            facecolor = [1,1,1] * .5;
                            edgecolor = 'none';
                        else
                            edgecolor = 'k';
                        end
                        if alphas(aa) == max(alphas)
                            n_fadedcolors = 5;
                            clrs = colorlerp([facecolor;[1,1,1]],n_fadedcolors);
                            facecolor = clrs(end-1,:);
                        end
                        xpatch = x + [-1,1,1,-1] / 2 * barwidth * 1;
                        ypatch = p * signs(ss) .* [0,0,1,1];
                        patch(xpatch,ypatch,'k',...
                            'edgecolor','none',...
                            'facecolor',facecolor,...
                            'facealpha',1,...
                            'linewidth',1.5);
                        if false % p >= alphas(aa)
                            h(h_idx) = patch(xpatch,ypatch,'k',...
                                'edgecolor','k',...
                                'facecolor','none',...
                                'linewidth',1.5);
                            h_idx = h_idx + 1;
                        end
                        
                        P(bb,ss) = p;
                        if alphas(aa) == max(alphas) && bb == n_coeffs2plot
                            xstairs = ...
                                [x_offsets(1),x_offsets,x_offsets(end),...
                                x_offsets(end)+barwidth]-barwidth/2;
                            ystairs = [0;P(:,ss);P(end,ss)*[1;0]] * signs(ss);
                            h(h_idx) = stairs(xstairs,ystairs,...
                                'color','k',...
                                'linewidth',1.5);
                            h_idx = h_idx + 1;
                        end
                        
                        % regressor lines
                        if ee == 1 && alphas(aa) == max(alphas) && signs(ss) == 1
                            offset = numel(coeff_str)*.0075;
                            p = plot(x*[1,1],[p,yymax*.94-offset],'-',...
                                'color','k');
                            uistack(p,'bottom');
                        end
                    end
                    
                    % pseudo-legend (significance)
                    if ee == 1 && bb == 1
                        aspectratio = pbaspect;
                        xpatch = 1 + [-1,1,1,-1] * .25 / (1 + (alphas(aa) == min(alphas))) - ...
                            .125 * (alphas(aa) == min(alphas));
                        ypatch = -yymax + [0,0,1,1] * barwidth * ...
                            range(ylim) / range(xlim) * aspectratio(1) / aspectratio(2);
                        if alphas(aa) == min(alphas)
                            clr = [0,0,0];
                        else
                            clrs = colorlerp([[0,0,0];[1,1,1]],n_fadedcolors);
                            clr = clrs(end-1,:);
                        end
                        patch(xpatch,ypatch,clr,...
                            'facealpha',1,...
                            'linewidth',1.5);
                        if alphas(aa) == max(alphas)
                            text(mean(xpatch),mean(ypatch)+.01,'\alpha',...
                                'color','k',...
                                'fontsize',12,...
                                'fontweight','normal',...
                                'horizontalalignment','center',...
                                'verticalalignment','bottom');
                        end
                        if alphas(aa) == max(alphas)
                            horzalignment = 'left';
                            xalpha = max(xpatch) + .06;
                        else
                            horzalignment = 'right';
                            xalpha = min(xpatch) - .06;
                        end
                        text(xalpha,mean(ypatch)+.0025,sprintf('%.2f',alphas(aa)),...
                            'color','k',...
                            'fontsize',8,...
                            'horizontalalignment',horzalignment,...
                            'verticalalignment','middle');
                    end
                end
            end
        end
        
        % ui resorting
        uistack(h(isgraphics(h)),'top');
        
        % bin settings
        binspan = [0,15];
        n_bins = range(binspan) + 1;
        binedges = linspace(binspan(1),binspan(2),n_bins);
        
        % iterate through epochs
        for ee = 1 : n_epochs
            epoch = epochs{ee};
            
            % spike count distributions
            width = .085 * 1;
            height = width;
            x0 = (ee - 1) / n_epochs * .75 + .125;
            y0 = .05;
            axes(axesopt.default,...
                'position',[x0,y0,width,height],...
                'ticklength',axesopt.default.ticklength*2,...
                'fontsize',8,...
                'linewidth',1,...
                'plotboxaspectratio',[1,1,1],...
                'nextplot','add',...
                'xlim',binspan,...
                'xtick',binspan,...
                'ylimspec','tight',...
                'box','off',...
                'xcolor','k',...
                'ycolor','none');
            xlabel("Spike count");
            
            % compute spike count distribution
            bincounts = histcounts(spkcounts.(epoch)(gg,valid_flags),...
                'binedges',binedges);
            bincounts = bincounts / nansum(bincounts);
            
            % plot spike count distribution
            clrs = colorlerp([[0,0,0];[1,1,1]],n_fadedcolors);
            clr = clrs(end-1,:);
            histogram(...
                'binedges',binedges,...
                'bincounts',bincounts,...
                'facealpha',1,...
                'edgecolor','none',...
                'facecolor',clr,...
                'linewidth',1.5);
            continue;
            
            % compute spike count distribution
            bincounts = histcounts(residuals.(epoch)(gg,valid_flags),...
                'binedges',binedges);
            bincounts = bincounts / nansum(bincounts);
            
            % plot spike count distribution
            histogram(...
                'binedges',binedges,...
                'bincounts',bincounts,...
                'facealpha',1,...
                'edgecolor','none',...
                'facecolor','k',...
                'linewidth',1.5);
        end
        
        % save figure
        if want2save
            svg_file = fullfile(panel_path,[fig.Name,'.svg']);
            print(fig,svg_file,'-dsvg','-painters');
        end
        
        %% highlight coefficients of interest
        
        % coefficient selection
        coeffsets2plot = {...
            'T_1','T_2';...
            'I_1','I_2',...
            };
        [n_coeffsets,n_coeffsperset] = size(coeffsets2plot);
        setyymax = .3 ./ [1,2];
        setlabels = {'Duration','Intensity'};
        
        % iterate through coeff set
        for ss = 1 : n_coeffsets
            
            % figure initialization
            fig = figure(figopt,...
                'name',sprintf('GLM_significance_%s_%i_%s',...
                distro,glm_win,lower(setlabels{ss})),...
                'position',[540,630,765,420],...
                'color',[1,1,1]*1);
            
            % axes initialization
            yymax = setyymax(ss);
            yylim = [0,1]*yymax+[-1,1]*.05*yymax;
            yytick = unique([0,[0,1]*yymax,[0,1]*.05,[0,1]*.01]);
            yyticklabel = num2cell(abs(round(yytick,2)));
            yyticklabel(~ismember(yytick,[0,[0,1]*yymax])) = {''};
            axes(axesopt.default,...
                'plotboxaspectratio',[3.5,1,1],...
                'color','none',...
                'ticklength',axesopt.default.ticklength*.58,...
                'xlim',[1,n_epochs]+[-1,1]*.75,...
                'xtick',1:n_epochs,...
                'xticklabel',struct2cell(glm_roi_lbl),...
                'xticklabelrotation',45,...
                'ylim',yylim,...
                'ytick',yytick,...
                'yticklabel',yyticklabel,...
                'clipping','off',...
                'layer','bottom');
%             title(sprintf('%s',setlabels{ss}));
            ylabel(sprintf('P(significant %s coefficients)',lower(setlabels{ss})));
            
            % pseudo-legend (stimulus epochs)
            s1epoch_idcs = ...
                [find(ismember(epochs,'postS1Onset')),...
                find(ismember(epochs,'preS1Offset'))];
            plot(s1epoch_idcs,[1,1]*yymax,...
                'linestyle','-',...
                'linewidth',3,...
                'color',stim_clrs(1,:));
            text(mean(s1epoch_idcs),yymax*1.025,'S1 presentation',...
                'color',stim_clrs(1,:),...
                'fontsize',12,...
                'horizontalalignment','center',...
                'verticalalignment','bottom');
            s2epoch_idcs = ...
                [find(ismember(epochs,'postS2Onset')),...
                find(ismember(epochs,'preS2Offset'))];
            plot(s2epoch_idcs,[1,1]*yymax,...
                'linestyle','-',...
                'linewidth',3,...
                'color',stim_clrs(2,:));
            text(mean(s2epoch_idcs),yymax*1.025,'S2 presentation',...
                'color',stim_clrs(2,:),...
                'fontsize',12,...
                'horizontalalignment','center',...
                'verticalalignment','bottom');
            
            % reference lines
%             plot(xlim,[1,1]*min(alphas),':k');
%             plot(xlim,[1,1]*max(alphas),':k');
            
            % iterate through coefficients
            for bb = 1 : n_coeffsperset
                coeff_lbl = coeffsets2plot{ss,bb};
                coeff_idx = find(ismember(mdl.CoefficientNames,coeff_lbl));
                coeff_lbl = strrep(coeff_lbl,'#','');
                coeff_str = strrep(lower(coeff_lbl),'_','');
                coeff_clrs = eval([coeff_str,'_clrs']);
                
                %             % figure initialization
                %             fig = figure(figopt,...
                %                 'name',sprintf('GLM_significance_%s_%i_%s',distro,glm_win,coeff_lbl),...
                %                 'color',[1,1,1]*1);
                %
                %             % axes initialization
                %             yymax = .3;
                %             yylim = [0,1]*yymax+[-1,1]*.05*yymax;
                %             yytick = unique([0,[0,1]*yymax,[0,1]*.05,[0,1]*.01]);
                %             yyticklabel = num2cell(abs(round(yytick,2)));
                %             yyticklabel(~ismember(yytick,[0,[0,1]*yymax])) = {''};
                %             axes(axesopt.default,...
                %                 'plotboxaspectratio',[3,1,1],...
                %                 'color','none',...
                %                 'ticklength',axesopt.default.ticklength*.58,...
                %                 'xlim',[1,n_epochs]+[-1,1]*.75,...
                %                 'xtick',1:n_epochs,...
                %                 'xticklabel',struct2cell(glm_roi_lbl),...
                %                 'xticklabelrotation',45,...
                %                 'ylim',yylim,...
                %                 'ytick',yytick,...
                %                 'yticklabel',yyticklabel,...
                %                 'clipping','off',...
                %                 'layer','bottom');
                %             title(sprintf('\\beta_{%s}',capitalize(coeff_str)));
                %             ylabel(sprintf('P(significant \\beta_{%s})',capitalize(coeff_str)));
                %
                %             % reference lines
                %             plot(xlim,[1,1]*0,':k');
                %             plot(xlim,[1,1]*min(alphas),':k');
                %             plot(xlim,[1,1]*max(alphas),':k');
                
                % preallocation
                P = nan(n_epochs,n_alphas);
                
                % iterate through alphas
                for aa = 1 : n_alphas
                    
                    % iterate through epochs
                    for ee = 1 : n_epochs
                        epoch = epochs{ee};
                        P(ee,aa) = sum(...
                            fractions.(glm_str).(epoch).(coeff_lbl)(rr,aa,:));
                    end
                    
                    % plot sign-agnostic proportion through epochs
                    stairs(1:n_epochs,P(:,aa),...
                        'color',stim_clrs(bb,:),...
                        'linewidth',1.5,...
                        'linestyle',repmat('-',1,1+(alphas(aa)==max(alphas))));
                end
            end
            
            % save figure
            if want2save
                svg_file = fullfile(panel_path,[fig.Name,'.svg']);
                print(fig,svg_file,'-dsvg','-painters');
            end
        end
    end
end

%% stop check
if n_runs <= 1
    return;
end
close all;

%% spike count distributions as a function of window size

% figure initialization
fig = figure(figopt,...
    'name','GLM_spikeCountDistros_crossBins',...
    'color',[1,1,1]*1);

% bin settings
binspan = [0,30];
n_bins = range(binspan) + 1;
binedges = linspace(binspan(1),binspan(2),n_bins);

% axes initialization
logxx = log(glm_wins);
xxtick = t_set;
xxticklabel = num2cell(xxtick);
axes(axesopt.default,...
    'plotboxaspectratio',[1,1,1],...
    'xlim',[min(logxx),max(logxx)]+[-1,1]*.05*range(logxx),...
    'xtick',log(xxtick),...
    'xticklabel',xxticklabel,...
    'ylim',binspan/2+[-1,1]*.05*range(binspan)/2,...
    'yaxislocation','right',...
    'color','none',...
    'clipping','off',...
    'layer','top');
xlabel('Spike integration window (ms)');
ylabel('Spike count');

% intensity selection
i2_flags = i2 == i_set(i2_mode_idx);

% iterate through glm windows
for gg = 1 : n_glm
    
    % compute spike count distribution
    bincounts = histcounts(spkcounts.postS2Onset(gg,valid_flags & i2_flags),...
        'binedges',binedges);
    bincounts = bincounts / nansum(bincounts);
    
    % color gradient
    clr = [1,1,1] * gg / (n_glm + 1);
    
    % plot spike count distribution
    ups_bincounts = upsample(bincounts,2);
    ups_bincounts(2:2:end) = bincounts;
    ups_binedges = upsample(binedges(1:end-1),2);
    ups_binedges(2:2:end) = binedges(2:end);
    xpatch = [-ups_bincounts*.75,zeros(1,(n_bins-1)*2)] + logxx(gg);
    ypatch = [ups_binedges,fliplr(ups_binedges)];
    patch(xpatch,ypatch,'k',...
        'facealpha',1,...
        'edgecolor','none',...
        'facecolor',clr,...
        'linewidth',1.5);
    
    % plot distribution mean
    plot(logxx(gg),nanmean(spkcounts.postS2Onset(gg,valid_flags)),...
        'marker','o',...
        'markersize',10,...
        'markeredgecolor','w',...
        'markerfacecolor',clr,...
        'linewidth',1.5)
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% spike count distributions as a function of window size

% figure initialization
fig = figure(figopt,...
    'position',[240,560,420,320],...
    'name','GLM_spikeCountMus_crossBins',...
    'color',[1,1,1]*1);

% axes initialization
xxtick = unique([-pre_s1_delay;0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(~ismember(xxtick,[0,1e3,t_set(t2_mode_idx)])) = {''};
axes(axesopt.default,...
    'plotboxaspectratio',[2.5,1,1],...
    'xlim',[0,max(t_set)]+[-1,1]*.05*max(t_set),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylim',[0,4]+[-1,1]*.05*2.25*4,...
    'ytick',0:5,...
    'color','none',...
    'clipping','off',...
    'layer','top');
xlabel('Spike integration window (ms)');
ylabel('Mean spike count');

% intensity selection
i2_flags = i2 == i_set(i2_mode_idx);

% preallocation
mus_onset = nan(n_glm,1);
mus_offset = nan(n_glm,1);

% iterate through glm windows
for gg = 1 : n_glm
    
    % compute mean spike counts
    mus_onset(gg) = nanmean(spkcounts.postS2Onset(gg,valid_flags & i2_flags));
    mus_offset(gg) = nanmean(spkcounts.preS2Offset(gg,valid_flags & i2_flags));
end

% plot mean spike counts
plot(glm_wins,mus_onset,...
    'color','k',...
    'marker','s',...
    'markeredgecolor','k',...
    'markerfacecolor','none',...
    'markersize',8.5,...
    'linestyle','-',...
    'linewidth',1.5);
plot(glm_wins,mus_offset,...
    'color','k',...
    'marker','o',...
    'markeredgecolor','k',...
    'markerfacecolor','none',...
    'markersize',7.5,...
    'linestyle','-',...
    'linewidth',1.5);

% plot mean spike counts
plot(glm_wins,mus_onset,...
    'color','none',...
    'marker','s',...
    'markeredgecolor','none',...
    'markerfacecolor','w',...
    'markersize',8.5-1.5,...
    'linestyle','-',...
    'linewidth',1.5);
plot(glm_wins,mus_offset,...
    'color','none',...
    'marker','o',...
    'markeredgecolor','none',...
    'markerfacecolor','w',...
    'markersize',7.5-1.5,...
    'linestyle','-',...
    'linewidth',1.5);

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% spike count CDFs conditioned on window size

% figure initialization
fig = figure(figopt,...
    'name','GLM_spikeCountCDFs_crossBins',...
    'color',[1,1,1]*1);

% bin settings
binspan = [0,100];
n_bins = range(binspan) + 1;
binedges = linspace(binspan(1),binspan(2),n_bins);

% axes initialization
logxx = log(glm_wins);
xxtick = t_set;
xxticklabel = num2cell(xxtick);
axes(axesopt.default,...
    axesopt.psycurve,...
    'xlim',[0,25]+[-1,1]*.05*25,...
    'color','none',...
    'clipping','on',...
    'layer','top');
xlabel('Spike count');
ylabel('CDF');

% intensity selection
i2_flags = i2 == i_set(i2_mode_idx);

% iterate through glm windows
for gg = 1 : n_glm
    
    % compute spike count distribution
    bincounts = histcounts(spkcounts.postS2Onset(gg,valid_flags & i2_flags),...
        'binedges',binedges);
    bincounts = bincounts / nansum(bincounts);
    
    % color gradient
    clr = [1,1,1] * gg / (n_glm + 1);
    
    % plot spike count CDF
    stairs([0,binedges(1:end-1)],[0,cumsum(bincounts)],...
        'color',clr,...
        'linestyle','-',...
        'linewidth',1.5);
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% false negative rate as a function of window size

% figure initialization
fig = figure(figopt,...
    'position',[240,560,430,320],...
    'name',sprintf('GLM_falseNegativeRate_%s',distro),...
    'color',[1,1,1]*1);

% axes initialization
xxtick = unique([-pre_s1_delay;0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(~ismember(xxtick,[0,1e3,t_set(t2_mode_idx)])) = {''};
yylims = [.5,1];
yytick = linspace(0,1,5);
yyticklabel = num2cell(yytick);
yyticklabel(~ismember(yytick,yylims)) = {''};
axes(axesopt.default,...
    'plotboxaspectratio',[1.5,1,1],...
    'xlim',[0,max(t_set)]+[-1,1]*.05*max(t_set),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylim',yylims+[-1,1]*.05*range(yylims)*2.25,...
    'ytick',yytick,...
    'yticklabel',yyticklabel,...
    'color','none',...
    'clipping','off',...
    'layer','top');
xlabel('Spike integration window (ms)');
ylabel('P(false negative)');

% preallocation
p_falsenegative_onset = ones(n_runs,n_glm,2);
p_falsenegative_offset = ones(n_runs,n_glm,2);

% reference lines
plot([1,1]*t_set(t1_mode_idx),ylim,'--k');

% iterate through runs
for rr = 1 : n_runs
    
    % iterate through glm windows
    for gg = 1 : n_glm
        glm_win = glm_wins(gg);
        glm_str = sprintf('t%i',glm_win);
        
        % iterate through alphas
        for aa = 1 : n_alphas
            
            % iterate through signs
            for ss = 1 : 2
                p_falsenegative_onset(rr,gg,aa) = p_falsenegative_onset(rr,gg,aa) - ...
                    fractions.(glm_str).postS2Onset.I_2(rr,aa,ss);
                p_falsenegative_offset(rr,gg,aa) = p_falsenegative_offset(rr,gg,aa) - ...
                    fractions.(glm_str).preS2Offset.I_2(rr,aa,ss);
            end
        end
    end
end

% iterate through alphas
for aa = 1 : n_alphas
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsenegative_offset(:,:,aa)),...
        'color','k',...
        'marker','s',...
        'markeredgecolor','k',...
        'markerfacecolor','none',...
        'markersize',8.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsenegative_onset(:,:,aa)),...
        'color','k',...
        'marker','o',...
        'markeredgecolor','k',...
        'markerfacecolor','none',...
        'markersize',7.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % iterate through runs
%     for rr = 1 : n_runs
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsenegative_offset(rr,:,aa),...
%             'color','k',...
%             'marker','s',...
%             'markeredgecolor','k',...
%             'markerfacecolor','none',...
%             'markersize',8.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsenegative_onset(rr,:,aa),...
%             'color','k',...
%             'marker','o',...
%             'markeredgecolor','k',...
%             'markerfacecolor','none',...
%             'markersize',7.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%     end
end

% iterate through alphas
for aa = 1 : n_alphas
    if alphas(aa) == .01
        clr = [0,0,0];
    else
        clrs = colorlerp([[0,0,0];[1,1,1]],5);
        clr = clrs(end-1,:);
    end
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsenegative_offset(:,:,aa)),...
        'color','none',...
        'marker','s',...
        'markeredgecolor','none',...
        'markerfacecolor',clr,...
        'markersize',8.5-1.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsenegative_onset(:,:,aa)),...
        'color','none',...
        'marker','o',...
        'markeredgecolor','none',...
        'markerfacecolor',clr,...
        'markersize',7.5-1.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % iterate through runs
%     for rr = 1 : n_runs
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsenegative_offset(rr,:,aa),...
%             'color','none',...
%             'marker','s',...
%             'markeredgecolor','none',...
%             'markerfacecolor',clr,...
%             'markersize',8.5-1.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsenegative_onset(rr,:,aa),...
%             'color','none',...
%             'marker','o',...
%             'markeredgecolor','none',...
%             'markerfacecolor',clr,...
%             'markersize',7.5-1.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%     end
end

% dummy legend handles
p1 = plot(max(glm_wins)*2,-1,...
    'color','k',...
    'marker','s',...
    'markeredgecolor','k',...
    'markerfacecolor','w',...
    'markersize',8.5,...
    'linestyle','-',...
    'linewidth',1.5);

% plot false negative rate
p2 = plot(max(glm_wins)*2,-1,...
    'color','k',...
    'marker','o',...
    'markeredgecolor','k',...
    'markerfacecolor','w',...
    'markersize',7.5,...
    'linestyle','-',...
    'linewidth',1.5);

% legend
legend([p1,p2],{glm_roi_lbl.postS2Onset,glm_roi_lbl.preS2Offset},...
    'location','best',...
    'box','off');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%% false positive rate as a function of window size

% figure initialization
fig = figure(figopt,...
    'position',[240,240,430,320],...
    'name',sprintf('GLM_falsePositiveRate_%s',distro),...
    'color',[1,1,1]*1);

% axes initialization
xxtick = unique([-pre_s1_delay;0;t_set]);
xxticklabel = num2cell(xxtick);
xxticklabel(~ismember(xxtick,[0,1e3,t_set(t2_mode_idx)])) = {''};
yylims = [0,max(alphas)];
yytick = unique([0,alphas]);
yyticklabel = num2cell(yytick);
axes(axesopt.default,...
    'plotboxaspectratio',[2.25,1,1],...
    'xlim',[0,max(t_set)]+[-1,1]*.05*max(t_set),...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'ylim',yylims+[-1,1]*.05*range(yylims)*2.25,...
    'ytick',yytick,...
    'yticklabel',yyticklabel,...
    'color','none',...
    'clipping','off',...
    'layer','top');
xlabel('Spike integration window (ms)');
ylabel('P(false positive)');

% preallocation
p_falsepositive_onset = zeros(n_runs,n_glm,2);
p_falsepositive_offset = zeros(n_runs,n_glm,2);

% reference lines
plot([1,1]*t_set(t1_mode_idx),ylim,'--k');

% iterate through runs
for rr = 1 : n_runs
    
    % iterate through glm windows
    for gg = 1 : n_glm
        glm_win = glm_wins(gg);
        glm_str = sprintf('t%i',glm_win);
        
        % iterate through alphas
        for aa = 1 : n_alphas
            
            % iterate through signs
            for ss = 1 : 2
                p_falsepositive_onset(rr,gg,aa) = p_falsepositive_onset(rr,gg,aa) + ...
                    fractions.(glm_str).postS1Onset.I_2(rr,aa,ss);
                p_falsepositive_offset(rr,gg,aa) = p_falsepositive_offset(rr,gg,aa) + ...
                    fractions.(glm_str).preS1Offset.I_2(rr,aa,ss);
            end
        end
    end
end

% iterate through alphas
for aa = 1 : n_alphas
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsepositive_offset(:,:,aa)),...
        'color','k',...
        'marker','s',...
        'markeredgecolor','k',...
        'markerfacecolor','none',...
        'markersize',8.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsepositive_onset(:,:,aa)),...
        'color','k',...
        'marker','o',...
        'markeredgecolor','k',...
        'markerfacecolor','none',...
        'markersize',7.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % iterate through runs
%     for rr = 1 : n_runs
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsepositive_offset(rr,:,aa),...
%             'color','k',...
%             'marker','s',...
%             'markeredgecolor','k',...
%             'markerfacecolor','none',...
%             'markersize',8.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsepositive_onset(rr,:,aa),...
%             'color','k',...
%             'marker','o',...
%             'markeredgecolor','k',...
%             'markerfacecolor','none',...
%             'markersize',7.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%     end
end

% iterate through alphas
for aa = 1 : n_alphas
    if alphas(aa) == .01
        clr = [0,0,0];
    else
        clrs = colorlerp([[0,0,0];[1,1,1]],5);
        clr = clrs(end-1,:);
    end
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsepositive_offset(:,:,aa)),...
        'color','none',...
        'marker','s',...
        'markeredgecolor','none',...
        'markerfacecolor',clr,...
        'markersize',8.5-1.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % plot false negative rate
    plot(glm_wins,nanmean(p_falsepositive_onset(:,:,aa)),...
        'color','none',...
        'marker','o',...
        'markeredgecolor','none',...
        'markerfacecolor',clr,...
        'markersize',7.5-1.5,...
        'linestyle','-',...
        'linewidth',1.5);
    
    % iterate through runs
%     for rr = 1 : n_runs
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsepositive_offset(rr,:,aa),...
%             'color','none',...
%             'marker','s',...
%             'markeredgecolor','none',...
%             'markerfacecolor',clr,...
%             'markersize',8.5-1.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%         
%         % plot false negative rate
%         plot(glm_wins,p_falsepositive_onset(rr,:,aa),...
%             'color','none',...
%             'marker','o',...
%             'markeredgecolor','none',...
%             'markerfacecolor',clr,...
%             'markersize',7.5-1.5,...
%             'linestyle','-',...
%             'linewidth',1.5);
%     end
end

% dummy legend handles
p1 = plot(max(glm_wins)*2,-1,...
    'color','k',...
    'marker','s',...
    'markeredgecolor','k',...
    'markerfacecolor','w',...
    'markersize',8.5,...
    'linestyle','-',...
    'linewidth',1.5);

% plot false positive rate
p2 = plot(max(glm_wins)*2,-1,...
    'color','k',...
    'marker','o',...
    'markeredgecolor','k',...
    'markerfacecolor','w',...
    'markersize',7.5,...
    'linestyle','-',...
    'linewidth',1.5);

% legend
legend([p1,p2],{glm_roi_lbl.postS2Onset,glm_roi_lbl.preS2Offset},...
    'location','best',...
    'box','off');

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end