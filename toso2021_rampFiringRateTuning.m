%% initialization
if ~exist('data','var')
    toso2021_wrapper;
end

%% compute temporal tuning across task epochs

% preallocation
fr_tuning = struct();
for ee = 1 : n_cluster_epochs - 2
    epoch = cluster_epochs{ee};
    fr_tuning.(epoch) = nan(n_neurons,1);
end

% iterate through neurons
for nn = 1 : n_neurons_total
    progressreport(nn,n_neurons_total,'parsing neural data');
    neuron_flags = data.NeuronNumb == neuron_idcs(nn);
    spike_flags = ...
        valid_flags & ...
        neuron_flags;
    if sum(spike_flags) == 0 || ~ismember(nn,flagged_neurons)
        continue;
    end
    
    % fetch spike counts & compute spike rates
    spike_rates = data.SDF(spike_flags,:);
    n_trials = size(spike_rates,1);
    
    % S1-onset-aligned spike rates
    s1_onset_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags);
    s1_onset_alignment_flags = ...
        padded_time >= s1_onset_alignment + cluster_roi(1) & ...
        padded_time < s1_onset_alignment + t1(spike_flags);
    s1_onset_chunk_flags = ...
        padded_time >= s1_onset_alignment + cluster_roi(1)& ...
        padded_time < s1_onset_alignment + cluster_roi(2);
    s1_onset_spkrates = spike_rates';
    s1_onset_spkrates(~s1_onset_alignment_flags') = nan;
    s1_onset_spkrates = reshape(...
        s1_onset_spkrates(s1_onset_chunk_flags'),...
        [cluster_roi_n_bins,n_trials])';
    
    % S1-offset-aligned spike rates
    s1_offset_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags);
    s1_offset_alignment_flags = ...
        padded_time >= s1_offset_alignment - t1(spike_flags) & ...
        padded_time < s1_offset_alignment + cluster_roi(2);
    s1_offset_chunk_flags = ...
        padded_time >= s1_offset_alignment + cluster_roi(1)& ...
        padded_time < s1_offset_alignment + cluster_roi(2);
    s1_offset_spkrates = spike_rates';
    s1_offset_spkrates(~s1_offset_alignment_flags') = nan;
    s1_offset_spkrates = reshape(...
        s1_offset_spkrates(s1_offset_chunk_flags'),...
        [cluster_roi_n_bins,n_trials])';
    
    % S2-onset-aligned spike rates
    s2_onset_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi;
    s2_onset_alignment_flags = ...
        padded_time >= s2_onset_alignment + cluster_roi(1) & ...
        padded_time < s2_onset_alignment + t2(spike_flags);
    s2_onset_chunk_flags = ...
        padded_time >= s2_onset_alignment + cluster_roi(1) & ...
        padded_time < s2_onset_alignment + cluster_roi(2);
    s2_onset_spkrates = spike_rates';
    s2_onset_spkrates(~s2_onset_alignment_flags') = nan;
    s2_onset_spkrates = reshape(...
        s2_onset_spkrates(s2_onset_chunk_flags'),...
        [cluster_roi_n_bins,n_trials])';
    
    % S2-offset-aligned spike rates
    s2_offset_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi + ...
        t2(spike_flags);
    s2_offset_alignment_flags = ...
        padded_time >= s2_offset_alignment - t2(spike_flags) & ...
        padded_time < s2_offset_alignment + cluster_roi(2);
    s2_offset_chunk_flags = ...
        padded_time >= s2_offset_alignment + cluster_roi(1) & ...
        padded_time < s2_offset_alignment + cluster_roi(2);
    s2_offset_spkrates = spike_rates';
    s2_offset_spkrates(~s2_offset_alignment_flags') = nan;
    s2_offset_spkrates = reshape(...
        s2_offset_spkrates(s2_offset_chunk_flags'),...
        [cluster_roi_n_bins,n_trials])';
    
    % go-cue-aligned spike rates
    go_cue_alignment = ...
        pre_init_padding + ...
        pre_s1_delay(spike_flags) + ...
        t1(spike_flags) + ...
        isi + ...
        t2(spike_flags) + ...
        post_s2_delay;
    go_cue_alignment_flags = ...
        padded_time >= go_cue_alignment + cluster_roi(1) & ...
        padded_time < go_cue_alignment + cluster_roi(2);
    go_cue_chunk_flags = go_cue_alignment_flags;
    go_cue_spkrates = spike_rates';
    go_cue_spkrates(~go_cue_alignment_flags') = nan;
    go_cue_spkrates = reshape(...
        go_cue_spkrates(go_cue_chunk_flags'),...
        [cluster_roi_n_bins,n_trials])';
    
    % iterate through cluster epochs
    for ee = 1 : n_cluster_epochs
        epoch = cluster_epochs{ee};
        epoch_spkrates = eval([epoch,'_spkrates']);
        
        % compute average spike rates across trials
        epoch_spkrate = nanmean(epoch_spkrates);
        
        % normalize
%         epoch_spkrate = epoch_spkrate - min(epoch_spkrate);
        epoch_spkrate = epoch_spkrate ./ nansum(epoch_spkrate);

        % compute center of mass
        fr_tuning.(epoch)(nn) = epoch_spkrate * cluster_roi_time';
    end
end

%% plot temporal tuning of ramping & non-ramping neurons across task epochs

% figure initialization
fig = figure(figopt,...
    'position',[200 200 560 412.5],...
    'name','ramp_fr_tuning');

% epoch settings
epochs = fieldnames(fr_tuning);
n_epochs = numel(epochs);

% horizontal offset between clusters
xxoffset = .325;
xxoffsets = [-1,1] * xxoffset;

% axes initialization
xxtick = unique((1:n_ramp_epochs)+[-1;0;1]*xxoffset);
xxticklabel = num2cell(xxtick);
xxticklabel(~ismember(xxtick,1:n_cluster_epochs)) = {''};
xxticklabel(ismember(xxtick,1:n_cluster_epochs)) = cellfun(...
    @(x)capitalize(strrep(x,'_',' ')),cluster_epochs,...
    'uniformoutput',false);
yytick = linspace(cluster_roi(1),cluster_roi(2),5);
yyticklabel = num2cell(yytick);
yyticklabel(~ismember(yytick,cluster_roi)) = {''};
axes(axesopt.default,...
    'plotboxaspectratio',[2.25,1,1],...
    'color','none',...
    'xlim',[1,n_cluster_epochs]+[-1,1]*xxoffset*2,...
    'xtick',xxtick,...
    'xticklabel',xxticklabel,...
    'xticklabelrotation',45,...
    'ylim',cluster_roi+[-1,1]*.05*2.25*range(cluster_roi),...
    'ytick',yytick,...
    'yticklabel',yyticklabel,...
    'clipping','off');
xlabel('Task event');
ylabel('Temporal tuning');

% preallocation
distro = struct();
counts = struct();
avg = struct();
err = struct();

% choice of average and error functions
avgfun = @(x) nanmedian(x);
errfun = @(x) quantile(x,[.25,.75]) - nanmedian(x);

% bin settings
edges = linspace(cluster_roi(1),cluster_roi(2),30);

% iterate through alignments
for ee = 1 : n_epochs
    epoch = epochs{ee};
    distro.(epoch) = {...
        fr_tuning.(epoch)(cluster_idcs.(epoch){'ramp'});...
        fr_tuning.(epoch)(cluster_idcs.(epoch){'nonramp'})};
    counts.(epoch) = {...
        histcounts(fr_tuning.(epoch)(cluster_idcs.(epoch){'ramp'}),edges);...
        histcounts(fr_tuning.(epoch)(cluster_idcs.(epoch){'nonramp'}),edges)};
    avg.(epoch) = [...
        avgfun(fr_tuning.(epoch)(cluster_idcs.(epoch){'ramp'}));...
        avgfun(fr_tuning.(epoch)(cluster_idcs.(epoch){'nonramp'}))];
    err.(epoch) = [...
        errfun(fr_tuning.(epoch)(cluster_idcs.(epoch){'ramp'}));...
        errfun(fr_tuning.(epoch)(cluster_idcs.(epoch){'nonramp'}))];
end

% table conversions
distro = struct2table(distro,...
    'rownames',cluster_labels);
counts = struct2table(counts,...
    'rownames',cluster_labels);
avg = struct2table(avg,...
    'rownames',cluster_labels);
err = struct2table(err,...
    'rownames',cluster_labels);

% iterate through alignments
for ee = 1 : n_epochs
    epoch = epochs{ee};
    for kk = 1 : n_clusters
        cluster = cluster_labels(kk);
        xx = counts.(epoch){cluster};
        xx = (xx - min(xx)) / range(xx) * xxoffset * (-1)^(iseven(kk)) + ee;
        xpatch = [xx,fliplr(xx)];
        ypatch = [edges(1:end-1),edges(1:end-1)*0];
        patch(xpatch,ypatch,cluster_clrs(kk,:));
        errorbar(ee+xxoffsets(kk),avg.(epoch)(kk),...
            err.(epoch)(kk,1),err.(epoch)(kk,2),...
            'color','k',...
            'marker','o',...
            'markersize',7.5,...
            'markeredgecolor','k',...
            'markerfacecolor',ramp_clrs(kk,:),...
            'linewidth',1.5,...
            'capsize',0);
    end
end

% legend
legend({'ramping','non-ramping'},...
    'autoupdate','off',...
    'box','off',...
    'location','southwest');

% zero line
plot(xlim,[0,0],':k');

% iterate through alignments
for ee = 1 : n_epochs
    epoch = epochs{ee};
    xx = [-1,1] * .5 / 3 + ee;
    yy = [1,1] * max(yylim);
    plot([1,1]*ee,[min(ylim),1],':k',...
        'handlevisibility','off');
    plot(xx,yy,...
        'color','k',...
        'linewidth',1.5,...
        'handlevisibility','off');
    [~,pval] = kstest2(distro.(epoch){1},distro.(epoch){2});
    %     pval = kruskalwallis(vertcat(distro.(epoch){:}),[],'off');
    pval = pval * n_epochs;
    if pval < .01
        test_str = '**';
    elseif pval < .05
        test_str = '*';
    else
        test_str = 'n.s.';
    end
    text(mean(xx),mean(yy)-.025*range(ylim),test_str,...
        'color','k',...
        'fontsize',16,...
        'horizontalalignment','center',...
        'verticalalignment','bottom');
end

% save figure
if want2save
    svg_file = fullfile(panel_path,[fig.Name,'.svg']);
    print(fig,svg_file,'-dsvg','-painters');
end

%%
figure;
binedges = linspace(t_set(end)*.1,t_set(end)*.9,40);
% iterate through alignments
for ee = 1 : n_epochs
    subplot(n_epochs,1,ee); hold on;
    epoch = epochs{ee};
    for kk = 1 : 2
        histogram(distro.(epoch){kk},binedges,...
            'facecolor',ramp_clrs(kk,:),...
            'normalization','pdf');
    end
end